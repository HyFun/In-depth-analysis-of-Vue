import projectConfig from '/In-depth-analysis-of-Vue/pagic.config.js';
export default {
    'prev': {
        "text": "8.来，跟我一起实现diff算法",
        "link": "src/8.来，跟我一起实现diff算法.html"
    },
    'next': {
        "text": "10.vue插槽，你想了解的都在这里",
        "link": "src/10.vue插槽，你想了解的都在这里.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'pagic' },
    'pagePath': "src/9.揭秘Vue的事件机制.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "src/9.揭秘Vue的事件机制.html",
    'title': undefined,
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>这个系列讲到这里，Vue基本核心的东西已经分析完，但是Vue之所以强大，离不开它提供给用户的一些实用功能，开发者可以更偏向于业务逻辑而非基本功能的实现。例如，在日常开发中，我们将<code>@click=***</code>用得飞起，但是我们是否思考，Vue如何在后面为我们的模板做事件相关的处理，并且我们经常利用组件的自定义事件去实现父子间的通信，那这个事件和和原生dom事件又有不同的地方吗，能够实现通信的原理又是什么，带着疑惑，我们深入源码展开分析。</p>\n</blockquote>\n<h2 id="91-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">9.1. 模板编译<a class="anchor" href="#91-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">§</a></h2>\n<p><code>Vue</code>在挂载实例前，有相当多的工作是进行模板的编译，将<code>template</code>模板进行编译，解析成<code>AST</code>树，再转换成<code>render</code>函数，而有了<code>render</code>函数后才会进入实例挂载过程。对于事件而言，我们经常使用<code>v-on</code>或者<code>@</code>在模板上绑定事件。因此对事件的第一步处理，就是在编译阶段对事件指令做收集处理。</p>\n<p>从一个简单的用法分析编译阶段收集的信息：</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n<pre class="language-js"><code class="language-js">\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n            count<span class="token operator">:</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">doThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">count</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>我们之前在将模板编译的时候大致说过编译的流程，模板编译的入口是在<code>var ast = parse(template.trim(), options);</code>中，<code>parse</code>通过拆分模板字符串，将其解析为一个<code>AST</code>树，其中对于属性的处理，在<code>processAttr</code>中,由于分支较多，我们只分析例子中的流程。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> dirRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^v-|^@|^:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">processAttrs</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> list <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsList</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> syncGen<span class="token punctuation">,</span> isDynamic<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      name <span class="token operator">=</span> rawName <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">;</span> <span class="token comment">// v-on:click</span>\n      value <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span> <span class="token comment">// doThis</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dirRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 匹配v-或者@开头的指令</span>\n        el<span class="token punctuation">.</span><span class="token property-access">hasBindings</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        modifiers <span class="token operator">=</span> <span class="token function">parseModifiers</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>dirRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// parseModifiers(\'on:click\')</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>modifierRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>bindRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-bind分支</span>\n          <span class="token comment">// ...留到v-bind指令时分析</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>onRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-on分支</span>\n          name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>onRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拿到真正的事件click</span>\n          isDynamic <span class="token operator">=</span> dynamicArgRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 动态事件绑定</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> warn$<span class="token number">2</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isDynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span> <span class="token comment">// normal directives</span>\n         <span class="token comment">// 其他指令相关逻辑</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p><code>processAttrs</code>的逻辑虽然较多，但是理解起来较为简单，<code>var dirRE = /^v-|^@|^:/;</code>是匹配事件相关的正则，命中匹配的记过会得到事件指令相关内容，包括事件本身，事件回调以及事件修饰符。最终通过<code>addHandler</code>方法，为<code>AST</code>树添加事件相关的属性。而<code>addHandler</code>还有一个重要功能是对事件修饰符进行特殊处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// el是当前解析的AST树</span>\n<span class="token keyword">function</span> <span class="token function">addHandler</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>name<span class="token punctuation">,</span>value<span class="token punctuation">,</span>modifiers<span class="token punctuation">,</span>important<span class="token punctuation">,</span>warn<span class="token punctuation">,</span>range<span class="token punctuation">,</span>dynamic</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    modifiers <span class="token operator">=</span> modifiers <span class="token operator">||</span> emptyObject<span class="token punctuation">;</span>\n    <span class="token comment">// passive 和 prevent不能同时使用，可以参照官方文档说明</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>\n      warn <span class="token operator">&amp;&amp;</span>\n      modifiers<span class="token punctuation">.</span><span class="token property-access">prevent</span> <span class="token operator">&amp;&amp;</span> modifiers<span class="token punctuation">.</span><span class="token property-access">passive</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token string">\'passive and prevent can\'t be used together. \'</span> <span class="token operator">+</span>\n        <span class="token string">\'Passive handler can\'t prevent default event.\'</span><span class="token punctuation">,</span>\n        range\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 这部分的逻辑会对特殊的修饰符做字符串拼接的处理，以备后续的使用</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">"("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")===\'click\'?\'contextmenu\':("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">\'click\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">\'contextmenu\'</span><span class="token punctuation">;</span>\n        <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">right</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">middle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">"("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")===\'click\'?\'mouseup\':("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">\'click\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">\'mouseup\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> <span class="token function">prependModifierMarker</span><span class="token punctuation">(</span><span class="token string">\'!\'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">once</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">once</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> <span class="token function">prependModifierMarker</span><span class="token punctuation">(</span><span class="token string">\'~\'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">passive</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">passive</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> <span class="token function">prependModifierMarker</span><span class="token punctuation">(</span><span class="token string">\'&amp;\'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// events 用来记录绑定的事件</span>\n    <span class="token keyword">var</span> events<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">native</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">native</span><span class="token punctuation">;</span>\n      events <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">nativeEvents</span> <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">nativeEvents</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      events <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">events</span> <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">var</span> newHandler <span class="token operator">=</span> <span class="token function">rangeSetItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token method function property-access">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dynamic<span class="token operator">:</span> dynamic <span class="token punctuation">}</span><span class="token punctuation">,</span> range<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers <span class="token operator">!==</span> emptyObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newHandler<span class="token punctuation">.</span><span class="token property-access">modifiers</span> <span class="token operator">=</span> modifiers<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">var</span> handlers <span class="token operator">=</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token comment">// 绑定的事件可以多个，回调也可以多个，最终会合并到数组中</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      important <span class="token operator">?</span> handlers<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newHandler<span class="token punctuation">)</span> <span class="token operator">:</span> handlers<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>newHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> important <span class="token operator">?</span> <span class="token punctuation">[</span>newHandler<span class="token punctuation">,</span> handlers<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>handlers<span class="token punctuation">,</span> newHandler<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> newHandler<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    el<span class="token punctuation">.</span><span class="token property-access">plain</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>修饰符的处理会改变最终字符串的拼接结果，我们看最终转换的<code>AST</code>树：</p>\n<p><img src="./img/9.1.png" alt=""></p>\n<h2 id="92-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">9.2. 代码生成<a class="anchor" href="#92-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">§</a></h2>\n<p>模板编译的最后一步是根据解析完的<code>AST</code>树生成对应平台的渲染函数，也就是<code>render</code>函数的生成过程, 对应<code>var code = generate(ast, options);</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">generate</span> <span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodegenState</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> code <span class="token operator">=</span> ast <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'_c("div")\'</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n      render<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"with(this){return "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// with函数</span>\n      staticRenderFns<span class="token operator">:</span> state<span class="token punctuation">.</span><span class="token property-access">staticRenderFns</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>其中核心处理在<code>getElement</code>中,<code>getElement</code>函数会根据不同指令类型处理不同的分支，对于普通模板的编译会进入<code>genData</code>函数中处理，同样分析只针对事件相关的处理，从前面解析出的<code>AST</code>树明显看出，<code>AST</code>树中多了<code>events</code>的属性,<code>genHandlers</code>函数会为<code>event</code>属性做逻辑处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">\'{\'</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// directives first.</span>\n    <span class="token comment">// directives may mutate the el\'s other properties before they are generated.</span>\n    <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span> data <span class="token operator">+=</span> dirs <span class="token operator">+</span> <span class="token string">\',\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token comment">//其他处理</span>\n    ···\n\n    <span class="token comment">// event handlers</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    ···\n\n    <span class="token keyword control-flow">return</span> data\n  <span class="token punctuation">}</span>\n</code></pre>\n<p><code>genHandlers</code>的逻辑，会遍历解析好的<code>AST</code>树，拿到<code>event</code>对象属性，并根据属性上的事件对象拼接成字符串。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genHandlers</span> <span class="token punctuation">(</span><span class="token parameter">events<span class="token punctuation">,</span>isNative</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> prefix <span class="token operator">=</span> isNative <span class="token operator">?</span> <span class="token string">\'nativeOn:\'</span> <span class="token operator">:</span> <span class="token string">\'on:\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> staticHandlers <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> dynamicHandlers <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n    <span class="token comment">// 遍历ast树解析好的event对象</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//genHandler本质上是将事件对象转换成可拼接的字符串</span>\n      <span class="token keyword">var</span> handlerCode <span class="token operator">=</span> <span class="token function">genHandler</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dynamic</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dynamicHandlers <span class="token operator">+=</span> name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        staticHandlers <span class="token operator">+=</span> <span class="token string">"\""</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\":"</span> <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    staticHandlers <span class="token operator">=</span> <span class="token string">"{"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>staticHandlers<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dynamicHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> prefix <span class="token operator">+</span> <span class="token string">"_d("</span> <span class="token operator">+</span> staticHandlers <span class="token operator">+</span> <span class="token string">",["</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dynamicHandlers<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"])"</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> prefix <span class="token operator">+</span> staticHandlers\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token comment">// 事件模板书写匹配</span>\n<span class="token keyword">var</span> isMethodPath <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doThis</span>\n<span class="token keyword">var</span> isFunctionExpression <span class="token operator">=</span> fnExpRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// () => {} or function() {}</span>\n<span class="token keyword">var</span> isFunctionInvocation <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>fnInvokeRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doThis($event)</span>\n\n\n<span class="token keyword">function</span> <span class="token function">genHandler</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token string">\'function(){}\'</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 事件绑定可以多个，多个在解析ast树时会以数组的形式存在，如果有多个则会递归调用getHandler方法返回数组。</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">genHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// value： doThis 可以有三种方式</span>\n    <span class="token keyword">var</span> isMethodPath <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doThis</span>\n    <span class="token keyword">var</span> isFunctionExpression <span class="token operator">=</span> fnExpRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// () => {} or function() {}</span>\n    <span class="token keyword">var</span> isFunctionInvocation <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>fnInvokeRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doThis($event)</span>\n\n    <span class="token comment">// 没有任何修饰符</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 符合函数定义规范，则直接返回调用函数名 doThis</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isMethodPath <span class="token operator">||</span> isFunctionExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> handler<span class="token punctuation">.</span><span class="token property-access">value</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 不符合则通过function函数封装返回</span>\n      <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"function($event){"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isFunctionInvocation <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"return "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span> <span class="token comment">// inline statement</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 包含修饰符的场景</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>模板中事件的写法有三种,分别对应上诉上个正则匹配的内容。</p>\n<ol>\n<li><code>&lt;div @click=&quot;doThis&quot;&gt;&lt;/div&gt;</code></li>\n<li><code>&lt;div @click=&quot;doThis($event)&quot;&gt;&lt;/div&gt;</code></li>\n<li><code>&lt;div @click=&quot;()=&gt;{}&quot;&gt;&lt;/div&gt; &lt;div @click=&quot;function(){}&quot;&gt;&lt;/div&gt;</code></li>\n</ol>\n<p>上述对事件对象的转换，如果事件不带任何修饰符，并且满足正确的模板写法，则直接返回调用事件名，如果不满足，则有可能是<code>&lt;div @click=&quot;console.log(11)&quot;&gt;&lt;/div&gt;</code>的写法，此时会封装到<code>function($event){}</code>中。</p>\n<p>包含修饰符的场景较多，我们单独列出分析。以上文中的例子说明，<code>modifiers: { stop: true }</code>会拿到<code>stop</code>对应需要添加的逻辑脚本<code>\'$event.stopPropagation();\'</code>,并将它添加到函数字符串中返回。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ···</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> genModifierCode <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 遍历modifiers上记录的修饰符</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> handler<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifierCode<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 根据修饰符添加对应js的代码</span>\n        genModifierCode <span class="token operator">+=</span> modifierCode<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// left/right</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>keyCodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          keys<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 针对exact的处理</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">\'exact\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> modifiers <span class="token operator">=</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        genModifierCode <span class="token operator">+=</span> <span class="token function">genGuard</span><span class="token punctuation">(</span>\n          <span class="token punctuation">[</span><span class="token string">\'ctrl\'</span><span class="token punctuation">,</span> <span class="token string">\'shift\'</span><span class="token punctuation">,</span> <span class="token string">\'alt\'</span><span class="token punctuation">,</span> <span class="token string">\'meta\'</span><span class="token punctuation">]</span>\n            <span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token operator">!</span>modifiers<span class="token punctuation">[</span>keyModifier<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"$event."</span> <span class="token operator">+</span> keyModifier <span class="token operator">+</span> <span class="token string">"Key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'||\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        keys<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      code <span class="token operator">+=</span> <span class="token function">genKeyFilter</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// Make sure modifiers like prevent and stop get executed after key filtering</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>genModifierCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      code <span class="token operator">+=</span> genModifierCode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 根据三种不同的书写模板返回不同的字符串</span>\n    <span class="token keyword">var</span> handlerCode <span class="token operator">=</span> isMethodPath\n      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"return "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"($event)"</span><span class="token punctuation">)</span>\n      <span class="token operator">:</span> isFunctionExpression\n        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"return ("</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")($event)"</span><span class="token punctuation">)</span>\n        <span class="token operator">:</span> isFunctionInvocation\n          <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"return "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token operator">:</span> handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"function($event){"</span> <span class="token operator">+</span> code <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> modifierCode <span class="token operator">=</span> <span class="token punctuation">{</span>\n  stop<span class="token operator">:</span> <span class="token string">\'$event.stopPropagation();\'</span><span class="token punctuation">,</span>\n  prevent<span class="token operator">:</span> <span class="token string">\'$event.preventDefault();\'</span><span class="token punctuation">,</span>\n  self<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"$event.target !== $event.currentTarget"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  ctrl<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"!$event.ctrlKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  shift<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"!$event.shiftKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  alt<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"!$event.altKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  meta<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"!$event.metaKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  left<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"\'button\' in $event &amp;&amp; $event.button !== 0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  middle<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"\'button\' in $event &amp;&amp; $event.button !== 1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  right<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"\'button\' in $event &amp;&amp; $event.button !== 2"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>经过这一转换后，生成<code>with</code>封装的<code>render</code>函数如下：</p>\n<pre class="language-js"><code class="language-js"><span class="token string">"_c(\'div\',{attrs:{"</span>id<span class="token string">":"</span>app<span class="token string">"}},[_c(\'div\',{on:{"</span>click<span class="token string">":function($event){$event.stopPropagation();return doThis($event)}}},[_v("</span>点击<span class="token string">")]),_v("</span> <span class="token string">"),_c(\'span\',[_v(_s(count))])])"</span>\n\n</code></pre>\n<h2 id="93-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">9.3. 事件绑定<a class="anchor" href="#93-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">§</a></h2>\n<p>前面花了大量的篇幅介绍了模板上的事件标记在构建<code>AST</code>树上是怎么处理，并且如何根据构建的<code>AST</code>树返回正确的<code>render</code>渲染函数，<strong>但是真正事件绑定还是离不开绑定注册事件</strong>。这一个阶段就是发生在组件挂载的阶段。\n有了<code>render</code>函数，自然可以生成实例挂载需要的<code>Vnode</code>树，并且会进行<code>patchVnode</code>的环节进行真实节点的构建，如果发现过程已经遗忘，可以回顾以往章节。\n<code>Vnode</code>树的构建过程和之前介绍的内容没有明显的区别，所以这个过程就不做赘述，最终生成的<code>vnode</code>如下：</p>\n<p><img src="./img/9.2.png" alt=""></p>\n<p>有了<code>Vnode</code>,接下来会遍历子节点递归调用<code>createElm</code>为每个子节点创建真实的<code>DOM</code>,由于<code>Vnode</code>中有<code>data</code>属性，在创建真实<code>DOM</code>时会进行注册相关钩子的过程，其中一个就是注册事件相关处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 针对指令的处理</span>\n   <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">function</span> <span class="token function">invokeCreateHooks</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i$<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i$<span class="token number">1</span> <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span><span class="token property-access">create</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cbs<span class="token punctuation">.</span><span class="token property-access">create</span><span class="token punctuation">[</span>i$<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  i <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">hook</span><span class="token punctuation">;</span> <span class="token comment">// Reuse variable</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token property-access">create</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token property-access">insert</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> insertedVnodeQueue<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token punctuation">{</span>\n  create<span class="token operator">:</span> updateDOMListeners<span class="token punctuation">,</span>\n  update<span class="token operator">:</span> updateDOMListeners\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>我们经常会在<code>template</code>模板中定义<code>v-on</code>事件，<code>v-bind</code>动态属性，<code>v-text</code>动态指令等，和<code>v-on</code>事件指令一样，他们都会在编译阶段和<code>Vnode</code>生成阶段创建<code>data</code>属性，因此<code>invokeCreateHooks</code>就是一个模板指令处理的任务，他分别针对不同的指令为真实阶段创建不同的任务。针对事件，这里会调用<code>updateDOMListeners</code>对真实的<code>DOM</code>节点注册事件任务。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">updateDOMListeners</span> <span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// on是事件指令的标志</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">on</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">on</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 新旧节点不同的事件绑定解绑</span>\n  <span class="token keyword">var</span> on <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> oldOn <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 拿到需要添加事件的真实DOM节点</span>\n  target$<span class="token number">1</span> <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">elm</span><span class="token punctuation">;</span>\n  <span class="token comment">// normalizeEvents是对事件兼容性的处理</span>\n  <span class="token function">normalizeEvents</span><span class="token punctuation">(</span>on<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">updateListeners</span><span class="token punctuation">(</span>on<span class="token punctuation">,</span> oldOn<span class="token punctuation">,</span> add$<span class="token number">1</span><span class="token punctuation">,</span> remove$<span class="token number">2</span><span class="token punctuation">,</span> createOnceHandler$<span class="token number">1</span><span class="token punctuation">,</span> vnode<span class="token punctuation">.</span><span class="token property-access">context</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  target$<span class="token number">1</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>其中<code>normalizeEvents</code>是针对<code>v-model</code>的处理,例如在IE下不支持<code>change</code>事件，只能用<code>input</code>事件代替。</p>\n<p><code>updateListeners</code>的逻辑也很简单，它会遍历<code>on</code>事件对新节点事件绑定注册事件，对旧节点移除事件监听，它即要处理原生<code>DOM</code>事件的添加和移除，也要处理自定义事件的添加和移除，关于自定义事件，后续内容再分析。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">updateListeners</span> <span class="token punctuation">(</span><span class="token parameter">on<span class="token punctuation">,</span>oldOn<span class="token punctuation">,</span>add<span class="token punctuation">,</span>remove###<span class="token number">1</span><span class="token punctuation">,</span>createOnceHandler<span class="token punctuation">,</span>vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> name<span class="token punctuation">,</span> def###<span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> old<span class="token punctuation">,</span> event<span class="token punctuation">;</span>\n    <span class="token comment">// 遍历事件</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> on<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      def###<span class="token number">1</span> <span class="token operator">=</span> cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      old <span class="token operator">=</span> oldOn<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      event <span class="token operator">=</span> <span class="token function">normalizeEvent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 事件名非法的报错处理</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token string">"Invalid handler for event \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\": got "</span> <span class="token operator">+</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          vm\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 旧节点不存在</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// createFunInvoker返回事件最终执行的回调函数</span>\n          cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createFnInvoker</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 只触发一次的事件</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">once</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createOnceHandler</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 执行真正注册事件的执行函数</span>\n        <span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">passive</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        old<span class="token punctuation">.</span><span class="token property-access">fns</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>\n        on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> old<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 旧节点存在，接触旧节点上的绑定事件</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> oldOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>on<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        event <span class="token operator">=</span> <span class="token function">normalizeEvent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        remove###<span class="token number">1</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> oldOn<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>在初始构建实例时，旧节点是不存在的,此时会调用<code>createFnInvoker</code>函数对事件回调函数做一层封装，由于单个事件的回调可以有多个，因此<code>createFnInvoker</code>的作用是对单个，多个回调事件统一封装处理，返回一个当事件触发时真正执行的匿名函数。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createFnInvoker</span> <span class="token punctuation">(</span><span class="token parameter">fns<span class="token punctuation">,</span> vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当事件触发时，执行invoker方法，方法执行fns</span>\n  <span class="token keyword">function</span> <span class="token function">invoker</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> arguments$<span class="token number">1</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> fns <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">;</span>\n    <span class="token comment">// fns是多个回调函数组成的数组</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> cloned <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cloned<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 遍历执行真正的回调函数</span>\n        <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cloned<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> arguments$<span class="token number">1</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token string">"v-on handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// return handler return value for single handlers</span>\n      <span class="token keyword control-flow">return</span> <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>fns<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token string">"v-on handler"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  invoker<span class="token punctuation">.</span><span class="token property-access">fns</span> <span class="token operator">=</span> fns<span class="token punctuation">;</span>\n  <span class="token comment">// 返回最终事件执行的回调函数</span>\n  <span class="token keyword control-flow">return</span> invoker\n<span class="token punctuation">}</span>\n</code></pre>\n<p>其中<code>invokeWithErrorHandling</code>会执行定义好的回调函数，这里做了同步异步回调的错误处理。<code>try-catch</code>用于同步回调捕获异常错误，<code>Promise.catch</code>用于捕获异步任务返回错误。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">invokeWithErrorHandling</span> <span class="token punctuation">(</span><span class="token parameter">handler<span class="token punctuation">,</span>context<span class="token punctuation">,</span>args<span class="token punctuation">,</span>vm<span class="token punctuation">,</span>info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> res<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n      res <span class="token operator">=</span> args <span class="token operator">?</span> handler<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span> handler<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token property-access">_isVue</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// issue #9511</span>\n        <span class="token comment">// reassign to res to avoid catch triggering multiple times when nested calls</span>\n        <span class="token comment">// 当生命周期钩子函数内部执行返回promise对象是，如果捕获异常，则会对异常信息做一层包装返回</span>\n        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info <span class="token operator">+</span> <span class="token string">" (Promise/async)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> res\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>如果事件只触发一次(即使用了<code>once</code>修饰符)，则调用<code>createOnceHandler</code>匿名，在执行完回调之后，移除事件绑定。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createOnceHandler</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> capture</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> _target <span class="token operator">=</span> target$<span class="token number">1</span><span class="token punctuation">;</span> \n    <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token function">onceHandler</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//调用事件回调</span>\n      <span class="token keyword">var</span> res <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 移除事件绑定</span>\n        <span class="token function">remove$2</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> onceHandler<span class="token punctuation">,</span> capture<span class="token punctuation">,</span> _target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p><strong><code>add</code>和<code>remove</code>是真正在<code>DOM</code>上绑定事件和解绑事件的过程，它的实现也是利用了原生<code>DOM</code>的<code>addEventListener,removeEventListener api</code>。</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>handler<span class="token punctuation">,</span>capture<span class="token punctuation">,</span>passive</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  ···\n  target$<span class="token number">1.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>handler<span class="token punctuation">,</span>\n      supportsPassive\n        <span class="token operator">?</span> <span class="token punctuation">{</span> capture<span class="token operator">:</span> capture<span class="token punctuation">,</span> passive<span class="token operator">:</span> passive <span class="token punctuation">}</span>\n        <span class="token operator">:</span> capture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">remove</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>handler<span class="token punctuation">,</span>capture<span class="token punctuation">,</span>_target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>_target <span class="token operator">||</span> target$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">removeEventListener</span><span class="token punctuation">(</span>\n    name<span class="token punctuation">,</span>\n    handler<span class="token punctuation">.</span><span class="token property-access">_wrapper</span> <span class="token operator">||</span> handler<span class="token punctuation">,</span>\n    capture\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>另外事件的解绑除了发生在只触发一次的事件，也发生在组件更新<code>patchVnode</code>过程，具体不展开分析，可以参考之前介绍组件更新的内容研究<code>updateListeners</code>的过程。</p>\n<h2 id="94-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6">9.4. 自定义事件<a class="anchor" href="#94-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6">§</a></h2>\n<p><code>Vue</code>如何处理原生的<code>Dom</code>事件基本流程已经讲完，然而针对事件还有一个重要的概念不可忽略，那就是组件的自定义事件。我们知道父子组件可以利用事件进行通信，子组件通过<code>vm.$emit</code>向父组件分发事件，父组件通过<code>v-on:(event)</code>接收信息并处理回调。因此针对自定义事件在源码中自然有不同的处理逻辑。我们先通过简单的例子展开。</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>\n      template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div @click="emitToParent">点击传递信息给父组件&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">emitToParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">$emit</span><span class="token punctuation">(</span><span class="token string">\'myevent\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n      components<span class="token operator">:</span> <span class="token punctuation">{</span>\n        child\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="app">&lt;child @myevent="myevent" @click.native="nativeClick">&lt;/child>&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">myevent</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">nativeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'nativeClick\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>从例子中可以看出，普通节点只能使用原生<code>DOM</code>事件，而组件上却可以使用自定义的事件和原生的<code>DOM</code>事件，并且通过<code>native</code>修饰符区分，有了原生<code>DOM</code>对于事件处理的基础，接下来我们看看自定义事件有什么特别之处。</p>\n<h3 id="941-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">9.4.1 模板编译<a class="anchor" href="#941-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">§</a></h3>\n<p>回过头来看看事件的模板编译，在生成<code>AST</code>树阶段，之前分析说过<code>addHandler</code>方法会对事件的修饰符做不同的处理，当遇到<code>native</code>修饰符时，事件相关属性方法会添加到<code>nativeEvents</code>属性中。\n下图是<code>child</code>生成的<code>AST</code>树:</p>\n<p><img src="./img/9.3.png" alt=""></p>\n<h3 id="942-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">9.4.2 代码生成<a class="anchor" href="#942-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">§</a></h3>\n<p>不管是组件还是普通标签，事件处理代码都在<code>genData</code>的过程中，和之前分析原生事件一致，<code>genHandlers</code>用来处理事件对象并拼接成字符串。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">nativeEvents</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">nativeEvents</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>getHandlers</code>的逻辑前面已经讲过，处理组件原生事件和自定义事件的区别在<code>isNative</code>选项上，我们看最终生成的代码为：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>attrs<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token string">"app"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">\'child\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>on<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"myevent"</span><span class="token operator">:</span>myevent<span class="token punctuation">}</span><span class="token punctuation">,</span>nativeOn<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"click"</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> <span class="token function">nativeClick</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n</code></pre>\n<p>有了<code>render</code>函数接下来会根据它创建<code>Vnode</code>实例，其中遇到组件占位符节点时会创建子组件<code>Vnode</code>， 此时为<code>on,nativeOn</code>做了一层特殊的转换，将<code>nativeOn</code>赋值给<code>on</code>,这样后续的处理方式和普通节点一致。另外，将<code>on</code>赋值给<code>listeners</code>,在创建<code>VNode</code>时以组件配置<code>componentOptions</code>传入。</p>\n<pre class="language-js"><code class="language-js"> <span class="token comment">// 创建子组件过程</span>\n<span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  ···\n  <span class="token keyword">var</span> listeners <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">on</span><span class="token punctuation">;</span>\n  <span class="token comment">// replace with listeners with .native modifier</span>\n  <span class="token comment">// so it gets processed during parent component patch.</span>\n  data<span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">nativeOn</span><span class="token punctuation">;</span>\n  ···\n\n  <span class="token keyword">var</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token string">"vue-component-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">cid</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    data<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token maybe-class-name">Ctor</span><span class="token operator">:</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> propsData<span class="token operator">:</span> propsData<span class="token punctuation">,</span> listeners<span class="token operator">:</span> listeners<span class="token punctuation">,</span> tag<span class="token operator">:</span> tag<span class="token punctuation">,</span> children<span class="token operator">:</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    asyncFactory\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword control-flow">return</span> vnode\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="943-%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B">9.4.3 子组件实例<a class="anchor" href="#943-%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B">§</a></h3>\n<p>接下来是通过<code>Vnode</code>生成真实节点的过程，这个过程遇到子<code>Vnode</code>会实例化子组件实例。实例化子类构造器的过程又回到之前文章分析的初始化选项配置的过程，在系列最开始的时候分析<code>Vue.prototype.init</code>的过程，跳过了组件初始化的流程，其中针对自定义事件的处理的关键如下</p>\n<pre class="language-js"><code class="language-js"><span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 针对子组件的事件处理逻辑</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">_isComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 初始化内部组件</span>\n    <span class="token function">initInternalComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 选项合并，将合并后的选项赋值给实例的$options属性</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">$options</span> <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>\n      <span class="token function">resolveConstructorOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token property-access">constructor</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      vm\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 初始化事件处理</span>\n  <span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">initInternalComponent</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">$options</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token property-access">constructor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ···\n  opts<span class="token punctuation">.</span><span class="token property-access">_parentListeners</span> <span class="token operator">=</span> vnodeComponentOptions<span class="token punctuation">.</span><span class="token property-access">listeners</span><span class="token punctuation">;</span>\n  ···\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>此时，子组件拿到了父占位符节点定义的<code>@myevent=&quot;myevent&quot;</code>事件</strong>。接下来进行子组件的初始化事件处理，此时<code>vm.$options._parentListeners</code>会拿到父组件自定义的事件。而带有自定义事件的组件会执行<code>updateComponentListeners</code>函数。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">initEvents</span> <span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vm<span class="token punctuation">.</span><span class="token property-access">_events</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  vm<span class="token punctuation">.</span><span class="token property-access">_hasHookEvent</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token comment">// init parent attached events</span>\n  <span class="token keyword">var</span> listeners <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">_parentListeners</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 带有自定义事件属性的实例</span>\n    <span class="token function">updateComponentListeners</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>之后又回到了之前分析的<code>updateListeners</code>过程，和原生<code>DOM</code>事件不同的是，自定义事件的添加移除的方法不同。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> target <span class="token operator">=</span> vm<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span><span class="token method function property-access">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">remove$1</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span><span class="token method function property-access">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n\n<span class="token keyword">function</span> <span class="token function">updateComponentListeners</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span>listeners<span class="token punctuation">,</span>oldListeners</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target <span class="token operator">=</span> vm<span class="token punctuation">;</span>\n  <span class="token function">updateListeners</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> oldListeners <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> remove$<span class="token number">1</span><span class="token punctuation">,</span> createOnceHandler<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  target <span class="token operator">=</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<h3 id="944-%E4%BA%8B%E4%BB%B6api">9.4.4 事件API<a class="anchor" href="#944-%E4%BA%8B%E4%BB%B6api">§</a></h3>\n<p>我们回头来看看<code>Vue</code>在引入阶段对事件的处理还做了哪些初始化操作。<code>Vue</code>在实例上用一个<code>_events</code>属性存贮管理事件的派发和更新，暴露出<code>$on, $once, $off, $emit</code>方法给外部管理事件和派发执行事件。</p>\n<pre class="language-js"><code class="language-js">  <span class="token function">eventsMixin</span><span class="token punctuation">(</span><span class="token maybe-class-name">Vue</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义事件相关函数</span>\n\n  <span class="token keyword">function</span> <span class="token function">eventsMixin</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">Vue</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> hookRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^hook:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n    <span class="token comment">// $on方法用来监听事件，执行回调</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">$on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token comment">// event支持数组形式。</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          vm<span class="token punctuation">.</span><span class="token method function property-access">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// _events数组中记录需要监听的事件以及事件触发的回调</span>\n        <span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hookRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          vm<span class="token punctuation">.</span><span class="token property-access">_hasHookEvent</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">return</span> vm\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// $once方法用来监听一次事件，执行回调</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">$once</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token comment">// 对fn做一层包装，先解除绑定再执行fn回调</span>\n      <span class="token keyword">function</span> <span class="token function">on</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vm<span class="token punctuation">.</span><span class="token method function property-access">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      on<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>\n      vm<span class="token punctuation">.</span><span class="token method function property-access">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">return</span> vm\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// $off方法用来解除事件监听</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">$off</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token comment">// 如果$off方法没有传递任何参数时，将_events属性清空。</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vm<span class="token punctuation">.</span><span class="token property-access">_events</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">return</span> vm\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 数组处理</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i$<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i$<span class="token number">1</span> <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i$<span class="token number">1</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          vm<span class="token punctuation">.</span><span class="token method function property-access">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i$<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">return</span> vm\n      <span class="token punctuation">}</span>\n      <span class="token keyword">var</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> vm\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">return</span> vm\n      <span class="token punctuation">}</span>\n      <span class="token comment">// specific handler</span>\n      <span class="token keyword">var</span> cb<span class="token punctuation">;</span>\n      <span class="token keyword">var</span> i <span class="token operator">=</span> cbs<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cb <span class="token operator">=</span> cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cb <span class="token operator">===</span> fn <span class="token operator">||</span> cb<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 将监听的事件回调移除</span>\n          cbs<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword control-flow">break</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">return</span> vm\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// $emit方法用来触发事件，执行回调</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">$emit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> lowerCaseEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>lowerCaseEvent <span class="token operator">!==</span> event <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>lowerCaseEvent<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">tip</span><span class="token punctuation">(</span>\n            <span class="token string">"Event \""</span> <span class="token operator">+</span> lowerCaseEvent <span class="token operator">+</span> <span class="token string">"\" is emitted in component "</span> <span class="token operator">+</span>\n            <span class="token punctuation">(</span><span class="token function">formatComponentName</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" but the handler is registered for \""</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">"\". "</span> <span class="token operator">+</span>\n            <span class="token string">"Note that HTML attributes are case-insensitive and you cannot use "</span> <span class="token operator">+</span>\n            <span class="token string">"v-on to listen to camelCase events when using in-DOM templates. "</span> <span class="token operator">+</span>\n            <span class="token string">"You should probably use \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">hyphenate</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" instead of \""</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">"\"."</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">var</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token comment">// 找到已经监听事件的回调，执行</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cbs <span class="token operator">=</span> cbs<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">toArray</span><span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token operator">:</span> cbs<span class="token punctuation">;</span>\n        <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">"event handler for \""</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> cbs<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> args<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">return</span> vm\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>有了这些事件api，自定义事件的添加移除理解起来也简单很多。组件通过<code>this.$emit</code>在组件实例中派发了事件，而在这之前，组件已经将需要监听的事件以及回调添加到实例的<code>_events</code>属性中，触发事件时便可以直接执行监听事件的回调。</p>\n<p><strong>最后，我们换一个角度理解父子组件通信，组件自定义事件的触发和监听本质上都是在当前的组件实例中进行，之所以能产生父子组件通信的效果是因为事件监听的回调函数写在了父组件中。</strong></p>\n<h2 id="95-%E5%B0%8F%E7%BB%93">9.5 小结<a class="anchor" href="#95-%E5%B0%8F%E7%BB%93">§</a></h2>\n<p>事件是我们日常开发中必不可少的功能点，<code>Vue</code>在应用层暴露了<code>@,v-on</code>的指令供开发者在模板中绑定事件。事件指令在模板编译阶段会以属性的形式存在，而在真实节点渲染阶段会根据事件属性去绑定相关的事件。对于组件的事件而言，我们可以利用事件进行子父组件间的通信，他本质上是在同个子组件内部维护了一个事件总线，从分析结果可以看出，之所以有子父组件通信的效果，原因仅仅是因为回调函数写在了父组件中。</p>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://unpkg.com/react-dom@17/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/In-depth-analysis-of-Vue/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': undefined,
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>这个系列讲到这里，Vue基本核心的东西已经分析完，但是Vue之所以强大，离不开它提供给用户的一些实用功能，开发者可以更偏向于业务逻辑而非基本功能的实现。例如，在日常开发中，我们将<code>@click=***</code>用得飞起，但是我们是否思考，Vue如何在后面为我们的模板做事件相关的处理，并且我们经常利用组件的自定义事件去实现父子间的通信，那这个事件和和原生dom事件又有不同的地方吗，能够实现通信的原理又是什么，带着疑惑，我们深入源码展开分析。</p>\n</blockquote>\n<h2 id="91-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">9.1. 模板编译<a class="anchor" href="#91-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">§</a></h2>\n<p><code>Vue</code>在挂载实例前，有相当多的工作是进行模板的编译，将<code>template</code>模板进行编译，解析成<code>AST</code>树，再转换成<code>render</code>函数，而有了<code>render</code>函数后才会进入实例挂载过程。对于事件而言，我们经常使用<code>v-on</code>或者<code>@</code>在模板上绑定事件。因此对事件的第一步处理，就是在编译阶段对事件指令做收集处理。</p>\n<p>从一个简单的用法分析编译阶段收集的信息：</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n<pre class="language-js"><code class="language-js">\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n            count<span class="token operator">:</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">doThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">count</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>我们之前在将模板编译的时候大致说过编译的流程，模板编译的入口是在<code>var ast = parse(template.trim(), options);</code>中，<code>parse</code>通过拆分模板字符串，将其解析为一个<code>AST</code>树，其中对于属性的处理，在<code>processAttr</code>中,由于分支较多，我们只分析例子中的流程。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> dirRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^v-|^@|^:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">processAttrs</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> list <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsList</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> syncGen<span class="token punctuation">,</span> isDynamic<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      name <span class="token operator">=</span> rawName <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">;</span> <span class="token comment">// v-on:click</span>\n      value <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span> <span class="token comment">// doThis</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dirRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 匹配v-或者@开头的指令</span>\n        el<span class="token punctuation">.</span><span class="token property-access">hasBindings</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        modifiers <span class="token operator">=</span> <span class="token function">parseModifiers</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>dirRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// parseModifiers(\'on:click\')</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>modifierRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>bindRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-bind分支</span>\n          <span class="token comment">// ...留到v-bind指令时分析</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>onRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-on分支</span>\n          name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>onRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拿到真正的事件click</span>\n          isDynamic <span class="token operator">=</span> dynamicArgRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 动态事件绑定</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> warn$<span class="token number">2</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isDynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span> <span class="token comment">// normal directives</span>\n         <span class="token comment">// 其他指令相关逻辑</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p><code>processAttrs</code>的逻辑虽然较多，但是理解起来较为简单，<code>var dirRE = /^v-|^@|^:/;</code>是匹配事件相关的正则，命中匹配的记过会得到事件指令相关内容，包括事件本身，事件回调以及事件修饰符。最终通过<code>addHandler</code>方法，为<code>AST</code>树添加事件相关的属性。而<code>addHandler</code>还有一个重要功能是对事件修饰符进行特殊处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// el是当前解析的AST树</span>\n<span class="token keyword">function</span> <span class="token function">addHandler</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>name<span class="token punctuation">,</span>value<span class="token punctuation">,</span>modifiers<span class="token punctuation">,</span>important<span class="token punctuation">,</span>warn<span class="token punctuation">,</span>range<span class="token punctuation">,</span>dynamic</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    modifiers <span class="token operator">=</span> modifiers <span class="token operator">||</span> emptyObject<span class="token punctuation">;</span>\n    <span class="token comment">// passive 和 prevent不能同时使用，可以参照官方文档说明</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>\n      warn <span class="token operator">&amp;&amp;</span>\n      modifiers<span class="token punctuation">.</span><span class="token property-access">prevent</span> <span class="token operator">&amp;&amp;</span> modifiers<span class="token punctuation">.</span><span class="token property-access">passive</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token string">\'passive and prevent can\'t be used together. \'</span> <span class="token operator">+</span>\n        <span class="token string">\'Passive handler can\'t prevent default event.\'</span><span class="token punctuation">,</span>\n        range\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 这部分的逻辑会对特殊的修饰符做字符串拼接的处理，以备后续的使用</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">"("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")===\'click\'?\'contextmenu\':("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">\'click\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">\'contextmenu\'</span><span class="token punctuation">;</span>\n        <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">right</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">middle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">"("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")===\'click\'?\'mouseup\':("</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">\'click\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        name <span class="token operator">=</span> <span class="token string">\'mouseup\'</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> <span class="token function">prependModifierMarker</span><span class="token punctuation">(</span><span class="token string">\'!\'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">once</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">once</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> <span class="token function">prependModifierMarker</span><span class="token punctuation">(</span><span class="token string">\'~\'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">passive</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">passive</span><span class="token punctuation">;</span>\n      name <span class="token operator">=</span> <span class="token function">prependModifierMarker</span><span class="token punctuation">(</span><span class="token string">\'&amp;\'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> dynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// events 用来记录绑定的事件</span>\n    <span class="token keyword">var</span> events<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token property-access">native</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span><span class="token property-access">native</span><span class="token punctuation">;</span>\n      events <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">nativeEvents</span> <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">nativeEvents</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      events <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">events</span> <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">var</span> newHandler <span class="token operator">=</span> <span class="token function">rangeSetItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token method function property-access">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dynamic<span class="token operator">:</span> dynamic <span class="token punctuation">}</span><span class="token punctuation">,</span> range<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifiers <span class="token operator">!==</span> emptyObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newHandler<span class="token punctuation">.</span><span class="token property-access">modifiers</span> <span class="token operator">=</span> modifiers<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">var</span> handlers <span class="token operator">=</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">/* istanbul ignore if */</span>\n    <span class="token comment">// 绑定的事件可以多个，回调也可以多个，最终会合并到数组中</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      important <span class="token operator">?</span> handlers<span class="token punctuation">.</span><span class="token method function property-access">unshift</span><span class="token punctuation">(</span>newHandler<span class="token punctuation">)</span> <span class="token operator">:</span> handlers<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>newHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> important <span class="token operator">?</span> <span class="token punctuation">[</span>newHandler<span class="token punctuation">,</span> handlers<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>handlers<span class="token punctuation">,</span> newHandler<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> newHandler<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    el<span class="token punctuation">.</span><span class="token property-access">plain</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>修饰符的处理会改变最终字符串的拼接结果，我们看最终转换的<code>AST</code>树：</p>\n<p><img src="./img/9.1.png" alt=""></p>\n<h2 id="92-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">9.2. 代码生成<a class="anchor" href="#92-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">§</a></h2>\n<p>模板编译的最后一步是根据解析完的<code>AST</code>树生成对应平台的渲染函数，也就是<code>render</code>函数的生成过程, 对应<code>var code = generate(ast, options);</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">generate</span> <span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span>options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodegenState</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> code <span class="token operator">=</span> ast <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'_c("div")\'</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n      render<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"with(this){return "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// with函数</span>\n      staticRenderFns<span class="token operator">:</span> state<span class="token punctuation">.</span><span class="token property-access">staticRenderFns</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>其中核心处理在<code>getElement</code>中,<code>getElement</code>函数会根据不同指令类型处理不同的分支，对于普通模板的编译会进入<code>genData</code>函数中处理，同样分析只针对事件相关的处理，从前面解析出的<code>AST</code>树明显看出，<code>AST</code>树中多了<code>events</code>的属性,<code>genHandlers</code>函数会为<code>event</code>属性做逻辑处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">\'{\'</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// directives first.</span>\n    <span class="token comment">// directives may mutate the el\'s other properties before they are generated.</span>\n    <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span> data <span class="token operator">+=</span> dirs <span class="token operator">+</span> <span class="token string">\',\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token comment">//其他处理</span>\n    ···\n\n    <span class="token comment">// event handlers</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    ···\n\n    <span class="token keyword control-flow">return</span> data\n  <span class="token punctuation">}</span>\n</code></pre>\n<p><code>genHandlers</code>的逻辑，会遍历解析好的<code>AST</code>树，拿到<code>event</code>对象属性，并根据属性上的事件对象拼接成字符串。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genHandlers</span> <span class="token punctuation">(</span><span class="token parameter">events<span class="token punctuation">,</span>isNative</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> prefix <span class="token operator">=</span> isNative <span class="token operator">?</span> <span class="token string">\'nativeOn:\'</span> <span class="token operator">:</span> <span class="token string">\'on:\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> staticHandlers <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> dynamicHandlers <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n    <span class="token comment">// 遍历ast树解析好的event对象</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//genHandler本质上是将事件对象转换成可拼接的字符串</span>\n      <span class="token keyword">var</span> handlerCode <span class="token operator">=</span> <span class="token function">genHandler</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dynamic</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        dynamicHandlers <span class="token operator">+=</span> name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        staticHandlers <span class="token operator">+=</span> <span class="token string">"\""</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\":"</span> <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    staticHandlers <span class="token operator">=</span> <span class="token string">"{"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>staticHandlers<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dynamicHandlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> prefix <span class="token operator">+</span> <span class="token string">"_d("</span> <span class="token operator">+</span> staticHandlers <span class="token operator">+</span> <span class="token string">",["</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dynamicHandlers<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"])"</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> prefix <span class="token operator">+</span> staticHandlers\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token comment">// 事件模板书写匹配</span>\n<span class="token keyword">var</span> isMethodPath <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doThis</span>\n<span class="token keyword">var</span> isFunctionExpression <span class="token operator">=</span> fnExpRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// () => {} or function() {}</span>\n<span class="token keyword">var</span> isFunctionInvocation <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>fnInvokeRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doThis($event)</span>\n\n\n<span class="token keyword">function</span> <span class="token function">genHandler</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token string">\'function(){}\'</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 事件绑定可以多个，多个在解析ast树时会以数组的形式存在，如果有多个则会递归调用getHandler方法返回数组。</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">genHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// value： doThis 可以有三种方式</span>\n    <span class="token keyword">var</span> isMethodPath <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doThis</span>\n    <span class="token keyword">var</span> isFunctionExpression <span class="token operator">=</span> fnExpRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// () => {} or function() {}</span>\n    <span class="token keyword">var</span> isFunctionInvocation <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span>fnInvokeRE<span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// doThis($event)</span>\n\n    <span class="token comment">// 没有任何修饰符</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 符合函数定义规范，则直接返回调用函数名 doThis</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isMethodPath <span class="token operator">||</span> isFunctionExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> handler<span class="token punctuation">.</span><span class="token property-access">value</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 不符合则通过function函数封装返回</span>\n      <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"function($event){"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>isFunctionInvocation <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"return "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span> <span class="token comment">// inline statement</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 包含修饰符的场景</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>模板中事件的写法有三种,分别对应上诉上个正则匹配的内容。</p>\n<ol>\n<li><code>&lt;div @click=&quot;doThis&quot;&gt;&lt;/div&gt;</code></li>\n<li><code>&lt;div @click=&quot;doThis($event)&quot;&gt;&lt;/div&gt;</code></li>\n<li><code>&lt;div @click=&quot;()=&gt;{}&quot;&gt;&lt;/div&gt; &lt;div @click=&quot;function(){}&quot;&gt;&lt;/div&gt;</code></li>\n</ol>\n<p>上述对事件对象的转换，如果事件不带任何修饰符，并且满足正确的模板写法，则直接返回调用事件名，如果不满足，则有可能是<code>&lt;div @click=&quot;console.log(11)&quot;&gt;&lt;/div&gt;</code>的写法，此时会封装到<code>function($event){}</code>中。</p>\n<p>包含修饰符的场景较多，我们单独列出分析。以上文中的例子说明，<code>modifiers: { stop: true }</code>会拿到<code>stop</code>对应需要添加的逻辑脚本<code>\'$event.stopPropagation();\'</code>,并将它添加到函数字符串中返回。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ···</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> genModifierCode <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 遍历modifiers上记录的修饰符</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> handler<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>modifierCode<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 根据修饰符添加对应js的代码</span>\n        genModifierCode <span class="token operator">+=</span> modifierCode<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// left/right</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>keyCodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          keys<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 针对exact的处理</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">\'exact\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> modifiers <span class="token operator">=</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        genModifierCode <span class="token operator">+=</span> <span class="token function">genGuard</span><span class="token punctuation">(</span>\n          <span class="token punctuation">[</span><span class="token string">\'ctrl\'</span><span class="token punctuation">,</span> <span class="token string">\'shift\'</span><span class="token punctuation">,</span> <span class="token string">\'alt\'</span><span class="token punctuation">,</span> <span class="token string">\'meta\'</span><span class="token punctuation">]</span>\n            <span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token operator">!</span>modifiers<span class="token punctuation">[</span>keyModifier<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyModifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"$event."</span> <span class="token operator">+</span> keyModifier <span class="token operator">+</span> <span class="token string">"Key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">\'||\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        keys<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      code <span class="token operator">+=</span> <span class="token function">genKeyFilter</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// Make sure modifiers like prevent and stop get executed after key filtering</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>genModifierCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      code <span class="token operator">+=</span> genModifierCode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 根据三种不同的书写模板返回不同的字符串</span>\n    <span class="token keyword">var</span> handlerCode <span class="token operator">=</span> isMethodPath\n      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"return "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"($event)"</span><span class="token punctuation">)</span>\n      <span class="token operator">:</span> isFunctionExpression\n        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"return ("</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")($event)"</span><span class="token punctuation">)</span>\n        <span class="token operator">:</span> isFunctionInvocation\n          <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"return "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token operator">:</span> handler<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"function($event){"</span> <span class="token operator">+</span> code <span class="token operator">+</span> handlerCode <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> modifierCode <span class="token operator">=</span> <span class="token punctuation">{</span>\n  stop<span class="token operator">:</span> <span class="token string">\'$event.stopPropagation();\'</span><span class="token punctuation">,</span>\n  prevent<span class="token operator">:</span> <span class="token string">\'$event.preventDefault();\'</span><span class="token punctuation">,</span>\n  self<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"$event.target !== $event.currentTarget"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  ctrl<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"!$event.ctrlKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  shift<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"!$event.shiftKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  alt<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"!$event.altKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  meta<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"!$event.metaKey"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  left<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"\'button\' in $event &amp;&amp; $event.button !== 0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  middle<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"\'button\' in $event &amp;&amp; $event.button !== 1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  right<span class="token operator">:</span> <span class="token function">genGuard</span><span class="token punctuation">(</span><span class="token string">"\'button\' in $event &amp;&amp; $event.button !== 2"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>经过这一转换后，生成<code>with</code>封装的<code>render</code>函数如下：</p>\n<pre class="language-js"><code class="language-js"><span class="token string">"_c(\'div\',{attrs:{"</span>id<span class="token string">":"</span>app<span class="token string">"}},[_c(\'div\',{on:{"</span>click<span class="token string">":function($event){$event.stopPropagation();return doThis($event)}}},[_v("</span>点击<span class="token string">")]),_v("</span> <span class="token string">"),_c(\'span\',[_v(_s(count))])])"</span>\n\n</code></pre>\n<h2 id="93-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">9.3. 事件绑定<a class="anchor" href="#93-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">§</a></h2>\n<p>前面花了大量的篇幅介绍了模板上的事件标记在构建<code>AST</code>树上是怎么处理，并且如何根据构建的<code>AST</code>树返回正确的<code>render</code>渲染函数，<strong>但是真正事件绑定还是离不开绑定注册事件</strong>。这一个阶段就是发生在组件挂载的阶段。\n有了<code>render</code>函数，自然可以生成实例挂载需要的<code>Vnode</code>树，并且会进行<code>patchVnode</code>的环节进行真实节点的构建，如果发现过程已经遗忘，可以回顾以往章节。\n<code>Vnode</code>树的构建过程和之前介绍的内容没有明显的区别，所以这个过程就不做赘述，最终生成的<code>vnode</code>如下：</p>\n<p><img src="./img/9.2.png" alt=""></p>\n<p>有了<code>Vnode</code>,接下来会遍历子节点递归调用<code>createElm</code>为每个子节点创建真实的<code>DOM</code>,由于<code>Vnode</code>中有<code>data</code>属性，在创建真实<code>DOM</code>时会进行注册相关钩子的过程，其中一个就是注册事件相关处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 针对指令的处理</span>\n   <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">function</span> <span class="token function">invokeCreateHooks</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i$<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i$<span class="token number">1</span> <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span><span class="token property-access">create</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cbs<span class="token punctuation">.</span><span class="token property-access">create</span><span class="token punctuation">[</span>i$<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  i <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">hook</span><span class="token punctuation">;</span> <span class="token comment">// Reuse variable</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token property-access">create</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token property-access">insert</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> insertedVnodeQueue<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token punctuation">{</span>\n  create<span class="token operator">:</span> updateDOMListeners<span class="token punctuation">,</span>\n  update<span class="token operator">:</span> updateDOMListeners\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>我们经常会在<code>template</code>模板中定义<code>v-on</code>事件，<code>v-bind</code>动态属性，<code>v-text</code>动态指令等，和<code>v-on</code>事件指令一样，他们都会在编译阶段和<code>Vnode</code>生成阶段创建<code>data</code>属性，因此<code>invokeCreateHooks</code>就是一个模板指令处理的任务，他分别针对不同的指令为真实阶段创建不同的任务。针对事件，这里会调用<code>updateDOMListeners</code>对真实的<code>DOM</code>节点注册事件任务。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">updateDOMListeners</span> <span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// on是事件指令的标志</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">on</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">on</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 新旧节点不同的事件绑定解绑</span>\n  <span class="token keyword">var</span> on <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> oldOn <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 拿到需要添加事件的真实DOM节点</span>\n  target$<span class="token number">1</span> <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">elm</span><span class="token punctuation">;</span>\n  <span class="token comment">// normalizeEvents是对事件兼容性的处理</span>\n  <span class="token function">normalizeEvents</span><span class="token punctuation">(</span>on<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">updateListeners</span><span class="token punctuation">(</span>on<span class="token punctuation">,</span> oldOn<span class="token punctuation">,</span> add$<span class="token number">1</span><span class="token punctuation">,</span> remove$<span class="token number">2</span><span class="token punctuation">,</span> createOnceHandler$<span class="token number">1</span><span class="token punctuation">,</span> vnode<span class="token punctuation">.</span><span class="token property-access">context</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  target$<span class="token number">1</span> <span class="token operator">=</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>其中<code>normalizeEvents</code>是针对<code>v-model</code>的处理,例如在IE下不支持<code>change</code>事件，只能用<code>input</code>事件代替。</p>\n<p><code>updateListeners</code>的逻辑也很简单，它会遍历<code>on</code>事件对新节点事件绑定注册事件，对旧节点移除事件监听，它即要处理原生<code>DOM</code>事件的添加和移除，也要处理自定义事件的添加和移除，关于自定义事件，后续内容再分析。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">updateListeners</span> <span class="token punctuation">(</span><span class="token parameter">on<span class="token punctuation">,</span>oldOn<span class="token punctuation">,</span>add<span class="token punctuation">,</span>remove###<span class="token number">1</span><span class="token punctuation">,</span>createOnceHandler<span class="token punctuation">,</span>vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> name<span class="token punctuation">,</span> def###<span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> old<span class="token punctuation">,</span> event<span class="token punctuation">;</span>\n    <span class="token comment">// 遍历事件</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> on<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      def###<span class="token number">1</span> <span class="token operator">=</span> cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      old <span class="token operator">=</span> oldOn<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      event <span class="token operator">=</span> <span class="token function">normalizeEvent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 事件名非法的报错处理</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token string">"Invalid handler for event \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\": got "</span> <span class="token operator">+</span> <span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          vm\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 旧节点不存在</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// createFunInvoker返回事件最终执行的回调函数</span>\n          cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createFnInvoker</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 只触发一次的事件</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">once</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createOnceHandler</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 执行真正注册事件的执行函数</span>\n        <span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">passive</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        old<span class="token punctuation">.</span><span class="token property-access">fns</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>\n        on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> old<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 旧节点存在，接触旧节点上的绑定事件</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> oldOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>on<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        event <span class="token operator">=</span> <span class="token function">normalizeEvent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        remove###<span class="token number">1</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span> oldOn<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">capture</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>在初始构建实例时，旧节点是不存在的,此时会调用<code>createFnInvoker</code>函数对事件回调函数做一层封装，由于单个事件的回调可以有多个，因此<code>createFnInvoker</code>的作用是对单个，多个回调事件统一封装处理，返回一个当事件触发时真正执行的匿名函数。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createFnInvoker</span> <span class="token punctuation">(</span><span class="token parameter">fns<span class="token punctuation">,</span> vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 当事件触发时，执行invoker方法，方法执行fns</span>\n  <span class="token keyword">function</span> <span class="token function">invoker</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> arguments$<span class="token number">1</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> fns <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token property-access">fns</span><span class="token punctuation">;</span>\n    <span class="token comment">// fns是多个回调函数组成的数组</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> cloned <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cloned<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 遍历执行真正的回调函数</span>\n        <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cloned<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> arguments$<span class="token number">1</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token string">"v-on handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// return handler return value for single handlers</span>\n      <span class="token keyword control-flow">return</span> <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>fns<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token string">"v-on handler"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  invoker<span class="token punctuation">.</span><span class="token property-access">fns</span> <span class="token operator">=</span> fns<span class="token punctuation">;</span>\n  <span class="token comment">// 返回最终事件执行的回调函数</span>\n  <span class="token keyword control-flow">return</span> invoker\n<span class="token punctuation">}</span>\n</code></pre>\n<p>其中<code>invokeWithErrorHandling</code>会执行定义好的回调函数，这里做了同步异步回调的错误处理。<code>try-catch</code>用于同步回调捕获异常错误，<code>Promise.catch</code>用于捕获异步任务返回错误。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">invokeWithErrorHandling</span> <span class="token punctuation">(</span><span class="token parameter">handler<span class="token punctuation">,</span>context<span class="token punctuation">,</span>args<span class="token punctuation">,</span>vm<span class="token punctuation">,</span>info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> res<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n      res <span class="token operator">=</span> args <span class="token operator">?</span> handler<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span> handler<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token property-access">_isVue</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// issue #9511</span>\n        <span class="token comment">// reassign to res to avoid catch triggering multiple times when nested calls</span>\n        <span class="token comment">// 当生命周期钩子函数内部执行返回promise对象是，如果捕获异常，则会对异常信息做一层包装返回</span>\n        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info <span class="token operator">+</span> <span class="token string">" (Promise/async)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> res\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>如果事件只触发一次(即使用了<code>once</code>修饰符)，则调用<code>createOnceHandler</code>匿名，在执行完回调之后，移除事件绑定。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createOnceHandler</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> capture</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> _target <span class="token operator">=</span> target$<span class="token number">1</span><span class="token punctuation">;</span> \n    <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token function">onceHandler</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//调用事件回调</span>\n      <span class="token keyword">var</span> res <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 移除事件绑定</span>\n        <span class="token function">remove$2</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> onceHandler<span class="token punctuation">,</span> capture<span class="token punctuation">,</span> _target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p><strong><code>add</code>和<code>remove</code>是真正在<code>DOM</code>上绑定事件和解绑事件的过程，它的实现也是利用了原生<code>DOM</code>的<code>addEventListener,removeEventListener api</code>。</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>handler<span class="token punctuation">,</span>capture<span class="token punctuation">,</span>passive</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  ···\n  target$<span class="token number">1.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>handler<span class="token punctuation">,</span>\n      supportsPassive\n        <span class="token operator">?</span> <span class="token punctuation">{</span> capture<span class="token operator">:</span> capture<span class="token punctuation">,</span> passive<span class="token operator">:</span> passive <span class="token punctuation">}</span>\n        <span class="token operator">:</span> capture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">remove</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>handler<span class="token punctuation">,</span>capture<span class="token punctuation">,</span>_target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>_target <span class="token operator">||</span> target$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">removeEventListener</span><span class="token punctuation">(</span>\n    name<span class="token punctuation">,</span>\n    handler<span class="token punctuation">.</span><span class="token property-access">_wrapper</span> <span class="token operator">||</span> handler<span class="token punctuation">,</span>\n    capture\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>另外事件的解绑除了发生在只触发一次的事件，也发生在组件更新<code>patchVnode</code>过程，具体不展开分析，可以参考之前介绍组件更新的内容研究<code>updateListeners</code>的过程。</p>\n<h2 id="94-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6">9.4. 自定义事件<a class="anchor" href="#94-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6">§</a></h2>\n<p><code>Vue</code>如何处理原生的<code>Dom</code>事件基本流程已经讲完，然而针对事件还有一个重要的概念不可忽略，那就是组件的自定义事件。我们知道父子组件可以利用事件进行通信，子组件通过<code>vm.$emit</code>向父组件分发事件，父组件通过<code>v-on:(event)</code>接收信息并处理回调。因此针对自定义事件在源码中自然有不同的处理逻辑。我们先通过简单的例子展开。</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>\n      template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div @click="emitToParent">点击传递信息给父组件&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">emitToParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">$emit</span><span class="token punctuation">(</span><span class="token string">\'myevent\'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n      components<span class="token operator">:</span> <span class="token punctuation">{</span>\n        child\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="app">&lt;child @myevent="myevent" @click.native="nativeClick">&lt;/child>&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">myevent</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">nativeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'nativeClick\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<p>从例子中可以看出，普通节点只能使用原生<code>DOM</code>事件，而组件上却可以使用自定义的事件和原生的<code>DOM</code>事件，并且通过<code>native</code>修饰符区分，有了原生<code>DOM</code>对于事件处理的基础，接下来我们看看自定义事件有什么特别之处。</p>\n<h3 id="941-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">9.4.1 模板编译<a class="anchor" href="#941-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">§</a></h3>\n<p>回过头来看看事件的模板编译，在生成<code>AST</code>树阶段，之前分析说过<code>addHandler</code>方法会对事件的修饰符做不同的处理，当遇到<code>native</code>修饰符时，事件相关属性方法会添加到<code>nativeEvents</code>属性中。\n下图是<code>child</code>生成的<code>AST</code>树:</p>\n<p><img src="./img/9.3.png" alt=""></p>\n<h3 id="942-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">9.4.2 代码生成<a class="anchor" href="#942-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90">§</a></h3>\n<p>不管是组件还是普通标签，事件处理代码都在<code>genData</code>的过程中，和之前分析原生事件一致，<code>genHandlers</code>用来处理事件对象并拼接成字符串。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">nativeEvents</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">nativeEvents</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>getHandlers</code>的逻辑前面已经讲过，处理组件原生事件和自定义事件的区别在<code>isNative</code>选项上，我们看最终生成的代码为：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>attrs<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token operator">:</span><span class="token string">"app"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">\'child\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>on<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"myevent"</span><span class="token operator">:</span>myevent<span class="token punctuation">}</span><span class="token punctuation">,</span>nativeOn<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"click"</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> <span class="token function">nativeClick</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n</code></pre>\n<p>有了<code>render</code>函数接下来会根据它创建<code>Vnode</code>实例，其中遇到组件占位符节点时会创建子组件<code>Vnode</code>， 此时为<code>on,nativeOn</code>做了一层特殊的转换，将<code>nativeOn</code>赋值给<code>on</code>,这样后续的处理方式和普通节点一致。另外，将<code>on</code>赋值给<code>listeners</code>,在创建<code>VNode</code>时以组件配置<code>componentOptions</code>传入。</p>\n<pre class="language-js"><code class="language-js"> <span class="token comment">// 创建子组件过程</span>\n<span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  ···\n  <span class="token keyword">var</span> listeners <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">on</span><span class="token punctuation">;</span>\n  <span class="token comment">// replace with listeners with .native modifier</span>\n  <span class="token comment">// so it gets processed during parent component patch.</span>\n  data<span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">nativeOn</span><span class="token punctuation">;</span>\n  ···\n\n  <span class="token keyword">var</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token string">"vue-component-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">cid</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    data<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token maybe-class-name">Ctor</span><span class="token operator">:</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> propsData<span class="token operator">:</span> propsData<span class="token punctuation">,</span> listeners<span class="token operator">:</span> listeners<span class="token punctuation">,</span> tag<span class="token operator">:</span> tag<span class="token punctuation">,</span> children<span class="token operator">:</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    asyncFactory\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword control-flow">return</span> vnode\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="943-%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B">9.4.3 子组件实例<a class="anchor" href="#943-%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B">§</a></h3>\n<p>接下来是通过<code>Vnode</code>生成真实节点的过程，这个过程遇到子<code>Vnode</code>会实例化子组件实例。实例化子类构造器的过程又回到之前文章分析的初始化选项配置的过程，在系列最开始的时候分析<code>Vue.prototype.init</code>的过程，跳过了组件初始化的流程，其中针对自定义事件的处理的关键如下</p>\n<pre class="language-js"><code class="language-js"><span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 针对子组件的事件处理逻辑</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">_isComponent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 初始化内部组件</span>\n    <span class="token function">initInternalComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 选项合并，将合并后的选项赋值给实例的$options属性</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">$options</span> <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>\n      <span class="token function">resolveConstructorOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token property-access">constructor</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      vm\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 初始化事件处理</span>\n  <span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">initInternalComponent</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">$options</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token property-access">constructor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ···\n  opts<span class="token punctuation">.</span><span class="token property-access">_parentListeners</span> <span class="token operator">=</span> vnodeComponentOptions<span class="token punctuation">.</span><span class="token property-access">listeners</span><span class="token punctuation">;</span>\n  ···\n<span class="token punctuation">}</span>\n</code></pre>\n<p><strong>此时，子组件拿到了父占位符节点定义的<code>@myevent=&quot;myevent&quot;</code>事件</strong>。接下来进行子组件的初始化事件处理，此时<code>vm.$options._parentListeners</code>会拿到父组件自定义的事件。而带有自定义事件的组件会执行<code>updateComponentListeners</code>函数。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">initEvents</span> <span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  vm<span class="token punctuation">.</span><span class="token property-access">_events</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  vm<span class="token punctuation">.</span><span class="token property-access">_hasHookEvent</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token comment">// init parent attached events</span>\n  <span class="token keyword">var</span> listeners <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">_parentListeners</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 带有自定义事件属性的实例</span>\n    <span class="token function">updateComponentListeners</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>之后又回到了之前分析的<code>updateListeners</code>过程，和原生<code>DOM</code>事件不同的是，自定义事件的添加移除的方法不同。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> target <span class="token operator">=</span> vm<span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span><span class="token method function property-access">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">remove$1</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target<span class="token punctuation">.</span><span class="token method function property-access">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n\n<span class="token keyword">function</span> <span class="token function">updateComponentListeners</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span>listeners<span class="token punctuation">,</span>oldListeners</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  target <span class="token operator">=</span> vm<span class="token punctuation">;</span>\n  <span class="token function">updateListeners</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> oldListeners <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> remove$<span class="token number">1</span><span class="token punctuation">,</span> createOnceHandler<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  target <span class="token operator">=</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<h3 id="944-%E4%BA%8B%E4%BB%B6api">9.4.4 事件API<a class="anchor" href="#944-%E4%BA%8B%E4%BB%B6api">§</a></h3>\n<p>我们回头来看看<code>Vue</code>在引入阶段对事件的处理还做了哪些初始化操作。<code>Vue</code>在实例上用一个<code>_events</code>属性存贮管理事件的派发和更新，暴露出<code>$on, $once, $off, $emit</code>方法给外部管理事件和派发执行事件。</p>\n<pre class="language-js"><code class="language-js">  <span class="token function">eventsMixin</span><span class="token punctuation">(</span><span class="token maybe-class-name">Vue</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义事件相关函数</span>\n\n  <span class="token keyword">function</span> <span class="token function">eventsMixin</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">Vue</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> hookRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^hook:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n    <span class="token comment">// $on方法用来监听事件，执行回调</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">$on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token comment">// event支持数组形式。</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          vm<span class="token punctuation">.</span><span class="token method function property-access">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// _events数组中记录需要监听的事件以及事件触发的回调</span>\n        <span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hookRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          vm<span class="token punctuation">.</span><span class="token property-access">_hasHookEvent</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">return</span> vm\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// $once方法用来监听一次事件，执行回调</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">$once</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token comment">// 对fn做一层包装，先解除绑定再执行fn回调</span>\n      <span class="token keyword">function</span> <span class="token function">on</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vm<span class="token punctuation">.</span><span class="token method function property-access">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      on<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>\n      vm<span class="token punctuation">.</span><span class="token method function property-access">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">return</span> vm\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// $off方法用来解除事件监听</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">$off</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token comment">// 如果$off方法没有传递任何参数时，将_events属性清空。</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vm<span class="token punctuation">.</span><span class="token property-access">_events</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">return</span> vm\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 数组处理</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i$<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i$<span class="token number">1</span> <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i$<span class="token number">1</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          vm<span class="token punctuation">.</span><span class="token method function property-access">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i$<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword control-flow">return</span> vm\n      <span class="token punctuation">}</span>\n      <span class="token keyword">var</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> vm\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">return</span> vm\n      <span class="token punctuation">}</span>\n      <span class="token comment">// specific handler</span>\n      <span class="token keyword">var</span> cb<span class="token punctuation">;</span>\n      <span class="token keyword">var</span> i <span class="token operator">=</span> cbs<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cb <span class="token operator">=</span> cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cb <span class="token operator">===</span> fn <span class="token operator">||</span> cb<span class="token punctuation">.</span><span class="token property-access">fn</span> <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 将监听的事件回调移除</span>\n          cbs<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword control-flow">break</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">return</span> vm\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// $emit方法用来触发事件，执行回调</span>\n    <span class="token class-name">Vue</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">$emit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> lowerCaseEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>lowerCaseEvent <span class="token operator">!==</span> event <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>lowerCaseEvent<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">tip</span><span class="token punctuation">(</span>\n            <span class="token string">"Event \""</span> <span class="token operator">+</span> lowerCaseEvent <span class="token operator">+</span> <span class="token string">"\" is emitted in component "</span> <span class="token operator">+</span>\n            <span class="token punctuation">(</span><span class="token function">formatComponentName</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" but the handler is registered for \""</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">"\". "</span> <span class="token operator">+</span>\n            <span class="token string">"Note that HTML attributes are case-insensitive and you cannot use "</span> <span class="token operator">+</span>\n            <span class="token string">"v-on to listen to camelCase events when using in-DOM templates. "</span> <span class="token operator">+</span>\n            <span class="token string">"You should probably use \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">hyphenate</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\" instead of \""</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">"\"."</span>\n          <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">var</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">_events</span><span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token comment">// 找到已经监听事件的回调，执行</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cbs <span class="token operator">=</span> cbs<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">toArray</span><span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token operator">:</span> cbs<span class="token punctuation">;</span>\n        <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">"event handler for \""</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> cbs<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> args<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">return</span> vm\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>有了这些事件api，自定义事件的添加移除理解起来也简单很多。组件通过<code>this.$emit</code>在组件实例中派发了事件，而在这之前，组件已经将需要监听的事件以及回调添加到实例的<code>_events</code>属性中，触发事件时便可以直接执行监听事件的回调。</p>\n<p><strong>最后，我们换一个角度理解父子组件通信，组件自定义事件的触发和监听本质上都是在当前的组件实例中进行，之所以能产生父子组件通信的效果是因为事件监听的回调函数写在了父组件中。</strong></p>\n<h2 id="95-%E5%B0%8F%E7%BB%93">9.5 小结<a class="anchor" href="#95-%E5%B0%8F%E7%BB%93">§</a></h2>\n<p>事件是我们日常开发中必不可少的功能点，<code>Vue</code>在应用层暴露了<code>@,v-on</code>的指令供开发者在模板中绑定事件。事件指令在模板编译阶段会以属性的形式存在，而在真实节点渲染阶段会根据事件属性去绑定相关的事件。对于组件的事件而言，我们可以利用事件进行子父组件间的通信，他本质上是在同个子组件内部维护了一个事件总线，从分析结果可以看出，之所以有子父组件通信的效果，原因仅仅是因为回调函数写在了父组件中。</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#91-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91" }, "9.1. \u6A21\u677F\u7F16\u8BD1")),
            React.createElement("li", null,
                React.createElement("a", { href: "#92-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90" }, "9.2. \u4EE3\u7801\u751F\u6210")),
            React.createElement("li", null,
                React.createElement("a", { href: "#93-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A" }, "9.3. \u4E8B\u4EF6\u7ED1\u5B9A")),
            React.createElement("li", null,
                React.createElement("a", { href: "#94-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6" }, "9.4. \u81EA\u5B9A\u4E49\u4E8B\u4EF6"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#941-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91" }, "9.4.1 \u6A21\u677F\u7F16\u8BD1")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#942-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90" }, "9.4.2 \u4EE3\u7801\u751F\u6210")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#943-%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B" }, "9.4.3 \u5B50\u7EC4\u4EF6\u5B9E\u4F8B")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#944-%E4%BA%8B%E4%BB%B6api" }, "9.4.4 \u4E8B\u4EF6API")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#95-%E5%B0%8F%E7%BB%93" }, "9.5 \u5C0F\u7ED3")))),
    'author': "wyp",
    'contributors': [
        "wyp",
        "hyfun"
    ],
    'date': "2019-10-29T06:12:00.000Z",
    'updated': "2021-09-15T02:34:36.000Z",
    'excerpt': "9.1. 模板编译 Vue在挂载实例前，有相当多的工作是进行模板的编译，将template模板进行编译，解析成AST树，再转换成render函数，而有了render函数后才会进入实例挂载过程。对于事件而言，我们经常使用v-on或者@在模板上绑定事件...",
    'cover': "./img/9.1.png",
    'sidebar': [
        {
            "text": "Introduction",
            "link": "introduction/index.html",
            "pagePath": "introduction/README.md"
        },
        {
            "text": "1.丰富的选项合并策略",
            "link": "src/1.丰富的选项合并策略.html",
            "pagePath": "src/1.丰富的选项合并策略.md"
        },
        {
            "text": "2.基础的数据代理检测",
            "link": "src/2.基础的数据代理检测.html",
            "pagePath": "src/2.基础的数据代理检测.md"
        },
        {
            "text": "3.实例挂载流程和模板编译",
            "link": "src/3.实例挂载流程和模板编译.html",
            "pagePath": "src/3.实例挂载流程和模板编译.md"
        },
        {
            "text": "4.完整渲染流程",
            "link": "src/4.完整渲染流程.html",
            "pagePath": "src/4.完整渲染流程.md"
        },
        {
            "text": "5.组件基础剖析",
            "link": "src/5.组件基础剖析.html",
            "pagePath": "src/5.组件基础剖析.md"
        },
        {
            "text": "6.组件高级用法",
            "link": "src/6.组件高级用法.html",
            "pagePath": "src/6.组件高级用法.md"
        },
        {
            "text": "7.深入响应式系统构建-上",
            "link": "src/7.深入响应式系统构建-上.html",
            "pagePath": "src/7.深入响应式系统构建-上.md"
        },
        {
            "text": "7.深入响应式系统构建-中",
            "link": "src/7.深入响应式系统构建-中.html",
            "pagePath": "src/7.深入响应式系统构建-中.md"
        },
        {
            "text": "7.深入响应式系统构建-下",
            "link": "src/7.深入响应式系统构建-下.html",
            "pagePath": "src/7.深入响应式系统构建-下.md"
        },
        {
            "text": "8.来，跟我一起实现diff算法",
            "link": "src/8.来，跟我一起实现diff算法.html",
            "pagePath": "src/8.来，跟我一起实现diff算法.md"
        },
        {
            "text": "9.揭秘Vue的事件机制",
            "link": "src/9.揭秘Vue的事件机制.html",
            "pagePath": "src/9.揭秘Vue的事件机制.md"
        },
        {
            "text": "10.vue插槽，你想了解的都在这里",
            "link": "src/10.vue插槽，你想了解的都在这里.html",
            "pagePath": "src/10.vue插槽，你想了解的都在这里.md"
        },
        {
            "text": "11.你真的了解v-model的语法糖了吗",
            "link": "src/11.你真的了解v-model的语法糖了吗.html",
            "pagePath": "src/11.你真的了解v-model的语法糖了吗.md"
        },
        {
            "text": "12.动态组件的深入分析",
            "link": "src/12.动态组件的深入分析.html",
            "pagePath": "src/12.动态组件的深入分析.md"
        },
        {
            "text": "13.彻底搞懂Vue中keep-alive的魔法-上",
            "link": "src/13.彻底搞懂Vue中keep-alive的魔法-上.html",
            "pagePath": "src/13.彻底搞懂Vue中keep-alive的魔法-上.md"
        },
        {
            "text": "13.彻底搞懂Vue中keep-alive的魔法-下",
            "link": "src/13.彻底搞懂Vue中keep-alive的魔法-下.html",
            "pagePath": "src/13.彻底搞懂Vue中keep-alive的魔法-下.md"
        }
    ]
};
