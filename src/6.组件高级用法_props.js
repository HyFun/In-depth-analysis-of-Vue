import projectConfig from '/In-depth-analysis-of-Vue/pagic.config.js';
export default {
    'prev': {
        "text": "5.组件基础剖析",
        "link": "src/5.组件基础剖析.html"
    },
    'next': {
        "text": "7.深入响应式系统构建-上",
        "link": "src/7.深入响应式系统构建-上.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'pagic' },
    'pagePath': "src/6.组件高级用法.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "src/6.组件高级用法.html",
    'title': undefined,
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>我们知道，组件是<code>Vue</code>体系的核心，熟练使用组件是掌握<code>Vue</code>进行开发的基础。上一节中，我们深入了解了<code>Vue</code>组件注册到使用渲染的完整流程。这一节我们会在上一节的基础上介绍组件的两个高级用法：异步组件和函数式组件。</p>\n</blockquote>\n<h2 id="61-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">6.1 异步组件<a class="anchor" href="#61-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">§</a></h2>\n<h3 id="611-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">6.1.1 使用场景<a class="anchor" href="#611-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">§</a></h3>\n<p><code>Vue</code>作为单页面应用遇到最棘手的问题是首屏加载时间的问题，单页面应用会把页面脚本打包成一个文件，这个文件包含着所有业务和非业务的代码，而脚本文件过大也是造成首页渲染速度缓慢的原因。因此作为首屏性能优化的课题，最常用的处理方法是对文件的拆分和代码的分离。按需加载的概念也是在这个前提下引入的。我们往往会把一些非首屏的组件设计成异步组件，部分不影响初次视觉体验的组件也可以设计为异步组件。这个思想就是<strong>按需加载</strong>。通俗点理解，按需加载的思想让应用在需要使用某个组件时才去请求加载组件代码。我们借助<code>webpack</code>打包后的结果会更加直观。</p>\n<p><img src="./img/6.1.png" alt=""></p>\n<p><img src="./img/6.2.png" alt="">\n<code>webpack</code>遇到异步组件，会将其从主脚本中分离，减少脚本体积，加快首屏加载时间。当遇到场景需要使用该组件时，才会去加载组件脚本。</p>\n<h3 id="612-%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0">6.1.2 工厂函数<a class="anchor" href="#612-%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0">§</a></h3>\n<p><code>Vue</code>中允许用户通过工厂函数的形式定义组件，这个工厂函数会异步解析组件定义，组件需要渲染的时候才会触发该工厂函数，加载结果会进行缓存，以供下一次调用组件时使用。\n具体使用：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 全局注册：</span>\n<span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 局部注册：</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">\'&lt;div id="app">&lt;asyncComponent>&lt;/asyncComponent>&lt;/div>\'</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">asyncComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">// 另外写法</span>\n    <span class="token function-variable function">asyncComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword module">import</span><span class="token punctuation">(</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="613-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">6.1.3 流程分析<a class="anchor" href="#613-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">§</a></h3>\n<p>有了上一节组件注册的基础，我们来分析异步组件的实现逻辑。简单回忆一下上一节的流程，实例的挂载流程分为根据渲染函数创建<code>Vnode</code>和根据<code>Vnode</code>产生真实节点的过程。期间创建<code>Vnode</code>过程，如果遇到子的占位符节点会调用<code>creatComponent</code>,这里会为子组件做选项合并和钩子挂载的操作，并创建一个以<code>vue-component-</code>为标记的子<code>Vnode</code>,而异步组件的处理逻辑也是在这个阶段处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 创建子组件过程</span>\n  <span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span>\n    <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> <span class="token comment">// 子类构造器</span>\n    data<span class="token punctuation">,</span>\n    context<span class="token punctuation">,</span> <span class="token comment">// vm实例</span>\n    children<span class="token punctuation">,</span> <span class="token comment">// 子节点</span>\n    tag <span class="token comment">// 子组件占位符</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ···\n    <span class="token comment">// 针对局部注册组件创建子类构造器</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> baseCtor<span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 异步组件分支</span>\n    <span class="token keyword">var</span> asyncFactory<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">cid</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 异步工厂函数</span>\n      asyncFactory <span class="token operator">=</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">;</span>\n      <span class="token comment">// 创建异步组件函数</span>\n      <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> <span class="token function">resolveAsyncComponent</span><span class="token punctuation">(</span>asyncFactory<span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span> <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token function">createAsyncPlaceholder</span><span class="token punctuation">(</span>\n          asyncFactory<span class="token punctuation">,</span>\n          data<span class="token punctuation">,</span>\n          context<span class="token punctuation">,</span>\n          children<span class="token punctuation">,</span>\n          tag\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    ···\n    <span class="token comment">// 创建子组件vnode</span>\n    <span class="token keyword">var</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token string">"vue-component-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">cid</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      data<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token maybe-class-name">Ctor</span><span class="token operator">:</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> propsData<span class="token operator">:</span> propsData<span class="token punctuation">,</span> listeners<span class="token operator">:</span> listeners<span class="token punctuation">,</span> tag<span class="token operator">:</span> tag<span class="token punctuation">,</span> children<span class="token operator">:</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      asyncFactory\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword control-flow">return</span> vnode\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>**工厂函数的用法使得<code>Vue.component(name, options)</code>的第二个参数不是一个对象，因此不论是全局注册还是局部注册，都不会执行<code>Vue.extend</code>生成一个子组件的构造器，**所以<code>Ctor.cid</code>不会存在，代码会进入异步组件的分支。</p>\n<p>异步组件分支的核心是<code>resolveAsyncComponent</code>,它的处理逻辑分支众多，我们先关心工厂函数处理部分。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">resolveAsyncComponent</span> <span class="token punctuation">(</span>\n    <span class="token parameter">factory<span class="token punctuation">,</span>\n    baseCtor</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">owners</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n      <span class="token comment">// 异步请求成功处理</span>\n      <span class="token keyword">var</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token comment">// 异步请求失败处理</span>\n      <span class="token keyword">var</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n      <span class="token comment">// 创建子组件时会先执行工厂函数，并将resolve和reject传入</span>\n      <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// resolved 同步返回</span>\n      <span class="token keyword control-flow">return</span> factory<span class="token punctuation">.</span><span class="token property-access">loading</span>\n        <span class="token operator">?</span> factory<span class="token punctuation">.</span><span class="token property-access">loadingComp</span>\n        <span class="token operator">:</span> factory<span class="token punctuation">.</span><span class="token property-access">resolved</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>如果经常使用<code>promise</code>进行开发，我们很容易发现，这部分代码像极了<code>promsie</code>原理内部的实现，针对异步组件工厂函数的写法，大致可以总结出以下三个步骤：</p>\n<ol>\n<li>定义异步请求成功的函数处理，定义异步请求失败的函数处理；</li>\n<li>执行组件定义的工厂函数；</li>\n<li>同步返回请求成功的函数处理。</li>\n</ol>\n<p><code>resolve, reject</code>的实现，都是<code>once</code>方法执行的结果，所以我们先关注一下高级函数<code>once</code>的原理。<strong>为了防止当多个地方调用异步组件时，<code>resolve,reject</code>不会重复执行，<code>once</code>函数保证了函数在代码只执行一次。也就是说，<code>once</code>缓存了已经请求过的异步组件</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// once函数保证了这个调用函数只在系统中调用一次</span>\n<span class="token keyword">function</span> <span class="token function">once</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 利用闭包特性将called作为标志位</span>\n  <span class="token keyword">var</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 调用过则不再调用</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>成功<code>resolve</code>和失败<code>reject</code>的详细处理逻辑如下：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 成功处理</span>\n<span class="token keyword">var</span> resolve <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 转成组件构造器，并将其缓存到resolved属性中。</span>\n  factory<span class="token punctuation">.</span><span class="token property-access">resolved</span> <span class="token operator">=</span> <span class="token function">ensureCtor</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//强制更新渲染视图</span>\n    <span class="token function">forceRender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    owners<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 失败处理</span>\n<span class="token keyword">var</span> reject <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">warn</span><span class="token punctuation">(</span>\n    <span class="token string">"Failed to resolve async component: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span>reason <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"\nReason: "</span> <span class="token operator">+</span> reason<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">errorComp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    factory<span class="token punctuation">.</span><span class="token property-access">error</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token function">forceRender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>异步组件加载完毕，会调用<code>resolve</code>定义的方法，方法会通过<code>ensureCtor</code>将加载完成的组件转换为组件构造器，并存储在<code>resolved</code>属性中，其中 <code>ensureCtor</code>的定义为：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ensureCtor</span> <span class="token punctuation">(</span><span class="token parameter">comp<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>comp<span class="token punctuation">.</span><span class="token property-access">__esModule</span> <span class="token operator">||</span><span class="token punctuation">(</span>hasSymbol <span class="token operator">&amp;&amp;</span> comp<span class="token punctuation">[</span><span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token property-access">toStringTag</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Module\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      comp <span class="token operator">=</span> comp<span class="token punctuation">.</span><span class="token keyword module">default</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// comp结果为对象时，调用extend方法创建一个子类构造器</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>\n      <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>\n      <span class="token operator">:</span> comp\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>组件构造器创建完毕，会进行一次视图的重新渲染，<strong>由于<code>Vue</code>是数据驱动视图渲染的，而组件在加载到完毕的过程中，并没有数据发生变化，因此需要手动强制更新视图。</strong><code>forceRender</code>函数的内部会拿到每个调用异步组件的实例，执行原型上的<code>$forceUpdate</code>方法，这部分的知识等到响应式系统时介绍。</p>\n<p>异步组件加载失败后，会调用<code>reject</code>定义的方法，方法会提示并标记错误，最后同样会强制更新视图。</p>\n<p>回到异步组件创建的流程，执行异步过程会同步为加载中的异步组件创建一个注释节点<code>Vnode</code></p>\n<pre class="language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    ···\n    <span class="token comment">// 创建异步组件函数</span>\n    <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> <span class="token function">resolveAsyncComponent</span><span class="token punctuation">(</span>asyncFactory<span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span> <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 创建注释节点</span>\n      <span class="token keyword control-flow">return</span> <span class="token function">createAsyncPlaceholder</span><span class="token punctuation">(</span>asyncFactory<span class="token punctuation">,</span>data<span class="token punctuation">,</span>context<span class="token punctuation">,</span>children<span class="token punctuation">,</span>tag<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p><code>createAsyncPlaceholder</code>的定义也很简单,其中<code>createEmptyVNode</code>之前有介绍过，是创建一个注释节点<code>vnode</code>，而<code>asyncFactory,asyncMeta</code>都是用来标注该节点为异步组件的临时节点和相关属性。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 创建注释Vnode</span>\n<span class="token keyword">function</span> <span class="token function">createAsyncPlaceholder</span> <span class="token punctuation">(</span><span class="token parameter">factory<span class="token punctuation">,</span>data<span class="token punctuation">,</span>context<span class="token punctuation">,</span>children<span class="token punctuation">,</span>tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token function">createEmptyVNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  node<span class="token punctuation">.</span><span class="token property-access">asyncFactory</span> <span class="token operator">=</span> factory<span class="token punctuation">;</span>\n  node<span class="token punctuation">.</span><span class="token property-access">asyncMeta</span> <span class="token operator">=</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> data<span class="token punctuation">,</span> context<span class="token operator">:</span> context<span class="token punctuation">,</span> children<span class="token operator">:</span> children<span class="token punctuation">,</span> tag<span class="token operator">:</span> tag <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> node\n<span class="token punctuation">}</span>\n</code></pre>\n<p>执行<code>forceRender</code>触发组件的重新渲染过程时，又会再次调用<code>resolveAsyncComponent</code>,这时返回值<code>Ctor</code>不再为 <code>undefined</code>了，因此会正常走组件的<code>render,patch</code>过程。这时，旧的注释节点也会被取代。</p>\n<h3 id="614-promise%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">6.1.4 Promise异步组件<a class="anchor" href="#614-promise%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>异步组件的第二种写法是在工厂函数中返回一个<code>promise</code>对象，我们知道<code>import</code>是<code>es6</code>引入模块加载的用法，但是<code>import</code>是一个静态加载的方法，它会优先模块内的其他语句执行。因此引入了<code>import()</code>,<code>import()</code>是一个运行时加载模块的方法，可以用来类比<code>require()</code>方法，区别在于前者是一个异步方法，后者是同步的，且<code>import()</code>会返回一个<code>promise</code>对象。</p>\n<p>具体用法：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword module">import</span><span class="token punctuation">(</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>源码依然走着异步组件处理分支，并且大部分的处理过程还是工厂函数的逻辑处理，区别在于执行异步函数后会返回一个<code>promise</code>对象，成功加载则执行<code>resolve</code>,失败加载则执行<code>reject</code>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// res是返回的promise</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">resolved</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 核心处理</span>\n      res<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>其中<code>promise</code>对象的判断最简单的是判断是否有<code>then</code>和<code>catch</code>方法：</p>\n<pre class="language-js"><code class="language-js"> <span class="token comment">// 判断promise对象的方法</span>\n  <span class="token keyword">function</span> <span class="token function">isPromise</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span><span class="token property-access">then</span> <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span> <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<h3 id="615-%E9%AB%98%E7%BA%A7%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">6.1.5 高级异步组件<a class="anchor" href="#615-%E9%AB%98%E7%BA%A7%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>为了在操作上更加灵活，比如使用<code>loading</code>组件处理组件加载时间过长的等待问题，使用<code>error</code>组件处理加载组件失败的错误提示等，<code>Vue</code>在2.3.0+版本新增了返回对象形式的异步组件格式，对象中可以定义需要加载的组件<code>component</code>,加载中显示的组件<code>loading</code>,加载失败的组件<code>error</code>,以及各种延时超时设置，源码同样进入异步组件分支。</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span>\n  component<span class="token operator">:</span> <span class="token keyword module">import</span><span class="token punctuation">(</span><span class="token string">\'./MyComponent.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// 异步组件加载时使用的组件</span>\n  loading<span class="token operator">:</span> <span class="token maybe-class-name">LoadingComponent</span><span class="token punctuation">,</span>\n  <span class="token comment">// 加载失败时使用的组件</span>\n  error<span class="token operator">:</span> <span class="token maybe-class-name">ErrorComponent</span><span class="token punctuation">,</span>\n  <span class="token comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span>\n  delay<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  <span class="token comment">// 如果提供了超时时间且组件加载也超时了，</span>\n  <span class="token comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span>\n  timeout<span class="token operator">:</span> <span class="token number">3000</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>异步组件函数执行后返回一个对象，并且对象的<code>component</code>执行会返回一个<code>promise</code>对象，因此进入高级异步组件处理分支。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 返回对象，且res.component返回一个promise对象，进入分支</span>\n  <span class="token comment">// 高级异步组件处理分支</span>\n  <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">component</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 和promise异步组件处理方式相同</span>\n    res<span class="token punctuation">.</span><span class="token property-access">component</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ···\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>异步组件会等待响应成功失败的结果，与此同时，代码继续同步执行。高级选项设置中如果设置了<code>error</code>和<code>loading</code>组件，会同时创建两个子类的构造器,</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 异步错误时组件的处理，创建错误组件的子类构造器，并赋值给errorComp</span>\n  factory<span class="token punctuation">.</span><span class="token property-access">errorComp</span> <span class="token operator">=</span> <span class="token function">ensureCtor</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">loading</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 异步加载时组件的处理，创建错误组件的子类构造器，并赋值给errorComp</span>\n  factory<span class="token punctuation">.</span><span class="token property-access">loadingComp</span> <span class="token operator">=</span> <span class="token function">ensureCtor</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">loading</span><span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果存在<code>delay</code>属性,则通过<code>settimeout</code>设置<code>loading</code>组件显示的延迟时间。<code>factory.loading</code>属性用来标注是否是显示<code>loading</code>组件。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">delay</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  factory<span class="token punctuation">.</span><span class="token property-access">loading</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 超过时间会成功加载，则执行失败结果</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">resolved</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      factory<span class="token punctuation">.</span><span class="token property-access">loading</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token function">forceRender</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token property-access">delay</span> <span class="token operator">||</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果在<code>timeout</code>时间内，异步组件还未执行<code>resolve</code>的成功结果，即<code>resolve</code>没有赋值,则进行<code>reject</code>失败处理。</p>\n<p>接下来依然是渲染注释节点或者渲染<code>loading</code>组件，等待异步处理结果，根据处理结果重新渲染视图节点，相似过程不再阐述。</p>\n<h3 id="616-wepack%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E7%94%A8%E6%B3%95">6.1.6 wepack异步组件用法<a class="anchor" href="#616-wepack%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E7%94%A8%E6%B3%95">§</a></h3>\n<p><code>webpack</code>作为<code>Vue</code>应用构建工具的标配，我们需要知道<code>Vue</code>如何结合<code>webpack </code>进行异步组件的代码分离，并且需要关注分离后的文件名，这个名字在<code>webpack</code>中称为<code>chunkName</code>。<code>webpack</code>为异步组件的加载提供了两种写法。</p>\n<ul>\n<li><code>require.ensure</code>:它是<code>webpack</code>传统提供给异步组件的写法，在编译时，<code>webpack</code>会静态地解析代码中的 <code>require.ensure()</code>，同时将模块添加到一个分开的 <code>chunk</code> 中，其中函数的第三个参数为分离代码块的名字。修改后的代码写法如下：</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   require<span class="token punctuation">.</span><span class="token method function property-access">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'asyncComponent\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// asyncComponent为chunkname</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li><code>import(/* webpackChunkName: &quot;asyncComponent&quot; */, component)</code>: 有了<code>es6</code>,<code>import</code>的写法是现今官方最推荐的做法，其中通过注释<code>webpackChunkName</code>来指定分离后组件模块的命名。修改后的写法如下：</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword module">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "asyncComponent" */</span><span class="token punctuation">,</span> <span class="token string">\'./test.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>至此，我们已经掌握了所有异步组件的写法，并深入了解了其内部的实现细节。我相信全面的掌握异步组件对今后单页面性能优化方面会起到积极的指导作用。</p>\n<h2 id="62-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6">6.2 函数式组件<a class="anchor" href="#62-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6">§</a></h2>\n<p><code>Vue</code>提供了一种可以让组件变为无状态、无实例的函数化组件。从原理上说，一般子组件都会经过实例化的过程，而单纯的函数组件并没有这个过程，它可以简单理解为一个中间层，只处理数据，不创建实例，也是由于这个行为，它的渲染开销会低很多。实际的应用场景是，当我们需要在多个组件中选择一个来代为渲染，或者在将<code>children,props,data</code>等数据传递给子组件前进行数据处理时，我们都可以用函数式组件来完成，它本质上也是对组件的一个外部包装。</p>\n<h3 id="621-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">6.2.1 使用场景<a class="anchor" href="#621-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">§</a></h3>\n<ul>\n<li>定义两个组件对象，<code>test1，test2</code></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> test1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'msg\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'h1\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">msg</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> test2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'msg\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'h2\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">msg</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>定义一个函数式组件，它会根据计算结果选择其中一个组件进行选项</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'test3\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 函数式组件的标志 functional设置为true</span>\n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'msg\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> test1\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li>函数式组件的使用</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>test3 <span class="token operator">:</span>msg<span class="token operator">=</span><span class="token string">"msg"</span> id<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>test3<span class="token operator">></span>\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    msg<span class="token operator">:</span> <span class="token string">\'test\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li>最终渲染的结果为：</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>h2<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n</code></pre>\n<h3 id="622-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">6.2.2 源码分析<a class="anchor" href="#622-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">§</a></h3>\n<p>函数式组件会在组件的对象定义中，将<code>functional</code>属性设置为<code>true</code>，这个属性是区别普通组件和函数式组件的关键。同样的在遇到子组件占位符时，会进入<code>createComponent</code>进行子组件<code>Vnode</code>的创建。**由于<code>functional</code>属性的存在，代码会进入函数式组件的分支中，并返回<code>createFunctionalComponent</code>调用的结果。**注意，执行完<code>createFunctionalComponent</code>后，后续创建子<code>Vnode</code>的逻辑不会执行，这也是之后在创建真实节点过程中不会有子<code>Vnode</code>去实例化子组件的原因。(无实例)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  ···\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">functional</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">createFunctionalComponent</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>createFunctionalComponent</code>方法会对传入的数据进行检测和合并，实例化<code>FunctionalRenderContext</code>，最终调用函数式组件自定义的<code>render</code>方法执行渲染过程。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createFunctionalComponent</span><span class="token punctuation">(</span>\n  <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> <span class="token comment">// 函数式组件构造器</span>\n  propsData<span class="token punctuation">,</span> <span class="token comment">// 传入组件的props</span>\n  data<span class="token punctuation">,</span> <span class="token comment">// 占位符组件传入的attr属性</span>\n  context<span class="token punctuation">,</span> <span class="token comment">// vue实例</span>\n  children<span class="token comment">// 子节点</span>\n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 数据检测合并</span>\n  <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> propOptions <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>propOptions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> propOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propOptions<span class="token punctuation">,</span> propsData <span class="token operator">||</span> emptyObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 合并attrs</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">attrs</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">mergeProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token property-access">attrs</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token comment">// 合并props</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">mergeProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> renderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FunctionalRenderContext</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>props<span class="token punctuation">,</span>children<span class="token punctuation">,</span>contextVm<span class="token punctuation">,</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 调用函数式组件中自定的render函数</span>\n  <span class="token keyword">var</span> vnode <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> renderContext<span class="token punctuation">.</span><span class="token property-access">_c</span><span class="token punctuation">,</span> renderContext<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>而<code>FunctionalRenderContext</code>这个类最终的目的是定义一个和真实组件渲染不同的<code>render</code>方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">FunctionalRenderContext</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 省略其他逻辑</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">_c</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>contextVm<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> needNormalization<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>执行<code>render</code>函数的过程，又会递归调用<code>createElement</code>的方法，这时的组件已经是真实的组件，开始执行正常的组件挂载流程。</p>\n<p>问题：为什么函数式组件需要定义一个不同的<code>createElement</code>方法？- 函数式组件<code>createElement</code>和以往唯一的不同是，最后一个参数的不同，之前章节有说到，<code>createElement</code>会根据最后一个参数决定是否对子<code>Vnode</code>进行拍平，一般情况下，<code>children</code>编译生成结果都是<code>Vnode</code>类型，只有函数式组件比较特殊，它可以返回一个数组，这时候拍平就是有必要的。我们看下面的例子：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  \n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  \n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword control-flow">return</span> context<span class="token punctuation">.</span><span class="token method function property-access">slots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword module">default</span>  \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span><span class="token punctuation">)</span> \n\n<span class="token operator">&lt;</span>test<span class="token operator">></span> \n     <span class="token operator">&lt;</span>p<span class="token operator">></span>slot1<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> \n     <span class="token operator">&lt;</span>p<span class="token operator">></span>slot<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> \n<span class="token operator">&lt;</span><span class="token operator">/</span>test<span class="token operator">></span>\n</code></pre>\n<p>此时函数式组件<code>test</code>的<code>render</code>函数返回的是两个<code>slot</code>的<code>Vnode</code>，它是以数组的形式存在的,这就是需要拍平的场景。</p>\n<p>简单总结一下函数式组件，从源码中可以看出，函数式组件并不会像普通组件那样有实例化组件的过程，因此包括组件的生命周期，组件的数据管理这些过程都没有，它只会原封不动的接收传递给组件的数据做处理，并渲染需要的内容。因此作为纯粹的函数可以也大大降低渲染的开销。</p>\n<h2 id="63-%E5%B0%8F%E7%BB%93">6.3 小结<a class="anchor" href="#63-%E5%B0%8F%E7%BB%93">§</a></h2>\n<p>这一小节在组件基础之上介绍了两个进阶的用法，异步组件和函数式组件。它们都是为了解决某些类型场景引入的高级组件用法。其中异步组件是首屏性能优化的一个解决方案，并且<code>Vue</code>提供了多达三种的使用方法，高级配置的用法更让异步组件的使用更加灵活。当然大部分情况下，我们会结合<code>webpack</code>进行使用。另外，函数式组件在多组件中选择渲染内容的场景作用非凡，由于是一个无实例的组件，它在渲染开销上比普通组件的性能更好。</p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { href: "src/assets/favicon.ico", rel: "icon" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/In-depth-analysis-of-Vue/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': undefined,
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>我们知道，组件是<code>Vue</code>体系的核心，熟练使用组件是掌握<code>Vue</code>进行开发的基础。上一节中，我们深入了解了<code>Vue</code>组件注册到使用渲染的完整流程。这一节我们会在上一节的基础上介绍组件的两个高级用法：异步组件和函数式组件。</p>\n</blockquote>\n<h2 id="61-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">6.1 异步组件<a class="anchor" href="#61-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">§</a></h2>\n<h3 id="611-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">6.1.1 使用场景<a class="anchor" href="#611-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">§</a></h3>\n<p><code>Vue</code>作为单页面应用遇到最棘手的问题是首屏加载时间的问题，单页面应用会把页面脚本打包成一个文件，这个文件包含着所有业务和非业务的代码，而脚本文件过大也是造成首页渲染速度缓慢的原因。因此作为首屏性能优化的课题，最常用的处理方法是对文件的拆分和代码的分离。按需加载的概念也是在这个前提下引入的。我们往往会把一些非首屏的组件设计成异步组件，部分不影响初次视觉体验的组件也可以设计为异步组件。这个思想就是<strong>按需加载</strong>。通俗点理解，按需加载的思想让应用在需要使用某个组件时才去请求加载组件代码。我们借助<code>webpack</code>打包后的结果会更加直观。</p>\n<p><img src="./img/6.1.png" alt=""></p>\n<p><img src="./img/6.2.png" alt="">\n<code>webpack</code>遇到异步组件，会将其从主脚本中分离，减少脚本体积，加快首屏加载时间。当遇到场景需要使用该组件时，才会去加载组件脚本。</p>\n<h3 id="612-%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0">6.1.2 工厂函数<a class="anchor" href="#612-%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0">§</a></h3>\n<p><code>Vue</code>中允许用户通过工厂函数的形式定义组件，这个工厂函数会异步解析组件定义，组件需要渲染的时候才会触发该工厂函数，加载结果会进行缓存，以供下一次调用组件时使用。\n具体使用：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 全局注册：</span>\n<span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 局部注册：</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">\'&lt;div id="app">&lt;asyncComponent>&lt;/asyncComponent>&lt;/div>\'</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">asyncComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token comment">// 另外写法</span>\n    <span class="token function-variable function">asyncComponent</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword module">import</span><span class="token punctuation">(</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<h3 id="613-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">6.1.3 流程分析<a class="anchor" href="#613-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">§</a></h3>\n<p>有了上一节组件注册的基础，我们来分析异步组件的实现逻辑。简单回忆一下上一节的流程，实例的挂载流程分为根据渲染函数创建<code>Vnode</code>和根据<code>Vnode</code>产生真实节点的过程。期间创建<code>Vnode</code>过程，如果遇到子的占位符节点会调用<code>creatComponent</code>,这里会为子组件做选项合并和钩子挂载的操作，并创建一个以<code>vue-component-</code>为标记的子<code>Vnode</code>,而异步组件的处理逻辑也是在这个阶段处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 创建子组件过程</span>\n  <span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span>\n    <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> <span class="token comment">// 子类构造器</span>\n    data<span class="token punctuation">,</span>\n    context<span class="token punctuation">,</span> <span class="token comment">// vm实例</span>\n    children<span class="token punctuation">,</span> <span class="token comment">// 子节点</span>\n    tag <span class="token comment">// 子组件占位符</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ···\n    <span class="token comment">// 针对局部注册组件创建子类构造器</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> baseCtor<span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 异步组件分支</span>\n    <span class="token keyword">var</span> asyncFactory<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">cid</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 异步工厂函数</span>\n      asyncFactory <span class="token operator">=</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">;</span>\n      <span class="token comment">// 创建异步组件函数</span>\n      <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> <span class="token function">resolveAsyncComponent</span><span class="token punctuation">(</span>asyncFactory<span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span> <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token function">createAsyncPlaceholder</span><span class="token punctuation">(</span>\n          asyncFactory<span class="token punctuation">,</span>\n          data<span class="token punctuation">,</span>\n          context<span class="token punctuation">,</span>\n          children<span class="token punctuation">,</span>\n          tag\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    ···\n    <span class="token comment">// 创建子组件vnode</span>\n    <span class="token keyword">var</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token string">"vue-component-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">cid</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      data<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token maybe-class-name">Ctor</span><span class="token operator">:</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> propsData<span class="token operator">:</span> propsData<span class="token punctuation">,</span> listeners<span class="token operator">:</span> listeners<span class="token punctuation">,</span> tag<span class="token operator">:</span> tag<span class="token punctuation">,</span> children<span class="token operator">:</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      asyncFactory\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword control-flow">return</span> vnode\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>**工厂函数的用法使得<code>Vue.component(name, options)</code>的第二个参数不是一个对象，因此不论是全局注册还是局部注册，都不会执行<code>Vue.extend</code>生成一个子组件的构造器，**所以<code>Ctor.cid</code>不会存在，代码会进入异步组件的分支。</p>\n<p>异步组件分支的核心是<code>resolveAsyncComponent</code>,它的处理逻辑分支众多，我们先关心工厂函数处理部分。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">resolveAsyncComponent</span> <span class="token punctuation">(</span>\n    <span class="token parameter">factory<span class="token punctuation">,</span>\n    baseCtor</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">owners</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n      <span class="token comment">// 异步请求成功处理</span>\n      <span class="token keyword">var</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n      <span class="token comment">// 异步请求失败处理</span>\n      <span class="token keyword">var</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n      <span class="token comment">// 创建子组件时会先执行工厂函数，并将resolve和reject传入</span>\n      <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// resolved 同步返回</span>\n      <span class="token keyword control-flow">return</span> factory<span class="token punctuation">.</span><span class="token property-access">loading</span>\n        <span class="token operator">?</span> factory<span class="token punctuation">.</span><span class="token property-access">loadingComp</span>\n        <span class="token operator">:</span> factory<span class="token punctuation">.</span><span class="token property-access">resolved</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>如果经常使用<code>promise</code>进行开发，我们很容易发现，这部分代码像极了<code>promsie</code>原理内部的实现，针对异步组件工厂函数的写法，大致可以总结出以下三个步骤：</p>\n<ol>\n<li>定义异步请求成功的函数处理，定义异步请求失败的函数处理；</li>\n<li>执行组件定义的工厂函数；</li>\n<li>同步返回请求成功的函数处理。</li>\n</ol>\n<p><code>resolve, reject</code>的实现，都是<code>once</code>方法执行的结果，所以我们先关注一下高级函数<code>once</code>的原理。<strong>为了防止当多个地方调用异步组件时，<code>resolve,reject</code>不会重复执行，<code>once</code>函数保证了函数在代码只执行一次。也就是说，<code>once</code>缓存了已经请求过的异步组件</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// once函数保证了这个调用函数只在系统中调用一次</span>\n<span class="token keyword">function</span> <span class="token function">once</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 利用闭包特性将called作为标志位</span>\n  <span class="token keyword">var</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 调用过则不再调用</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>成功<code>resolve</code>和失败<code>reject</code>的详细处理逻辑如下：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 成功处理</span>\n<span class="token keyword">var</span> resolve <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 转成组件构造器，并将其缓存到resolved属性中。</span>\n  factory<span class="token punctuation">.</span><span class="token property-access">resolved</span> <span class="token operator">=</span> <span class="token function">ensureCtor</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//强制更新渲染视图</span>\n    <span class="token function">forceRender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    owners<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 失败处理</span>\n<span class="token keyword">var</span> reject <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">warn</span><span class="token punctuation">(</span>\n    <span class="token string">"Failed to resolve async component: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span>reason <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"\nReason: "</span> <span class="token operator">+</span> reason<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">errorComp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    factory<span class="token punctuation">.</span><span class="token property-access">error</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token function">forceRender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>异步组件加载完毕，会调用<code>resolve</code>定义的方法，方法会通过<code>ensureCtor</code>将加载完成的组件转换为组件构造器，并存储在<code>resolved</code>属性中，其中 <code>ensureCtor</code>的定义为：</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ensureCtor</span> <span class="token punctuation">(</span><span class="token parameter">comp<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>comp<span class="token punctuation">.</span><span class="token property-access">__esModule</span> <span class="token operator">||</span><span class="token punctuation">(</span>hasSymbol <span class="token operator">&amp;&amp;</span> comp<span class="token punctuation">[</span><span class="token known-class-name class-name">Symbol</span><span class="token punctuation">.</span><span class="token property-access">toStringTag</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'Module\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      comp <span class="token operator">=</span> comp<span class="token punctuation">.</span><span class="token keyword module">default</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// comp结果为对象时，调用extend方法创建一个子类构造器</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>\n      <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>\n      <span class="token operator">:</span> comp\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>组件构造器创建完毕，会进行一次视图的重新渲染，<strong>由于<code>Vue</code>是数据驱动视图渲染的，而组件在加载到完毕的过程中，并没有数据发生变化，因此需要手动强制更新视图。</strong><code>forceRender</code>函数的内部会拿到每个调用异步组件的实例，执行原型上的<code>$forceUpdate</code>方法，这部分的知识等到响应式系统时介绍。</p>\n<p>异步组件加载失败后，会调用<code>reject</code>定义的方法，方法会提示并标记错误，最后同样会强制更新视图。</p>\n<p>回到异步组件创建的流程，执行异步过程会同步为加载中的异步组件创建一个注释节点<code>Vnode</code></p>\n<pre class="language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    ···\n    <span class="token comment">// 创建异步组件函数</span>\n    <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> <span class="token function">resolveAsyncComponent</span><span class="token punctuation">(</span>asyncFactory<span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span> <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 创建注释节点</span>\n      <span class="token keyword control-flow">return</span> <span class="token function">createAsyncPlaceholder</span><span class="token punctuation">(</span>asyncFactory<span class="token punctuation">,</span>data<span class="token punctuation">,</span>context<span class="token punctuation">,</span>children<span class="token punctuation">,</span>tag<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p><code>createAsyncPlaceholder</code>的定义也很简单,其中<code>createEmptyVNode</code>之前有介绍过，是创建一个注释节点<code>vnode</code>，而<code>asyncFactory,asyncMeta</code>都是用来标注该节点为异步组件的临时节点和相关属性。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 创建注释Vnode</span>\n<span class="token keyword">function</span> <span class="token function">createAsyncPlaceholder</span> <span class="token punctuation">(</span><span class="token parameter">factory<span class="token punctuation">,</span>data<span class="token punctuation">,</span>context<span class="token punctuation">,</span>children<span class="token punctuation">,</span>tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token function">createEmptyVNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  node<span class="token punctuation">.</span><span class="token property-access">asyncFactory</span> <span class="token operator">=</span> factory<span class="token punctuation">;</span>\n  node<span class="token punctuation">.</span><span class="token property-access">asyncMeta</span> <span class="token operator">=</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> data<span class="token punctuation">,</span> context<span class="token operator">:</span> context<span class="token punctuation">,</span> children<span class="token operator">:</span> children<span class="token punctuation">,</span> tag<span class="token operator">:</span> tag <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> node\n<span class="token punctuation">}</span>\n</code></pre>\n<p>执行<code>forceRender</code>触发组件的重新渲染过程时，又会再次调用<code>resolveAsyncComponent</code>,这时返回值<code>Ctor</code>不再为 <code>undefined</code>了，因此会正常走组件的<code>render,patch</code>过程。这时，旧的注释节点也会被取代。</p>\n<h3 id="614-promise%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">6.1.4 Promise异步组件<a class="anchor" href="#614-promise%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>异步组件的第二种写法是在工厂函数中返回一个<code>promise</code>对象，我们知道<code>import</code>是<code>es6</code>引入模块加载的用法，但是<code>import</code>是一个静态加载的方法，它会优先模块内的其他语句执行。因此引入了<code>import()</code>,<code>import()</code>是一个运行时加载模块的方法，可以用来类比<code>require()</code>方法，区别在于前者是一个异步方法，后者是同步的，且<code>import()</code>会返回一个<code>promise</code>对象。</p>\n<p>具体用法：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword module">import</span><span class="token punctuation">(</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>源码依然走着异步组件处理分支，并且大部分的处理过程还是工厂函数的逻辑处理，区别在于执行异步函数后会返回一个<code>promise</code>对象，成功加载则执行<code>resolve</code>,失败加载则执行<code>reject</code>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// res是返回的promise</span>\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">resolved</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 核心处理</span>\n      res<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>其中<code>promise</code>对象的判断最简单的是判断是否有<code>then</code>和<code>catch</code>方法：</p>\n<pre class="language-js"><code class="language-js"> <span class="token comment">// 判断promise对象的方法</span>\n  <span class="token keyword">function</span> <span class="token function">isPromise</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span><span class="token property-access">then</span> <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span><span class="token keyword control-flow">catch</span> <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<h3 id="615-%E9%AB%98%E7%BA%A7%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">6.1.5 高级异步组件<a class="anchor" href="#615-%E9%AB%98%E7%BA%A7%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">§</a></h3>\n<p>为了在操作上更加灵活，比如使用<code>loading</code>组件处理组件加载时间过长的等待问题，使用<code>error</code>组件处理加载组件失败的错误提示等，<code>Vue</code>在2.3.0+版本新增了返回对象形式的异步组件格式，对象中可以定义需要加载的组件<code>component</code>,加载中显示的组件<code>loading</code>,加载失败的组件<code>error</code>,以及各种延时超时设置，源码同样进入异步组件分支。</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span>\n  component<span class="token operator">:</span> <span class="token keyword module">import</span><span class="token punctuation">(</span><span class="token string">\'./MyComponent.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// 异步组件加载时使用的组件</span>\n  loading<span class="token operator">:</span> <span class="token maybe-class-name">LoadingComponent</span><span class="token punctuation">,</span>\n  <span class="token comment">// 加载失败时使用的组件</span>\n  error<span class="token operator">:</span> <span class="token maybe-class-name">ErrorComponent</span><span class="token punctuation">,</span>\n  <span class="token comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span>\n  delay<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  <span class="token comment">// 如果提供了超时时间且组件加载也超时了，</span>\n  <span class="token comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span>\n  timeout<span class="token operator">:</span> <span class="token number">3000</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>异步组件函数执行后返回一个对象，并且对象的<code>component</code>执行会返回一个<code>promise</code>对象，因此进入高级异步组件处理分支。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 返回对象，且res.component返回一个promise对象，进入分支</span>\n  <span class="token comment">// 高级异步组件处理分支</span>\n  <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">component</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 和promise异步组件处理方式相同</span>\n    res<span class="token punctuation">.</span><span class="token property-access">component</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ···\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>异步组件会等待响应成功失败的结果，与此同时，代码继续同步执行。高级选项设置中如果设置了<code>error</code>和<code>loading</code>组件，会同时创建两个子类的构造器,</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 异步错误时组件的处理，创建错误组件的子类构造器，并赋值给errorComp</span>\n  factory<span class="token punctuation">.</span><span class="token property-access">errorComp</span> <span class="token operator">=</span> <span class="token function">ensureCtor</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">loading</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 异步加载时组件的处理，创建错误组件的子类构造器，并赋值给errorComp</span>\n  factory<span class="token punctuation">.</span><span class="token property-access">loadingComp</span> <span class="token operator">=</span> <span class="token function">ensureCtor</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">loading</span><span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果存在<code>delay</code>属性,则通过<code>settimeout</code>设置<code>loading</code>组件显示的延迟时间。<code>factory.loading</code>属性用来标注是否是显示<code>loading</code>组件。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">delay</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  factory<span class="token punctuation">.</span><span class="token property-access">loading</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 超过时间会成功加载，则执行失败结果</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">resolved</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      factory<span class="token punctuation">.</span><span class="token property-access">loading</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token function">forceRender</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token property-access">delay</span> <span class="token operator">||</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果在<code>timeout</code>时间内，异步组件还未执行<code>resolve</code>的成功结果，即<code>resolve</code>没有赋值,则进行<code>reject</code>失败处理。</p>\n<p>接下来依然是渲染注释节点或者渲染<code>loading</code>组件，等待异步处理结果，根据处理结果重新渲染视图节点，相似过程不再阐述。</p>\n<h3 id="616-wepack%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E7%94%A8%E6%B3%95">6.1.6 wepack异步组件用法<a class="anchor" href="#616-wepack%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E7%94%A8%E6%B3%95">§</a></h3>\n<p><code>webpack</code>作为<code>Vue</code>应用构建工具的标配，我们需要知道<code>Vue</code>如何结合<code>webpack </code>进行异步组件的代码分离，并且需要关注分离后的文件名，这个名字在<code>webpack</code>中称为<code>chunkName</code>。<code>webpack</code>为异步组件的加载提供了两种写法。</p>\n<ul>\n<li><code>require.ensure</code>:它是<code>webpack</code>传统提供给异步组件的写法，在编译时，<code>webpack</code>会静态地解析代码中的 <code>require.ensure()</code>，同时将模块添加到一个分开的 <code>chunk</code> 中，其中函数的第三个参数为分离代码块的名字。修改后的代码写法如下：</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   require<span class="token punctuation">.</span><span class="token method function property-access">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./test.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'asyncComponent\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// asyncComponent为chunkname</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li><code>import(/* webpackChunkName: &quot;asyncComponent&quot; */, component)</code>: 有了<code>es6</code>,<code>import</code>的写法是现今官方最推荐的做法，其中通过注释<code>webpackChunkName</code>来指定分离后组件模块的命名。修改后的写法如下：</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'asyncComponent\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword module">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "asyncComponent" */</span><span class="token punctuation">,</span> <span class="token string">\'./test.vue\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>至此，我们已经掌握了所有异步组件的写法，并深入了解了其内部的实现细节。我相信全面的掌握异步组件对今后单页面性能优化方面会起到积极的指导作用。</p>\n<h2 id="62-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6">6.2 函数式组件<a class="anchor" href="#62-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6">§</a></h2>\n<p><code>Vue</code>提供了一种可以让组件变为无状态、无实例的函数化组件。从原理上说，一般子组件都会经过实例化的过程，而单纯的函数组件并没有这个过程，它可以简单理解为一个中间层，只处理数据，不创建实例，也是由于这个行为，它的渲染开销会低很多。实际的应用场景是，当我们需要在多个组件中选择一个来代为渲染，或者在将<code>children,props,data</code>等数据传递给子组件前进行数据处理时，我们都可以用函数式组件来完成，它本质上也是对组件的一个外部包装。</p>\n<h3 id="621-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">6.2.1 使用场景<a class="anchor" href="#621-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">§</a></h3>\n<ul>\n<li>定义两个组件对象，<code>test1，test2</code></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> test1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'msg\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'h1\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">msg</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> test2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'msg\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'h2\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">msg</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>定义一个函数式组件，它会根据计算结果选择其中一个组件进行选项</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'test3\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 函数式组件的标志 functional设置为true</span>\n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'msg\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> test1\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li>函数式组件的使用</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>test3 <span class="token operator">:</span>msg<span class="token operator">=</span><span class="token string">"msg"</span> id<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>test3<span class="token operator">></span>\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    msg<span class="token operator">:</span> <span class="token string">\'test\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li>最终渲染的结果为：</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>h2<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n</code></pre>\n<h3 id="622-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">6.2.2 源码分析<a class="anchor" href="#622-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">§</a></h3>\n<p>函数式组件会在组件的对象定义中，将<code>functional</code>属性设置为<code>true</code>，这个属性是区别普通组件和函数式组件的关键。同样的在遇到子组件占位符时，会进入<code>createComponent</code>进行子组件<code>Vnode</code>的创建。**由于<code>functional</code>属性的存在，代码会进入函数式组件的分支中，并返回<code>createFunctionalComponent</code>调用的结果。**注意，执行完<code>createFunctionalComponent</code>后，后续创建子<code>Vnode</code>的逻辑不会执行，这也是之后在创建真实节点过程中不会有子<code>Vnode</code>去实例化子组件的原因。(无实例)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  ···\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">functional</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token function">createFunctionalComponent</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>createFunctionalComponent</code>方法会对传入的数据进行检测和合并，实例化<code>FunctionalRenderContext</code>，最终调用函数式组件自定义的<code>render</code>方法执行渲染过程。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createFunctionalComponent</span><span class="token punctuation">(</span>\n  <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> <span class="token comment">// 函数式组件构造器</span>\n  propsData<span class="token punctuation">,</span> <span class="token comment">// 传入组件的props</span>\n  data<span class="token punctuation">,</span> <span class="token comment">// 占位符组件传入的attr属性</span>\n  context<span class="token punctuation">,</span> <span class="token comment">// vue实例</span>\n  children<span class="token comment">// 子节点</span>\n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 数据检测合并</span>\n  <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> propOptions <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>propOptions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> propOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propOptions<span class="token punctuation">,</span> propsData <span class="token operator">||</span> emptyObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 合并attrs</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">attrs</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">mergeProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token property-access">attrs</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token comment">// 合并props</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">mergeProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> renderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FunctionalRenderContext</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>props<span class="token punctuation">,</span>children<span class="token punctuation">,</span>contextVm<span class="token punctuation">,</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 调用函数式组件中自定的render函数</span>\n  <span class="token keyword">var</span> vnode <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> renderContext<span class="token punctuation">.</span><span class="token property-access">_c</span><span class="token punctuation">,</span> renderContext<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>而<code>FunctionalRenderContext</code>这个类最终的目的是定义一个和真实组件渲染不同的<code>render</code>方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">FunctionalRenderContext</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 省略其他逻辑</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">_c</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>contextVm<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> needNormalization<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>执行<code>render</code>函数的过程，又会递归调用<code>createElement</code>的方法，这时的组件已经是真实的组件，开始执行正常的组件挂载流程。</p>\n<p>问题：为什么函数式组件需要定义一个不同的<code>createElement</code>方法？- 函数式组件<code>createElement</code>和以往唯一的不同是，最后一个参数的不同，之前章节有说到，<code>createElement</code>会根据最后一个参数决定是否对子<code>Vnode</code>进行拍平，一般情况下，<code>children</code>编译生成结果都是<code>Vnode</code>类型，只有函数式组件比较特殊，它可以返回一个数组，这时候拍平就是有必要的。我们看下面的例子：</p>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  \n  functional<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  \n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword control-flow">return</span> context<span class="token punctuation">.</span><span class="token method function property-access">slots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword module">default</span>  \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span><span class="token punctuation">)</span> \n\n<span class="token operator">&lt;</span>test<span class="token operator">></span> \n     <span class="token operator">&lt;</span>p<span class="token operator">></span>slot1<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> \n     <span class="token operator">&lt;</span>p<span class="token operator">></span>slot<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> \n<span class="token operator">&lt;</span><span class="token operator">/</span>test<span class="token operator">></span>\n</code></pre>\n<p>此时函数式组件<code>test</code>的<code>render</code>函数返回的是两个<code>slot</code>的<code>Vnode</code>，它是以数组的形式存在的,这就是需要拍平的场景。</p>\n<p>简单总结一下函数式组件，从源码中可以看出，函数式组件并不会像普通组件那样有实例化组件的过程，因此包括组件的生命周期，组件的数据管理这些过程都没有，它只会原封不动的接收传递给组件的数据做处理，并渲染需要的内容。因此作为纯粹的函数可以也大大降低渲染的开销。</p>\n<h2 id="63-%E5%B0%8F%E7%BB%93">6.3 小结<a class="anchor" href="#63-%E5%B0%8F%E7%BB%93">§</a></h2>\n<p>这一小节在组件基础之上介绍了两个进阶的用法，异步组件和函数式组件。它们都是为了解决某些类型场景引入的高级组件用法。其中异步组件是首屏性能优化的一个解决方案，并且<code>Vue</code>提供了多达三种的使用方法，高级配置的用法更让异步组件的使用更加灵活。当然大部分情况下，我们会结合<code>webpack</code>进行使用。另外，函数式组件在多组件中选择渲染内容的场景作用非凡，由于是一个无实例的组件，它在渲染开销上比普通组件的性能更好。</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#61-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6" }, "6.1 \u5F02\u6B65\u7EC4\u4EF6"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#611-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" }, "6.1.1 \u4F7F\u7528\u573A\u666F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#612-%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0" }, "6.1.2 \u5DE5\u5382\u51FD\u6570")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#613-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90" }, "6.1.3 \u6D41\u7A0B\u5206\u6790")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#614-promise%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6" }, "6.1.4 Promise\u5F02\u6B65\u7EC4\u4EF6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#615-%E9%AB%98%E7%BA%A7%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6" }, "6.1.5 \u9AD8\u7EA7\u5F02\u6B65\u7EC4\u4EF6")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#616-wepack%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E7%94%A8%E6%B3%95" }, "6.1.6 wepack\u5F02\u6B65\u7EC4\u4EF6\u7528\u6CD5")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#62-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6" }, "6.2 \u51FD\u6570\u5F0F\u7EC4\u4EF6"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#621-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" }, "6.2.1 \u4F7F\u7528\u573A\u666F")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#622-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90" }, "6.2.2 \u6E90\u7801\u5206\u6790")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#63-%E5%B0%8F%E7%BB%93" }, "6.3 \u5C0F\u7ED3")))),
    'author': "wyp",
    'contributors': [
        "wyp",
        "hyfun"
    ],
    'date': "2019-10-29T06:12:00.000Z",
    'updated': "2021-09-15T02:34:36.000Z",
    'excerpt': "6.1 异步组件 6.1.1 使用场景 Vue作为单页面应用遇到最棘手的问题是首屏加载时间的问题，单页面应用会把页面脚本打包成一个文件，这个文件包含着所有业务和非业务的代码，而脚本文件过大也是造成首页渲染速度缓慢的原因。因此作...",
    'cover': "./img/6.1.png",
    'sidebar': [
        {
            "text": "Introduction",
            "link": "introduction/index.html",
            "pagePath": "introduction/README.md"
        },
        {
            "text": "1.丰富的选项合并策略",
            "link": "src/1.丰富的选项合并策略.html",
            "pagePath": "src/1.丰富的选项合并策略.md"
        },
        {
            "text": "2.基础的数据代理检测",
            "link": "src/2.基础的数据代理检测.html",
            "pagePath": "src/2.基础的数据代理检测.md"
        },
        {
            "text": "3.实例挂载流程和模板编译",
            "link": "src/3.实例挂载流程和模板编译.html",
            "pagePath": "src/3.实例挂载流程和模板编译.md"
        },
        {
            "text": "4.完整渲染流程",
            "link": "src/4.完整渲染流程.html",
            "pagePath": "src/4.完整渲染流程.md"
        },
        {
            "text": "5.组件基础剖析",
            "link": "src/5.组件基础剖析.html",
            "pagePath": "src/5.组件基础剖析.md"
        },
        {
            "text": "6.组件高级用法",
            "link": "src/6.组件高级用法.html",
            "pagePath": "src/6.组件高级用法.md"
        },
        {
            "text": "7.深入响应式系统构建-上",
            "link": "src/7.深入响应式系统构建-上.html",
            "pagePath": "src/7.深入响应式系统构建-上.md"
        },
        {
            "text": "7.深入响应式系统构建-中",
            "link": "src/7.深入响应式系统构建-中.html",
            "pagePath": "src/7.深入响应式系统构建-中.md"
        },
        {
            "text": "7.深入响应式系统构建-下",
            "link": "src/7.深入响应式系统构建-下.html",
            "pagePath": "src/7.深入响应式系统构建-下.md"
        },
        {
            "text": "8.来，跟我一起实现diff算法",
            "link": "src/8.来，跟我一起实现diff算法.html",
            "pagePath": "src/8.来，跟我一起实现diff算法.md"
        },
        {
            "text": "9.揭秘Vue的事件机制",
            "link": "src/9.揭秘Vue的事件机制.html",
            "pagePath": "src/9.揭秘Vue的事件机制.md"
        },
        {
            "text": "10.vue插槽，你想了解的都在这里",
            "link": "src/10.vue插槽，你想了解的都在这里.html",
            "pagePath": "src/10.vue插槽，你想了解的都在这里.md"
        },
        {
            "text": "11.你真的了解v-model的语法糖了吗",
            "link": "src/11.你真的了解v-model的语法糖了吗.html",
            "pagePath": "src/11.你真的了解v-model的语法糖了吗.md"
        },
        {
            "text": "12.动态组件的深入分析",
            "link": "src/12.动态组件的深入分析.html",
            "pagePath": "src/12.动态组件的深入分析.md"
        },
        {
            "text": "13.彻底搞懂Vue中keep-alive的魔法-上",
            "link": "src/13.彻底搞懂Vue中keep-alive的魔法-上.html",
            "pagePath": "src/13.彻底搞懂Vue中keep-alive的魔法-上.md"
        },
        {
            "text": "13.彻底搞懂Vue中keep-alive的魔法-下",
            "link": "src/13.彻底搞懂Vue中keep-alive的魔法-下.html",
            "pagePath": "src/13.彻底搞懂Vue中keep-alive的魔法-下.md"
        }
    ]
};
