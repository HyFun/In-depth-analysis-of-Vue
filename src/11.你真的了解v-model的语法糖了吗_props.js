import projectConfig from '/In-depth-analysis-of-Vue/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'pagic' },
    'pagePath': "src/11.你真的了解v-model的语法糖了吗.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "src/11.你真的了解v-model的语法糖了吗.html",
    'title': undefined,
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>双向数据绑定这个概念或者大家并不陌生，视图影响数据，数据同样影响视图，两者间有双向依赖的关系。在响应式系统构建的上，中，下篇我已经对数据影响视图的原理详细阐述清楚了。而如何完成视图影响数据这一关联？这就是本节讨论的重点：指令<code>v-model</code>。</p>\n</blockquote>\n<p>由于<code>v-model</code>和前面介绍的插槽，事件一致，都属于vue提供的指令，所以我们对<code>v-model</code>的分析方式和以往大同小异。分析会围绕模板的编译，<code>render</code>函数的生成，到最后真实节点的挂载顺序执行。最终我们依然会得到一个结论，<strong>v-model无论什么使用场景，本质上都是一个语法糖</strong>。</p>\n<h2 id="111-%E8%A1%A8%E5%8D%95%E7%BB%91%E5%AE%9A">11.1 表单绑定<a class="anchor" href="#111-%E8%A1%A8%E5%8D%95%E7%BB%91%E5%AE%9A">§</a></h2>\n<h3 id="1111-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">11.1.1 基础使用<a class="anchor" href="#1111-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">§</a></h3>\n<p><code>v-model</code>和表单脱离不了关系，之所以视图能影响数据，本质上这个视图需要可交互的，因此表单是实现这一交互的前提。表单的使用以<code>&lt;input &gt; &lt;textarea&gt; &lt;select&gt;</code>为核心，更细的划分结合<code>v-model</code>的使用如下：</p>\n<pre class="language-html"><code class="language-html">// 普通输入框\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n// 多行文本框\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value2<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>\n\n// 单选框\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> one\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> two\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> \n\n// 原生单选框的写法 注：原生单选框的写法需要通过name绑定一组单选，两个radio的name属性相同，才能表现为互斥\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>one\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>two\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n\n// 多选框  (原始值： value4: [])\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jack\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lili<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>lili\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n// 下拉选项\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>apple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>banana<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>banana<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bear<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n\n</code></pre>\n<p>接下来的分析，我们以普通输入框为例</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value1"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n      value1<span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>进入正文前先回顾一下模板到真实节点的过程。</p>\n<ol>\n<li>模板解析成<code>AST</code>树;</li>\n<li><code>AST</code>树生成可执行的<code>render</code>函数;</li>\n<li><code>render</code>函数转换为<code>Vnode</code>对象;</li>\n<li>根据<code>Vnode</code>对象生成真实的<code>Dom</code>节点。</li>\n</ol>\n<p>接下来，我们先看看模板解析为<code>AST</code>树的过程。</p>\n<h3 id="1112-ast%E6%A0%91%E7%9A%84%E8%A7%A3%E6%9E%90">11.1.2 AST树的解析<a class="anchor" href="#1112-ast%E6%A0%91%E7%9A%84%E8%A7%A3%E6%9E%90">§</a></h3>\n<p>模板的编译阶段，会调用<code>var ast = parse(template.trim(), options)</code>生成<code>AST</code>树，<code>parse</code>函数的其他细节这里不展开分析，前面的文章或多或少都涉及过，我们还是把关注点放在模板属性上的解析，也就是<code>processAttrs</code>函数上。</p>\n<p>使用过<code>vue</code>写模板的都知道，<code>vue</code>模板属性由两部分组成，一部分是指令，另一部分是普通<code>html</code>标签属性。z这也是属性处理的两大分支。而在指令的细分领域，又将<code>v-on，v-bind</code>做特殊的处理，其他的普通分支会执行<code>addDirective</code>过程。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 处理模板属性</span>\n<span class="token keyword">function</span> <span class="token function">processAttrs</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> list <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsList</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> syncGen<span class="token punctuation">,</span> isDynamic<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    name <span class="token operator">=</span> rawName <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">;</span> <span class="token comment">// v-on:click</span>\n    value <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span> <span class="token comment">// doThis</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dirRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 1.针对指令的属性处理</span>\n      ···\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>bindRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-bind分支</span>\n        ···\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>onRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-on分支</span>\n        ···\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span> <span class="token comment">// 除了v-bind，v-on之外的普通指令</span>\n        ···\n        <span class="token comment">// 普通指令会在AST树上添加directives属性</span>\n        <span class="token function">addDirective</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> isDynamic<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">\'model\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">checkForAliasModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 2. 普通html标签属性</span>\n    <span class="token punctuation">}</span>\n\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在揭秘事件机制这一节，我们介绍了<code>AST</code>产生阶段对事件指令<code>v-on</code>的处理是为<code>AST</code>树添加<code>events</code>属性。类似的，普通指令会在<code>AST</code>树上添加<code>directives</code>属性，具体看<code>addDirective</code>函数。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 添加directives属性</span>\n<span class="token keyword">function</span> <span class="token function">addDirective</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>name<span class="token punctuation">,</span>rawName<span class="token punctuation">,</span>value<span class="token punctuation">,</span>arg<span class="token punctuation">,</span>isDynamicArg<span class="token punctuation">,</span>modifiers<span class="token punctuation">,</span>range</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">directives</span> <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">directives</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token function">rangeSetItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> name<span class="token punctuation">,</span>\n      rawName<span class="token operator">:</span> rawName<span class="token punctuation">,</span>\n      value<span class="token operator">:</span> value<span class="token punctuation">,</span>\n      arg<span class="token operator">:</span> arg<span class="token punctuation">,</span>\n      isDynamicArg<span class="token operator">:</span> isDynamicArg<span class="token punctuation">,</span>\n      modifiers<span class="token operator">:</span> modifiers\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> range<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    el<span class="token punctuation">.</span><span class="token property-access">plain</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>最终<code>AST</code>树多了一个属性对象，其中<code>modifiers</code>代表模板中添加的修饰符，如：<code>.lazy, .number, .trim</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// AST</span>\n<span class="token punctuation">{</span>\n  directives<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>\n      rawName<span class="token operator">:</span> <span class="token string">\'v-model\'</span><span class="token punctuation">,</span>\n      value<span class="token operator">:</span> <span class="token string">\'value\'</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">\'v-model\'</span><span class="token punctuation">,</span>\n      modifiers<span class="token operator">:</span> <span class="token keyword nil">undefined</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="1113-render%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90">11.1.3 render函数生成<a class="anchor" href="#1113-render%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90">§</a></h3>\n<p><code>render</code>函数生成阶段，也就是前面分析了数次的<code>generate</code>逻辑，其中<code>genData</code>会对模板的诸多属性进行处理,最终返回拼接好的字符串模板，而对指令的处理会进入<code>genDirectives</code>流程。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">\'{\'</span><span class="token punctuation">;</span>\n  <span class="token comment">// 指令的处理</span>\n  <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ··· <span class="token comment">// 其他属性，指令的处理</span>\n  <span class="token comment">// 针对组件的v-model处理，放到后面分析</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token string">"model:{value:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",callback:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">callback</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",expression:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">expression</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"},"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> data\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>genDirectives</code>逻辑并不复杂,他会拿到之前<code>AST</code>树中保留的<code>directives</code>对象，并遍历解析指令对象，最终以<code>\'directives:[\'</code>包裹的字符串返回。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// directives render字符串的生成</span>\n  <span class="token keyword">function</span> <span class="token function">genDirectives</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 拿到指令对象</span>\n    <span class="token keyword">var</span> dirs <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">directives</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token punctuation">}</span>\n    <span class="token comment">// 字符串拼接</span>\n    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token string">\'directives:[\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> hasRuntime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> needRuntime<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> dirs<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dir <span class="token operator">=</span> dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      needRuntime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token comment">// 对指令ast树的重新处理</span>\n      <span class="token keyword">var</span> gen <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token property-access">directives</span><span class="token punctuation">[</span>dir<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>gen<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// compile-time directive that manipulates AST.</span>\n        <span class="token comment">// returns true if it also needs a runtime counterpart.</span>\n        needRuntime <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">gen</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> state<span class="token punctuation">.</span><span class="token property-access">warn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>needRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        hasRuntime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        res <span class="token operator">+=</span> <span class="token string">"{name:\""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\",rawName:\""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">rawName</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">",value:("</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"),expression:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">arg</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">",arg:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">isDynamicArg</span> <span class="token operator">?</span> dir<span class="token punctuation">.</span><span class="token property-access">arg</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">arg</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">modifiers</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">",modifiers:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"},"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hasRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\']\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>这里有一句关键的代码<code>var gen = state.directives[dir.name]</code>,为了了解其来龙去脉，我们回到Vue源码中的编译流程，在以往的文章中，我们完整的介绍过<code>template</code>模板的编译流程,这一部分的设计是非常复杂且巧妙的，其中大量运用了偏函数的思想，即分离了不同平台不同的编译过程，也为同一个平台每次提供相同的配置选项进行了合并处理，并很好的将配置进行了缓存。其中针对浏览器端有三个重要的指令选项。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> directive$<span class="token number">1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  model<span class="token operator">:</span> model<span class="token punctuation">,</span>\n  text<span class="token operator">:</span> text<span class="token punctuation">,</span>\n  html<span class="token punctuation">,</span> html\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> baseOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 指令选项</span>\n  directives<span class="token operator">:</span> directives$<span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 编译时传入选项配置</span>\n<span class="token function">createCompiler</span><span class="token punctuation">(</span>baseOptions<span class="token punctuation">)</span>\n</code></pre>\n<p>而这个<code>state.directives[\'model\']</code>也就是对应的<code>model</code>函数，所以我们先把焦点聚焦在<code>model</code>函数的逻辑。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">model</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>dir<span class="token punctuation">,</span>_warn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    warn$<span class="token number">1</span> <span class="token operator">=</span> _warn<span class="token punctuation">;</span>\n    <span class="token comment">// 绑定的值</span>\n    <span class="token keyword">var</span> value <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> modifiers <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> tag <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">tag</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> type <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">;</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// 这里遇到type是file的html，如果还使用双向绑定会报出警告。</span>\n      <span class="token comment">// 因为File inputs是只读的</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'input\'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">\'file\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn$1</span><span class="token punctuation">(</span>\n          <span class="token string">"&lt;"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">tag</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" v-model=\""</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"\" type=\"file\">:\n"</span> <span class="token operator">+</span>\n          <span class="token string">"File inputs are read only. Use a v-on:change listener instead."</span><span class="token punctuation">,</span>\n          el<span class="token punctuation">.</span><span class="token property-access">rawAttrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-model\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//组件上v-model的处理</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// component v-model doesn\'t need extra runtime</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'select\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// select表单</span>\n      <span class="token function">genSelect</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'input\'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">\'checkbox\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// checkbox表单</span>\n      <span class="token function">genCheckboxModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'input\'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">\'radio\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// radio表单</span>\n      <span class="token function">genRadioModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'input\'</span> <span class="token operator">||</span> tag <span class="token operator">===</span> <span class="token string">\'textarea\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 普通input，如 text, textarea</span>\n      <span class="token function">genDefaultModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token method function property-access">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// component v-model doesn\'t need extra runtime</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果不是表单使用v-model，同样会报出警告，双向绑定只针对表单控件。</span>\n      <span class="token function">warn$1</span><span class="token punctuation">(</span>\n        <span class="token string">"&lt;"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">tag</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" v-model=\""</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"\">: "</span> <span class="token operator">+</span>\n        <span class="token string">"v-model is not supported on this element type. "</span> <span class="token operator">+</span>\n        <span class="token string">\'If you are working with contenteditable, it\'s recommended to \'</span> <span class="token operator">+</span>\n        <span class="token string">\'wrap a library dedicated for that purpose inside a custom component.\'</span><span class="token punctuation">,</span>\n        el<span class="token punctuation">.</span><span class="token property-access">rawAttrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-model\'</span><span class="token punctuation">]</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ensure runtime directive metadata</span>\n    <span class="token comment">// </span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>显然，<strong><code>model</code>会对表单控件的<code>AST</code>树做进一步的处理</strong>，在上面的基础用法中，我们知道<strong>表单有不同的类型，每种类型对应的事件处理响应机制也不同</strong>。因此我们需要针对不同的表单控件生成不同的<code>render</code>函数，因此需要产生不同的<code>AST</code>属性。<code>model</code>针对不同类型的表单控件有不同的处理分支。我们重点分析普通<code>input</code>标签的处理，<code>genDefaultModel</code>分支，其他类型的分支，可以仿照下面的分析过程。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genDefaultModel</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>value<span class="token punctuation">,</span>modifiers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> type <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// v-model和v-bind值相同值，有冲突会报错</span>\n    <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> value$<span class="token number">1</span> <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-bind:value\'</span><span class="token punctuation">]</span> <span class="token operator">||</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\':value\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> typeBinding <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-bind:type\'</span><span class="token punctuation">]</span> <span class="token operator">||</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\':type\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>value$<span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>typeBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> binding <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-bind:value\'</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">\'v-bind:value\'</span> <span class="token operator">:</span> <span class="token string">\':value\'</span><span class="token punctuation">;</span>\n        <span class="token function">warn$1</span><span class="token punctuation">(</span>\n          binding <span class="token operator">+</span> <span class="token string">"=\""</span> <span class="token operator">+</span> value$<span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"\" conflicts with v-model on the same element "</span> <span class="token operator">+</span>\n          <span class="token string">\'because the latter already expands to a value binding internally\'</span><span class="token punctuation">,</span>\n          el<span class="token punctuation">.</span><span class="token property-access">rawAttrsMap</span><span class="token punctuation">[</span>binding<span class="token punctuation">]</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// modifiers存贮的是v-model的修饰符。</span>\n    <span class="token keyword">var</span> ref <span class="token operator">=</span> modifiers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// lazy,trim,number是可供v-model使用的修饰符</span>\n    <span class="token keyword">var</span> lazy <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">lazy</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> number <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">number</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> trim <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">trim</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> needCompositionGuard <span class="token operator">=</span> <span class="token operator">!</span>lazy <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token string">\'range\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// lazy修饰符将触发同步的事件从input改为change</span>\n    <span class="token keyword">var</span> event <span class="token operator">=</span> lazy <span class="token operator">?</span> <span class="token string">\'change\'</span> <span class="token operator">:</span> type <span class="token operator">===</span> <span class="token string">\'range\'</span> <span class="token operator">?</span> <span class="token constant">RANGE_TOKEN</span> <span class="token operator">:</span> <span class="token string">\'input\'</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> valueExpression <span class="token operator">=</span> <span class="token string">\'$event.target.value\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// 过滤用户输入的首尾空白符</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      valueExpression <span class="token operator">=</span> <span class="token string">"$event.target.value.trim()"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 将用户输入转为数值类型</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      valueExpression <span class="token operator">=</span> <span class="token string">"_n("</span> <span class="token operator">+</span> valueExpression <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// genAssignmentCode函数是为了处理v-model的格式，允许使用以下的形式： v-model="a.b" v-model="a[b]"</span>\n    <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token function">genAssignmentCode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> valueExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>needCompositionGuard<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//  保证了不会在输入法组合文字过程中得到更新</span>\n      code <span class="token operator">=</span> <span class="token string">"if($event.target.composing)return;"</span> <span class="token operator">+</span> code<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//  添加value属性</span>\n    <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">\'value\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 绑定事件</span>\n    <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> event<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>trim <span class="token operator">||</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">\'blur\'</span><span class="token punctuation">,</span> <span class="token string">\'$forceUpdate()\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">genAssignmentCode</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>assignment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 处理v-model的格式，v-model="a.b" v-model="a[b]"</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseModel</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">key</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 普通情形</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> assignment<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 对象形式</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"$set("</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">exp</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">key</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> assignment <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>genDefaultModel</code>的逻辑有两部分，<strong>一部分是针对修饰符产生不同的事件处理字符串，二是为<code>v-model</code>产生的<code>AST</code>树添加属性和事件相关的属性</strong>。其中最重要的两行代码是</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">//  添加value属性</span>\n<span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">\'value\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 绑定事件属性</span>\n<span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> event<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>addHandler</code>在之前介绍事件时分析过，他会为<code>AST</code>树添加事件相关的属性,同样的<code>addProp</code>也会为<code>AST</code>树添加<code>props</code>属性。最终<code>AST</code>树新增了两个属性：</p>\n<p><img src="./img/11.1.png" alt=""></p>\n<p>回到<code>genData</code>,通过<code>genDirectives</code>处理后，原先的<code>AST</code>树新增了两个属性，因此在字符串生成阶段同样需要处理<code>props</code>和<code>events</code>的分支。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData$2</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">\'{\'</span><span class="token punctuation">;</span>\n  <span class="token comment">// 已经分析过的genDirectives</span>\n  <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 处理props</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token string">"domProps:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 处理事件</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>最终<code>render</code>函数的结果为：</p>\n<pre class="language-js"><code class="language-js"><span class="token string">"_c(\'input\',{directives:[{name:"</span>model<span class="token string">",rawName:"</span>v<span class="token operator">-</span>model<span class="token string">",value:(message),expression:"</span>message<span class="token string">"}],attrs:{"</span>type<span class="token string">":"</span>text<span class="token string">"},domProps:{"</span>value<span class="token string">":(message)},on:{"</span>input<span class="token string">":function($event){if($event.target.composing)return;message=$event.target.value}}})"</span>\n\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">></span>\n</code></pre>\n<p>如果觉得上面的流程分析啰嗦，可以直接看下面的结论，对比模板和生成的<code>render</code>函数,我们可以得到：</p>\n<ol>\n<li><code>input</code>标签所有属性，包括指令相关的内容都是以<code>data</code>属性的形式作为参数的整体传入<code>_c(即：createElement)</code>函数。</li>\n<li><code>input type</code>的类型，在<code>data</code>属性中，以<code>attrs</code>键值对存在。</li>\n<li><code>v-model</code>会有对应的<code>directives</code>属性描述指令的相关信息。</li>\n<li><strong>为什么说<code>v-model</code>是一个语法糖，从<code>render</code>函数的最终结果可以看出，它最终以两部分形式存在于<code>input</code>标签中，一个是将<code>value1</code>以<code>props</code>的形式存在(<code>domProps</code>)中，另一个是以事件的形式存储<code>input</code>事件，并保留在<code>on</code>属性中。</strong></li>\n<li>重要的一个关键，事件用<code>$event.target.composing</code>属性来保证不会在输入法组合文字过程中更新数据,这点我们后面会再次提到。</li>\n</ol>\n<h3 id="1114-patch%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9">11.1.4 patch真实节点<a class="anchor" href="#1114-patch%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9">§</a></h3>\n<p>在<code>patch</code>之前还有一个生成<code>vnode</code>的过程，这个过程没有什么特别之处，所有的包括指令，属性会以<code>data</code>属性的形式传递到构造函数<code>Vnode</code>中，最终的<code>Vnode</code>拥有<code>directives,domProps,on</code>属性：</p>\n<p><img src="./img/11.2.png" alt=""></p>\n<p>有了<code>Vnode</code>之后紧接着会执行<code>patchVnode</code>,<code>patchVnode</code>过程是一个真实节点创建的过程，其中的关键是<code>createElm</code>方法，这个方法我们在不同的场合也分析过，前面的源码得到指令相关的信息也会保留在<code>vnode</code>的<code>data</code>属性里，所以对属性的处理也会走<code>invokeCreateHooks</code>逻辑。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 针对指令的处理</span>\n   <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>invokeCreateHooks</code>会调用定义好的钩子函数，对<code>vnode</code>上定义的属性，指令，事件等进行真实DOM的处理，步骤包括以下(不包含全部)：</p>\n<ol>\n<li><code>updateDOMProps</code>会利用<code>vnode data</code>上的<code>domProps</code>更新<code>input</code>标签的<code>value</code>值;</li>\n<li><code>updateAttrs</code>会利用<code>vnode data</code>上的<code>attrs</code>属性更新节点的属性值;</li>\n<li><code>updateDomListeners</code>利用<code>vnode data</code>上的<code>on</code>属性添加事件监听。</li>\n</ol>\n<p><strong>因此<code>v-model</code>语法糖最终反应的结果，是通过监听表单控件自身的<code>input</code>事件(其他类型有不同的监听事件类型)，去影响自身的<code>value</code>值</strong>。如果没有<code>v-model</code>的语法糖，我们可以这样写：\n<code>&lt;input type=&quot;text&quot; :value=&quot;message&quot; @input=&quot;(e) =&gt; { this.message = e.target.value }&quot; &gt;</code></p>\n<h3 id="1115-%E8%AF%AD%E6%B3%95%E7%B3%96%E7%9A%84%E8%83%8C%E5%90%8E">11.1.5 语法糖的背后<a class="anchor" href="#1115-%E8%AF%AD%E6%B3%95%E7%B3%96%E7%9A%84%E8%83%8C%E5%90%8E">§</a></h3>\n<p><strong>然而<code>v-model</code>仅仅是起到合并语法，创建一个新的语法糖的意义吗？</strong>\n**显然答案是否定的，对于需要使用输入法 (如中文、日文、韩文等) 的语言，你会发现 <code>v-model</code> 不会在输入法组合文字过程中得到更新。**这就是<code>v-model</code>的一个重要的特点。它会在事件处理这一层添加新的事件监听<code>compositionstart,compositionend</code>，他们会分别在语言输入的开始和结束时监听到变化，只要借助<code>$event.target.composing</code>，就可以设计出只会在输入法组合文字的结束阶段才更新数据，这有利于提高用户的使用体验。这一部分我想借助脱离框架的表单来帮助理解。</p>\n<p>脱离框架的一个视图响应数据的实现（效果类似于v-model）：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// html</span>\n<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"inputValue"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"showValue"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n\n<span class="token comment">// js</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'inputValue\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> show <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'showValue\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    input<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n    show<span class="token punctuation">.</span><span class="token property-access">innerText</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token property-access">value</span>\n\n    <span class="token keyword">function</span> <span class="token function">onCompositionStart</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">composing</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">onCompositionEnd</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">composing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span>\n      <span class="token punctuation">}</span>\n      e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">composing</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      show<span class="token punctuation">.</span><span class="token property-access">innerText</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">value</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">onInputChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// e.target.composing表示是否还在输入中</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">composing</span><span class="token punctuation">)</span><span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n      show<span class="token punctuation">.</span><span class="token property-access">innerText</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">value</span>\n    <span class="token punctuation">}</span>\n    input<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">,</span> onInputChange<span class="token punctuation">)</span>\n    input<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'compositionstart\'</span><span class="token punctuation">,</span> onCompositionStart<span class="token punctuation">)</span><span class="token comment">// 组合输入开始</span>\n    input<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'compositionend\'</span><span class="token punctuation">,</span> onCompositionEnd<span class="token punctuation">)</span> <span class="token comment">// 组合输入结束</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="112-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8v-model">11.2 组件使用v-model<a class="anchor" href="#112-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8v-model">§</a></h2>\n<p>最后我们简单说说在父组件中使用<code>v-model</code>,可以先看结论，<strong>组件上使用<code>v-model</code>本质上是子父组件通信的语法糖</strong>。先看一个简单的使用例子。</p>\n<pre class="language-js"><code class="language-js"> <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div>&lt;input type="text" :value="value" @input="emitEvent">{{value}}&lt;/div>\'</span><span class="token punctuation">,</span>\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">emitEvent</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">$emit</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'value\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n       message<span class="token operator">:</span> <span class="token string">\'test\'</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   components<span class="token operator">:</span> <span class="token punctuation">{</span>\n     child\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   template<span class="token operator">:</span> <span class="token string">\'&lt;div id="app">&lt;child v-model="message">&lt;/child>&lt;/div>\'</span><span class="token punctuation">,</span>\n   el<span class="token operator">:</span> <span class="token string">\'#app\'</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>父组件上使用<code>v-model</code>, 子组件默认会利用名为 <code>value</code> 的 <code>prop</code> 和名为 <code>input</code> 的事件，当然像<code>select</code>表单会以其他默认事件的形式存在。分析源码的过程也大致类似，这里只列举几个特别的地方。</p>\n<p><code>AST</code>生成阶段和普通表单控件的区别在于，当遇到<code>child</code>时，由于不是普通的<code>html</code>标签，会执行<code>getComponentModel</code>的过程,而<code>getComponentModel</code>的结果是在<code>AST</code>树上添加<code>model</code>的属性。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token method function property-access">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">genComponentModel</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>value<span class="token punctuation">,</span>modifiers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> ref <span class="token operator">=</span> modifiers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> number <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">number</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> trim <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">trim</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> baseValueExpression <span class="token operator">=</span> <span class="token string">\'$$v\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> valueExpression <span class="token operator">=</span> baseValueExpression<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      valueExpression <span class="token operator">=</span>\n        <span class="token string">"(typeof "</span> <span class="token operator">+</span> baseValueExpression <span class="token operator">+</span> <span class="token string">" === \'string\'"</span> <span class="token operator">+</span>\n        <span class="token string">"? "</span> <span class="token operator">+</span> baseValueExpression <span class="token operator">+</span> <span class="token string">".trim()"</span> <span class="token operator">+</span>\n        <span class="token string">": "</span> <span class="token operator">+</span> baseValueExpression <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      valueExpression <span class="token operator">=</span> <span class="token string">"_n("</span> <span class="token operator">+</span> valueExpression <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> assignment <span class="token operator">=</span> <span class="token function">genAssignmentCode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> valueExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 在ast树上添加model属性，其中有value，expression，callback属性</span>\n    el<span class="token punctuation">.</span><span class="token property-access">model</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      value<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      expression<span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      callback<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"function ("</span> <span class="token operator">+</span> baseValueExpression <span class="token operator">+</span> <span class="token string">") {"</span> <span class="token operator">+</span> assignment <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>最终<code>AST</code>树的结果：</p>\n<pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n  model<span class="token operator">:</span> <span class="token punctuation">{</span>\n    callback<span class="token operator">:</span> <span class="token string">"function ($$v) {message=$$v}"</span>\n    expression<span class="token operator">:</span> <span class="token string">""</span>message<span class="token string">""</span>\n    value<span class="token operator">:</span> <span class="token string">"(message)"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>经过对<code>AST</code>树的处理后，回到<code>genData$2</code>的流程，由于有了<code>model</code>属性，父组件拼接的字符串会做进一步处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData$2</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">\'{\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ···\n  <span class="token comment">// v-model组件的render函数处理</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token string">"model:{value:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",callback:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">callback</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",expression:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">expression</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"},"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  ···\n  <span class="token keyword control-flow">return</span> data\n<span class="token punctuation">}</span>\n</code></pre>\n<p>因此，父组件最终的<code>render</code>函数表现为：</p>\n<pre class="language-js"><code class="language-js"><span class="token string">"_c(\'child\',{model:{value:(message),callback:function ($$v) {message=$$v},expression:"</span>message<span class="token string">"}})"</span>\n</code></pre>\n<p>子组件的创建阶段照例会执行<code>createComponent </code>，其中针对<code>model</code>的逻辑需要特别说明。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// transform component v-model data into props &amp; events</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理父组件的v-model指令对象</span>\n    <span class="token function">transformModel</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">transformModel</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// prop默认取的是value，除非配置上有model的选项</span>\n  <span class="token keyword">var</span> prop <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token property-access">model</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">prop</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'value\'</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// event默认取的是input，除非配置上有model的选项</span>\n  <span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token property-access">model</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">event</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'input\'</span>\n  <span class="token comment">// vnode上新增props的属性，值为value</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">attrs</span> <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">attrs</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// vnode上新增on属性，标记事件</span>\n  <span class="token keyword">var</span> on <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> existing <span class="token operator">=</span> on<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> callback <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">callback</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>\n      <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span>\n        <span class="token operator">?</span> existing<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span>\n        <span class="token operator">:</span> existing <span class="token operator">!==</span> callback\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      on<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    on<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>从<code>transformModel</code>的逻辑可以看出，子组件<code>vnode</code>会为<code>data.props</code> 添加 <code>data.model.value</code>，并且给<code>data.on</code> 添加<code>data.model.callback</code>。因此父组件<code>v-model</code>语法糖本质上可以修改为\n<code>\'&lt;child :value=&quot;message&quot; @input=&quot;function(e){message = e}&quot;&gt;&lt;/child&gt;\' </code></p>\n<p><strong>显然，这种写法就是事件通信的写法，这个过程又回到对事件指令的分析过程了。因此我们可以很明显的意识到，组件使用<code>v-model</code>本质上还是一个子父组件通信的语法糖。</strong></p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { href: "/src/assets/favicon.ico", rel: "icon" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/In-depth-analysis-of-Vue/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': undefined,
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>双向数据绑定这个概念或者大家并不陌生，视图影响数据，数据同样影响视图，两者间有双向依赖的关系。在响应式系统构建的上，中，下篇我已经对数据影响视图的原理详细阐述清楚了。而如何完成视图影响数据这一关联？这就是本节讨论的重点：指令<code>v-model</code>。</p>\n</blockquote>\n<p>由于<code>v-model</code>和前面介绍的插槽，事件一致，都属于vue提供的指令，所以我们对<code>v-model</code>的分析方式和以往大同小异。分析会围绕模板的编译，<code>render</code>函数的生成，到最后真实节点的挂载顺序执行。最终我们依然会得到一个结论，<strong>v-model无论什么使用场景，本质上都是一个语法糖</strong>。</p>\n<h2 id="111-%E8%A1%A8%E5%8D%95%E7%BB%91%E5%AE%9A">11.1 表单绑定<a class="anchor" href="#111-%E8%A1%A8%E5%8D%95%E7%BB%91%E5%AE%9A">§</a></h2>\n<h3 id="1111-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">11.1.1 基础使用<a class="anchor" href="#1111-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">§</a></h3>\n<p><code>v-model</code>和表单脱离不了关系，之所以视图能影响数据，本质上这个视图需要可交互的，因此表单是实现这一交互的前提。表单的使用以<code>&lt;input &gt; &lt;textarea&gt; &lt;select&gt;</code>为核心，更细的划分结合<code>v-model</code>的使用如下：</p>\n<pre class="language-html"><code class="language-html">// 普通输入框\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n// 多行文本框\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value2<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>\n\n// 单选框\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> one\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> two\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> \n\n// 原生单选框的写法 注：原生单选框的写法需要通过name绑定一组单选，两个radio的name属性相同，才能表现为互斥\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>one\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>two\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n\n// 多选框  (原始值： value4: [])\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jack\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lili<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>lili\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n// 下拉选项\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>apple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>banana<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>banana<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>bear<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>\n\n</code></pre>\n<p>接下来的分析，我们以普通输入框为例</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value1"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n      value1<span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>进入正文前先回顾一下模板到真实节点的过程。</p>\n<ol>\n<li>模板解析成<code>AST</code>树;</li>\n<li><code>AST</code>树生成可执行的<code>render</code>函数;</li>\n<li><code>render</code>函数转换为<code>Vnode</code>对象;</li>\n<li>根据<code>Vnode</code>对象生成真实的<code>Dom</code>节点。</li>\n</ol>\n<p>接下来，我们先看看模板解析为<code>AST</code>树的过程。</p>\n<h3 id="1112-ast%E6%A0%91%E7%9A%84%E8%A7%A3%E6%9E%90">11.1.2 AST树的解析<a class="anchor" href="#1112-ast%E6%A0%91%E7%9A%84%E8%A7%A3%E6%9E%90">§</a></h3>\n<p>模板的编译阶段，会调用<code>var ast = parse(template.trim(), options)</code>生成<code>AST</code>树，<code>parse</code>函数的其他细节这里不展开分析，前面的文章或多或少都涉及过，我们还是把关注点放在模板属性上的解析，也就是<code>processAttrs</code>函数上。</p>\n<p>使用过<code>vue</code>写模板的都知道，<code>vue</code>模板属性由两部分组成，一部分是指令，另一部分是普通<code>html</code>标签属性。z这也是属性处理的两大分支。而在指令的细分领域，又将<code>v-on，v-bind</code>做特殊的处理，其他的普通分支会执行<code>addDirective</code>过程。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 处理模板属性</span>\n<span class="token keyword">function</span> <span class="token function">processAttrs</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> list <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsList</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> syncGen<span class="token punctuation">,</span> isDynamic<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    name <span class="token operator">=</span> rawName <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">;</span> <span class="token comment">// v-on:click</span>\n    value <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span> <span class="token comment">// doThis</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>dirRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 1.针对指令的属性处理</span>\n      ···\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>bindRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-bind分支</span>\n        ···\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>onRE<span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// v-on分支</span>\n        ···\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span> <span class="token comment">// 除了v-bind，v-on之外的普通指令</span>\n        ···\n        <span class="token comment">// 普通指令会在AST树上添加directives属性</span>\n        <span class="token function">addDirective</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> isDynamic<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">\'model\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">checkForAliasModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 2. 普通html标签属性</span>\n    <span class="token punctuation">}</span>\n\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在揭秘事件机制这一节，我们介绍了<code>AST</code>产生阶段对事件指令<code>v-on</code>的处理是为<code>AST</code>树添加<code>events</code>属性。类似的，普通指令会在<code>AST</code>树上添加<code>directives</code>属性，具体看<code>addDirective</code>函数。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 添加directives属性</span>\n<span class="token keyword">function</span> <span class="token function">addDirective</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>name<span class="token punctuation">,</span>rawName<span class="token punctuation">,</span>value<span class="token punctuation">,</span>arg<span class="token punctuation">,</span>isDynamicArg<span class="token punctuation">,</span>modifiers<span class="token punctuation">,</span>range</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">directives</span> <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">directives</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token function">rangeSetItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      name<span class="token operator">:</span> name<span class="token punctuation">,</span>\n      rawName<span class="token operator">:</span> rawName<span class="token punctuation">,</span>\n      value<span class="token operator">:</span> value<span class="token punctuation">,</span>\n      arg<span class="token operator">:</span> arg<span class="token punctuation">,</span>\n      isDynamicArg<span class="token operator">:</span> isDynamicArg<span class="token punctuation">,</span>\n      modifiers<span class="token operator">:</span> modifiers\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> range<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    el<span class="token punctuation">.</span><span class="token property-access">plain</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>最终<code>AST</code>树多了一个属性对象，其中<code>modifiers</code>代表模板中添加的修饰符，如：<code>.lazy, .number, .trim</code>。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// AST</span>\n<span class="token punctuation">{</span>\n  directives<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>\n      rawName<span class="token operator">:</span> <span class="token string">\'v-model\'</span><span class="token punctuation">,</span>\n      value<span class="token operator">:</span> <span class="token string">\'value\'</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">\'v-model\'</span><span class="token punctuation">,</span>\n      modifiers<span class="token operator">:</span> <span class="token keyword nil">undefined</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="1113-render%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90">11.1.3 render函数生成<a class="anchor" href="#1113-render%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90">§</a></h3>\n<p><code>render</code>函数生成阶段，也就是前面分析了数次的<code>generate</code>逻辑，其中<code>genData</code>会对模板的诸多属性进行处理,最终返回拼接好的字符串模板，而对指令的处理会进入<code>genDirectives</code>流程。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">\'{\'</span><span class="token punctuation">;</span>\n  <span class="token comment">// 指令的处理</span>\n  <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ··· <span class="token comment">// 其他属性，指令的处理</span>\n  <span class="token comment">// 针对组件的v-model处理，放到后面分析</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token string">"model:{value:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",callback:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">callback</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",expression:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">expression</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"},"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> data\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>genDirectives</code>逻辑并不复杂,他会拿到之前<code>AST</code>树中保留的<code>directives</code>对象，并遍历解析指令对象，最终以<code>\'directives:[\'</code>包裹的字符串返回。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// directives render字符串的生成</span>\n  <span class="token keyword">function</span> <span class="token function">genDirectives</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 拿到指令对象</span>\n    <span class="token keyword">var</span> dirs <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">directives</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token punctuation">}</span>\n    <span class="token comment">// 字符串拼接</span>\n    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token string">\'directives:[\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> hasRuntime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> needRuntime<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> dirs<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      dir <span class="token operator">=</span> dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      needRuntime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token comment">// 对指令ast树的重新处理</span>\n      <span class="token keyword">var</span> gen <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token property-access">directives</span><span class="token punctuation">[</span>dir<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>gen<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// compile-time directive that manipulates AST.</span>\n        <span class="token comment">// returns true if it also needs a runtime counterpart.</span>\n        needRuntime <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">gen</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> state<span class="token punctuation">.</span><span class="token property-access">warn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>needRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        hasRuntime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        res <span class="token operator">+=</span> <span class="token string">"{name:\""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\",rawName:\""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">rawName</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">",value:("</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"),expression:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">arg</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">",arg:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">isDynamicArg</span> <span class="token operator">?</span> dir<span class="token punctuation">.</span><span class="token property-access">arg</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"\""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">arg</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">modifiers</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">",modifiers:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"},"</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>hasRuntime<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\']\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>这里有一句关键的代码<code>var gen = state.directives[dir.name]</code>,为了了解其来龙去脉，我们回到Vue源码中的编译流程，在以往的文章中，我们完整的介绍过<code>template</code>模板的编译流程,这一部分的设计是非常复杂且巧妙的，其中大量运用了偏函数的思想，即分离了不同平台不同的编译过程，也为同一个平台每次提供相同的配置选项进行了合并处理，并很好的将配置进行了缓存。其中针对浏览器端有三个重要的指令选项。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> directive$<span class="token number">1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  model<span class="token operator">:</span> model<span class="token punctuation">,</span>\n  text<span class="token operator">:</span> text<span class="token punctuation">,</span>\n  html<span class="token punctuation">,</span> html\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> baseOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 指令选项</span>\n  directives<span class="token operator">:</span> directives$<span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 编译时传入选项配置</span>\n<span class="token function">createCompiler</span><span class="token punctuation">(</span>baseOptions<span class="token punctuation">)</span>\n</code></pre>\n<p>而这个<code>state.directives[\'model\']</code>也就是对应的<code>model</code>函数，所以我们先把焦点聚焦在<code>model</code>函数的逻辑。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">model</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>dir<span class="token punctuation">,</span>_warn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    warn$<span class="token number">1</span> <span class="token operator">=</span> _warn<span class="token punctuation">;</span>\n    <span class="token comment">// 绑定的值</span>\n    <span class="token keyword">var</span> value <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> modifiers <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token property-access">modifiers</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> tag <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">tag</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> type <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">;</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// 这里遇到type是file的html，如果还使用双向绑定会报出警告。</span>\n      <span class="token comment">// 因为File inputs是只读的</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'input\'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">\'file\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn$1</span><span class="token punctuation">(</span>\n          <span class="token string">"&lt;"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">tag</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" v-model=\""</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"\" type=\"file\">:\n"</span> <span class="token operator">+</span>\n          <span class="token string">"File inputs are read only. Use a v-on:change listener instead."</span><span class="token punctuation">,</span>\n          el<span class="token punctuation">.</span><span class="token property-access">rawAttrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-model\'</span><span class="token punctuation">]</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//组件上v-model的处理</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// component v-model doesn\'t need extra runtime</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'select\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// select表单</span>\n      <span class="token function">genSelect</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'input\'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">\'checkbox\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// checkbox表单</span>\n      <span class="token function">genCheckboxModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'input\'</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">===</span> <span class="token string">\'radio\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// radio表单</span>\n      <span class="token function">genRadioModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> <span class="token string">\'input\'</span> <span class="token operator">||</span> tag <span class="token operator">===</span> <span class="token string">\'textarea\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 普通input，如 text, textarea</span>\n      <span class="token function">genDefaultModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token method function property-access">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// component v-model doesn\'t need extra runtime</span>\n      <span class="token keyword control-flow">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果不是表单使用v-model，同样会报出警告，双向绑定只针对表单控件。</span>\n      <span class="token function">warn$1</span><span class="token punctuation">(</span>\n        <span class="token string">"&lt;"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">tag</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" v-model=\""</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"\">: "</span> <span class="token operator">+</span>\n        <span class="token string">"v-model is not supported on this element type. "</span> <span class="token operator">+</span>\n        <span class="token string">\'If you are working with contenteditable, it\'s recommended to \'</span> <span class="token operator">+</span>\n        <span class="token string">\'wrap a library dedicated for that purpose inside a custom component.\'</span><span class="token punctuation">,</span>\n        el<span class="token punctuation">.</span><span class="token property-access">rawAttrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-model\'</span><span class="token punctuation">]</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ensure runtime directive metadata</span>\n    <span class="token comment">// </span>\n    <span class="token keyword control-flow">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>显然，<strong><code>model</code>会对表单控件的<code>AST</code>树做进一步的处理</strong>，在上面的基础用法中，我们知道<strong>表单有不同的类型，每种类型对应的事件处理响应机制也不同</strong>。因此我们需要针对不同的表单控件生成不同的<code>render</code>函数，因此需要产生不同的<code>AST</code>属性。<code>model</code>针对不同类型的表单控件有不同的处理分支。我们重点分析普通<code>input</code>标签的处理，<code>genDefaultModel</code>分支，其他类型的分支，可以仿照下面的分析过程。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genDefaultModel</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>value<span class="token punctuation">,</span>modifiers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> type <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// v-model和v-bind值相同值，有冲突会报错</span>\n    <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> value$<span class="token number">1</span> <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-bind:value\'</span><span class="token punctuation">]</span> <span class="token operator">||</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\':value\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> typeBinding <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-bind:type\'</span><span class="token punctuation">]</span> <span class="token operator">||</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\':type\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>value$<span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>typeBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> binding <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token property-access">attrsMap</span><span class="token punctuation">[</span><span class="token string">\'v-bind:value\'</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">\'v-bind:value\'</span> <span class="token operator">:</span> <span class="token string">\':value\'</span><span class="token punctuation">;</span>\n        <span class="token function">warn$1</span><span class="token punctuation">(</span>\n          binding <span class="token operator">+</span> <span class="token string">"=\""</span> <span class="token operator">+</span> value$<span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"\" conflicts with v-model on the same element "</span> <span class="token operator">+</span>\n          <span class="token string">\'because the latter already expands to a value binding internally\'</span><span class="token punctuation">,</span>\n          el<span class="token punctuation">.</span><span class="token property-access">rawAttrsMap</span><span class="token punctuation">[</span>binding<span class="token punctuation">]</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// modifiers存贮的是v-model的修饰符。</span>\n    <span class="token keyword">var</span> ref <span class="token operator">=</span> modifiers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// lazy,trim,number是可供v-model使用的修饰符</span>\n    <span class="token keyword">var</span> lazy <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">lazy</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> number <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">number</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> trim <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">trim</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> needCompositionGuard <span class="token operator">=</span> <span class="token operator">!</span>lazy <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token string">\'range\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// lazy修饰符将触发同步的事件从input改为change</span>\n    <span class="token keyword">var</span> event <span class="token operator">=</span> lazy <span class="token operator">?</span> <span class="token string">\'change\'</span> <span class="token operator">:</span> type <span class="token operator">===</span> <span class="token string">\'range\'</span> <span class="token operator">?</span> <span class="token constant">RANGE_TOKEN</span> <span class="token operator">:</span> <span class="token string">\'input\'</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> valueExpression <span class="token operator">=</span> <span class="token string">\'$event.target.value\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// 过滤用户输入的首尾空白符</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      valueExpression <span class="token operator">=</span> <span class="token string">"$event.target.value.trim()"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 将用户输入转为数值类型</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      valueExpression <span class="token operator">=</span> <span class="token string">"_n("</span> <span class="token operator">+</span> valueExpression <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// genAssignmentCode函数是为了处理v-model的格式，允许使用以下的形式： v-model="a.b" v-model="a[b]"</span>\n    <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token function">genAssignmentCode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> valueExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>needCompositionGuard<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//  保证了不会在输入法组合文字过程中得到更新</span>\n      code <span class="token operator">=</span> <span class="token string">"if($event.target.composing)return;"</span> <span class="token operator">+</span> code<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//  添加value属性</span>\n    <span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">\'value\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 绑定事件</span>\n    <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> event<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>trim <span class="token operator">||</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">\'blur\'</span><span class="token punctuation">,</span> <span class="token string">\'$forceUpdate()\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">genAssignmentCode</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>assignment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 处理v-model的格式，v-model="a.b" v-model="a[b]"</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">parseModel</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">key</span> <span class="token operator">===</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 普通情形</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> assignment<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 对象形式</span>\n    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token string">"$set("</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">exp</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">key</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> assignment <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>genDefaultModel</code>的逻辑有两部分，<strong>一部分是针对修饰符产生不同的事件处理字符串，二是为<code>v-model</code>产生的<code>AST</code>树添加属性和事件相关的属性</strong>。其中最重要的两行代码是</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">//  添加value属性</span>\n<span class="token function">addProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">\'value\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 绑定事件属性</span>\n<span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> event<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>addHandler</code>在之前介绍事件时分析过，他会为<code>AST</code>树添加事件相关的属性,同样的<code>addProp</code>也会为<code>AST</code>树添加<code>props</code>属性。最终<code>AST</code>树新增了两个属性：</p>\n<p><img src="./img/11.1.png" alt=""></p>\n<p>回到<code>genData</code>,通过<code>genDirectives</code>处理后，原先的<code>AST</code>树新增了两个属性，因此在字符串生成阶段同样需要处理<code>props</code>和<code>events</code>的分支。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData$2</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">\'{\'</span><span class="token punctuation">;</span>\n  <span class="token comment">// 已经分析过的genDirectives</span>\n  <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 处理props</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token string">"domProps:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">props</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 处理事件</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>最终<code>render</code>函数的结果为：</p>\n<pre class="language-js"><code class="language-js"><span class="token string">"_c(\'input\',{directives:[{name:"</span>model<span class="token string">",rawName:"</span>v<span class="token operator">-</span>model<span class="token string">",value:(message),expression:"</span>message<span class="token string">"}],attrs:{"</span>type<span class="token string">":"</span>text<span class="token string">"},domProps:{"</span>value<span class="token string">":(message)},on:{"</span>input<span class="token string">":function($event){if($event.target.composing)return;message=$event.target.value}}})"</span>\n\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">></span>\n</code></pre>\n<p>如果觉得上面的流程分析啰嗦，可以直接看下面的结论，对比模板和生成的<code>render</code>函数,我们可以得到：</p>\n<ol>\n<li><code>input</code>标签所有属性，包括指令相关的内容都是以<code>data</code>属性的形式作为参数的整体传入<code>_c(即：createElement)</code>函数。</li>\n<li><code>input type</code>的类型，在<code>data</code>属性中，以<code>attrs</code>键值对存在。</li>\n<li><code>v-model</code>会有对应的<code>directives</code>属性描述指令的相关信息。</li>\n<li><strong>为什么说<code>v-model</code>是一个语法糖，从<code>render</code>函数的最终结果可以看出，它最终以两部分形式存在于<code>input</code>标签中，一个是将<code>value1</code>以<code>props</code>的形式存在(<code>domProps</code>)中，另一个是以事件的形式存储<code>input</code>事件，并保留在<code>on</code>属性中。</strong></li>\n<li>重要的一个关键，事件用<code>$event.target.composing</code>属性来保证不会在输入法组合文字过程中更新数据,这点我们后面会再次提到。</li>\n</ol>\n<h3 id="1114-patch%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9">11.1.4 patch真实节点<a class="anchor" href="#1114-patch%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9">§</a></h3>\n<p>在<code>patch</code>之前还有一个生成<code>vnode</code>的过程，这个过程没有什么特别之处，所有的包括指令，属性会以<code>data</code>属性的形式传递到构造函数<code>Vnode</code>中，最终的<code>Vnode</code>拥有<code>directives,domProps,on</code>属性：</p>\n<p><img src="./img/11.2.png" alt=""></p>\n<p>有了<code>Vnode</code>之后紧接着会执行<code>patchVnode</code>,<code>patchVnode</code>过程是一个真实节点创建的过程，其中的关键是<code>createElm</code>方法，这个方法我们在不同的场合也分析过，前面的源码得到指令相关的信息也会保留在<code>vnode</code>的<code>data</code>属性里，所以对属性的处理也会走<code>invokeCreateHooks</code>逻辑。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 针对指令的处理</span>\n   <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">invokeCreateHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>invokeCreateHooks</code>会调用定义好的钩子函数，对<code>vnode</code>上定义的属性，指令，事件等进行真实DOM的处理，步骤包括以下(不包含全部)：</p>\n<ol>\n<li><code>updateDOMProps</code>会利用<code>vnode data</code>上的<code>domProps</code>更新<code>input</code>标签的<code>value</code>值;</li>\n<li><code>updateAttrs</code>会利用<code>vnode data</code>上的<code>attrs</code>属性更新节点的属性值;</li>\n<li><code>updateDomListeners</code>利用<code>vnode data</code>上的<code>on</code>属性添加事件监听。</li>\n</ol>\n<p><strong>因此<code>v-model</code>语法糖最终反应的结果，是通过监听表单控件自身的<code>input</code>事件(其他类型有不同的监听事件类型)，去影响自身的<code>value</code>值</strong>。如果没有<code>v-model</code>的语法糖，我们可以这样写：\n<code>&lt;input type=&quot;text&quot; :value=&quot;message&quot; @input=&quot;(e) =&gt; { this.message = e.target.value }&quot; &gt;</code></p>\n<h3 id="1115-%E8%AF%AD%E6%B3%95%E7%B3%96%E7%9A%84%E8%83%8C%E5%90%8E">11.1.5 语法糖的背后<a class="anchor" href="#1115-%E8%AF%AD%E6%B3%95%E7%B3%96%E7%9A%84%E8%83%8C%E5%90%8E">§</a></h3>\n<p><strong>然而<code>v-model</code>仅仅是起到合并语法，创建一个新的语法糖的意义吗？</strong>\n**显然答案是否定的，对于需要使用输入法 (如中文、日文、韩文等) 的语言，你会发现 <code>v-model</code> 不会在输入法组合文字过程中得到更新。**这就是<code>v-model</code>的一个重要的特点。它会在事件处理这一层添加新的事件监听<code>compositionstart,compositionend</code>，他们会分别在语言输入的开始和结束时监听到变化，只要借助<code>$event.target.composing</code>，就可以设计出只会在输入法组合文字的结束阶段才更新数据，这有利于提高用户的使用体验。这一部分我想借助脱离框架的表单来帮助理解。</p>\n<p>脱离框架的一个视图响应数据的实现（效果类似于v-model）：</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// html</span>\n<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"inputValue"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"showValue"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>\n\n<span class="token comment">// js</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">></span>\n    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'inputValue\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> show <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'showValue\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    input<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n    show<span class="token punctuation">.</span><span class="token property-access">innerText</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token property-access">value</span>\n\n    <span class="token keyword">function</span> <span class="token function">onCompositionStart</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">composing</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">onCompositionEnd</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">composing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span>\n      <span class="token punctuation">}</span>\n      e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">composing</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      show<span class="token punctuation">.</span><span class="token property-access">innerText</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">value</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">function</span> <span class="token function">onInputChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// e.target.composing表示是否还在输入中</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">composing</span><span class="token punctuation">)</span><span class="token keyword control-flow">return</span><span class="token punctuation">;</span>\n      show<span class="token punctuation">.</span><span class="token property-access">innerText</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">value</span>\n    <span class="token punctuation">}</span>\n    input<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">,</span> onInputChange<span class="token punctuation">)</span>\n    input<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'compositionstart\'</span><span class="token punctuation">,</span> onCompositionStart<span class="token punctuation">)</span><span class="token comment">// 组合输入开始</span>\n    input<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'compositionend\'</span><span class="token punctuation">,</span> onCompositionEnd<span class="token punctuation">)</span> <span class="token comment">// 组合输入结束</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n<h2 id="112-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8v-model">11.2 组件使用v-model<a class="anchor" href="#112-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8v-model">§</a></h2>\n<p>最后我们简单说说在父组件中使用<code>v-model</code>,可以先看结论，<strong>组件上使用<code>v-model</code>本质上是子父组件通信的语法糖</strong>。先看一个简单的使用例子。</p>\n<pre class="language-js"><code class="language-js"> <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div>&lt;input type="text" :value="value" @input="emitEvent">{{value}}&lt;/div>\'</span><span class="token punctuation">,</span>\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">emitEvent</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">$emit</span><span class="token punctuation">(</span><span class="token string">\'input\'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token property-access">target</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'value\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n       message<span class="token operator">:</span> <span class="token string">\'test\'</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   components<span class="token operator">:</span> <span class="token punctuation">{</span>\n     child\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   template<span class="token operator">:</span> <span class="token string">\'&lt;div id="app">&lt;child v-model="message">&lt;/child>&lt;/div>\'</span><span class="token punctuation">,</span>\n   el<span class="token operator">:</span> <span class="token string">\'#app\'</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>父组件上使用<code>v-model</code>, 子组件默认会利用名为 <code>value</code> 的 <code>prop</code> 和名为 <code>input</code> 的事件，当然像<code>select</code>表单会以其他默认事件的形式存在。分析源码的过程也大致类似，这里只列举几个特别的地方。</p>\n<p><code>AST</code>生成阶段和普通表单控件的区别在于，当遇到<code>child</code>时，由于不是普通的<code>html</code>标签，会执行<code>getComponentModel</code>的过程,而<code>getComponentModel</code>的结果是在<code>AST</code>树上添加<code>model</code>的属性。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token method function property-access">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">genComponentModel</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">genComponentModel</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>value<span class="token punctuation">,</span>modifiers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> ref <span class="token operator">=</span> modifiers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> number <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">number</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> trim <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token property-access">trim</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> baseValueExpression <span class="token operator">=</span> <span class="token string">\'$$v\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> valueExpression <span class="token operator">=</span> baseValueExpression<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>trim<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      valueExpression <span class="token operator">=</span>\n        <span class="token string">"(typeof "</span> <span class="token operator">+</span> baseValueExpression <span class="token operator">+</span> <span class="token string">" === \'string\'"</span> <span class="token operator">+</span>\n        <span class="token string">"? "</span> <span class="token operator">+</span> baseValueExpression <span class="token operator">+</span> <span class="token string">".trim()"</span> <span class="token operator">+</span>\n        <span class="token string">": "</span> <span class="token operator">+</span> baseValueExpression <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      valueExpression <span class="token operator">=</span> <span class="token string">"_n("</span> <span class="token operator">+</span> valueExpression <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> assignment <span class="token operator">=</span> <span class="token function">genAssignmentCode</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> valueExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 在ast树上添加model属性，其中有value，expression，callback属性</span>\n    el<span class="token punctuation">.</span><span class="token property-access">model</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      value<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      expression<span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      callback<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">"function ("</span> <span class="token operator">+</span> baseValueExpression <span class="token operator">+</span> <span class="token string">") {"</span> <span class="token operator">+</span> assignment <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>最终<code>AST</code>树的结果：</p>\n<pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n  model<span class="token operator">:</span> <span class="token punctuation">{</span>\n    callback<span class="token operator">:</span> <span class="token string">"function ($$v) {message=$$v}"</span>\n    expression<span class="token operator">:</span> <span class="token string">""</span>message<span class="token string">""</span>\n    value<span class="token operator">:</span> <span class="token string">"(message)"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>经过对<code>AST</code>树的处理后，回到<code>genData$2</code>的流程，由于有了<code>model</code>属性，父组件拼接的字符串会做进一步处理。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">genData$2</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">\'{\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ···\n  <span class="token comment">// v-model组件的render函数处理</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    data <span class="token operator">+=</span> <span class="token string">"model:{value:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",callback:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">callback</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",expression:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">expression</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"},"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  ···\n  <span class="token keyword control-flow">return</span> data\n<span class="token punctuation">}</span>\n</code></pre>\n<p>因此，父组件最终的<code>render</code>函数表现为：</p>\n<pre class="language-js"><code class="language-js"><span class="token string">"_c(\'child\',{model:{value:(message),callback:function ($$v) {message=$$v},expression:"</span>message<span class="token string">"}})"</span>\n</code></pre>\n<p>子组件的创建阶段照例会执行<code>createComponent </code>，其中针对<code>model</code>的逻辑需要特别说明。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// transform component v-model data into props &amp; events</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理父组件的v-model指令对象</span>\n    <span class="token function">transformModel</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">transformModel</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// prop默认取的是value，除非配置上有model的选项</span>\n  <span class="token keyword">var</span> prop <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token property-access">model</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">prop</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'value\'</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// event默认取的是input，除非配置上有model的选项</span>\n  <span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token property-access">model</span> <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">event</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'input\'</span>\n  <span class="token comment">// vnode上新增props的属性，值为value</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">attrs</span> <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">attrs</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// vnode上新增on属性，标记事件</span>\n  <span class="token keyword">var</span> on <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">on</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> existing <span class="token operator">=</span> on<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> callback <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">model</span><span class="token punctuation">.</span><span class="token property-access">callback</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>\n      <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span>\n        <span class="token operator">?</span> existing<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span>\n        <span class="token operator">:</span> existing <span class="token operator">!==</span> callback\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      on<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>existing<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    on<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>从<code>transformModel</code>的逻辑可以看出，子组件<code>vnode</code>会为<code>data.props</code> 添加 <code>data.model.value</code>，并且给<code>data.on</code> 添加<code>data.model.callback</code>。因此父组件<code>v-model</code>语法糖本质上可以修改为\n<code>\'&lt;child :value=&quot;message&quot; @input=&quot;function(e){message = e}&quot;&gt;&lt;/child&gt;\' </code></p>\n<p><strong>显然，这种写法就是事件通信的写法，这个过程又回到对事件指令的分析过程了。因此我们可以很明显的意识到，组件使用<code>v-model</code>本质上还是一个子父组件通信的语法糖。</strong></p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#111-%E8%A1%A8%E5%8D%95%E7%BB%91%E5%AE%9A" }, "11.1 \u8868\u5355\u7ED1\u5B9A"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1111-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8" }, "11.1.1 \u57FA\u7840\u4F7F\u7528")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1112-ast%E6%A0%91%E7%9A%84%E8%A7%A3%E6%9E%90" }, "11.1.2 AST\u6811\u7684\u89E3\u6790")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1113-render%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90" }, "11.1.3 render\u51FD\u6570\u751F\u6210")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1114-patch%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9" }, "11.1.4 patch\u771F\u5B9E\u8282\u70B9")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#1115-%E8%AF%AD%E6%B3%95%E7%B3%96%E7%9A%84%E8%83%8C%E5%90%8E" }, "11.1.5 \u8BED\u6CD5\u7CD6\u7684\u80CC\u540E")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#112-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8v-model" }, "11.2 \u7EC4\u4EF6\u4F7F\u7528v-model")))),
    'author': "wyp",
    'contributors': [
        "wyp",
        "hyfun"
    ],
    'date': "2019-10-29T06:12:00.000Z",
    'updated': "2021-09-15T02:34:36.000Z",
    'excerpt': "由于v-model和前面介绍的插槽，事件一致，都属于vue提供的指令，所以我们对v-model的分析方式和以往大同小异。分析会围绕模板的编译，render函数的生成，到最后真实节点的挂载顺序执行。最终我们依然会得到一个结论，v-model无...",
    'cover': "./img/11.1.png",
    'sidebar': [
        {
            "text": "1.丰富的选项合并策略",
            "link": "/src/1.丰富的选项合并策略.md"
        },
        {
            "text": "2.基础的数据代理检测",
            "link": "/src/2.基础的数据代理检测.md"
        },
        {
            "text": "3.实例挂载流程和模板编译",
            "link": "/src/3.实例挂载流程和模板编译.md"
        },
        {
            "text": "4.完整渲染流程",
            "link": "/src/4.完整渲染流程.md"
        },
        {
            "text": "5.组件基础剖析",
            "link": "/src/5.组件基础剖析.md"
        },
        {
            "text": "6.组件高级用法",
            "link": "/src/6.组件高级用法.md"
        },
        {
            "text": "7.深入响应式系统构建-上",
            "link": "/src/7.深入响应式系统构建-上.md"
        },
        {
            "text": "7.深入响应式系统构建-中",
            "link": "/src/7.深入响应式系统构建-中.md"
        },
        {
            "text": "7.深入响应式系统构建-下",
            "link": "/src/7.深入响应式系统构建-下.md"
        },
        {
            "text": "8.来，跟我一起实现diff算法",
            "link": "/src/8.来，跟我一起实现diff算法.md"
        },
        {
            "text": "9.揭秘Vue的事件机制",
            "link": "/src/9.揭秘Vue的事件机制.md"
        },
        {
            "text": "10.vue插槽，你想了解的都在这里",
            "link": "/src/10.vue插槽，你想了解的都在这里.md"
        },
        {
            "text": "11.你真的了解v-model的语法糖了吗",
            "link": "/src/11.你真的了解v-model的语法糖了吗.md"
        },
        {
            "text": "12.动态组件的深入分析",
            "link": "/src/12.动态组件的深入分析.md"
        },
        {
            "text": "13.彻底搞懂Vue中keep-alive的魔法-上",
            "link": "/src/13.彻底搞懂Vue中keep-alive的魔法-上.md"
        },
        {
            "text": "13.彻底搞懂Vue中keep-alive的魔法-下",
            "link": "/src/13.彻底搞懂Vue中keep-alive的魔法-下.md"
        }
    ]
};
