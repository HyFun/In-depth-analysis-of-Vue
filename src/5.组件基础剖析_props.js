import projectConfig from '/In-depth-analysis-of-Vue/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'pagic' },
    'pagePath': "src/5.组件基础剖析.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "src/5.组件基础剖析.html",
    'title': undefined,
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>组件是<code>Vue</code>的一个重要核心，我们在进行项目工程化时，会将页面的结构组件化。组件化意味着独立和共享,而两个结论并不矛盾，独立的组件开发可以让开发者专注于某个功能项的开发和扩展，而组件的设计理念又使得功能项更加具有复用性，不同的页面可以进行组件功能的共享。对于开发者而言，编写<code>Vue</code>组件是掌握<code>Vue</code>开发的核心基础，<code>Vue</code>官网也花了大量的篇幅介绍了组件的体系和各种使用方法。这一节内容，我们会深入<code>Vue</code>组件内部的源码，了解<strong>组件注册的实现思路，并结合上一节介绍的实例挂载分析组件渲染挂载的基本流程，最后我们将分析组件和组件之间是如何建立联系的</strong>。我相信，掌握这些底层的实现思路对于我们今后在解决<code>vue</code>组件相关问题上会有明显的帮助。</p>\n</blockquote>\n<h2 id="51-%E7%BB%84%E4%BB%B6%E4%B8%A4%E7%A7%8D%E6%B3%A8%E5%86%8C%E6%96%B9%E5%BC%8F">5.1 组件两种注册方式<a class="anchor" href="#51-%E7%BB%84%E4%BB%B6%E4%B8%A4%E7%A7%8D%E6%B3%A8%E5%86%8C%E6%96%B9%E5%BC%8F">§</a></h2>\n<p>熟悉<code>Vue</code>开发流程的都知道，<code>Vue</code>组件在使用之前需要进行注册，而注册的方式有两种，全局注册和局部注册。在进入源码分析之前，我们先回忆一下两者的用法，以便后续掌握两者的差异。</p>\n<h3 id="511-%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C">5.1.1 全局注册<a class="anchor" href="#511-%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C">§</a></h3>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'my-test\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div>{{test}}&lt;/div>\'</span><span class="token punctuation">,</span>\n    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token number">1212</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div id="app">&lt;my-test>&lt;my-test/>&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>其中组件的全局注册需要在全局实例化Vue前调用</strong>,注册之后可以用在任何新创建的<code>Vue</code>实例中调用。</p>\n<h3 id="512-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C">5.1.2 局部注册<a class="anchor" href="#512-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C">§</a></h3>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> myTest <span class="token operator">=</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div>{{test}}&lt;/div>\'</span><span class="token punctuation">,</span>\n    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token number">1212</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> <span class="token punctuation">{</span>\n        myTest\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>当只需要在某个局部用到某个组件时，可以使用局部注册的方式进行组件注册，此时局部注册的组件只能在注册该组件内部使用。</p>\n<h3 id="513-%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B">5.1.3 注册过程<a class="anchor" href="#513-%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B">§</a></h3>\n<p>在简单回顾组件的两种注册方式后，我们来看注册过程到底发生了什么，我们以全局组件注册为例。它通过<code>Vue.component(name, {...})</code>进行组件注册，<code>Vue.component</code>是在<code>Vue</code>源码引入阶段定义的静态方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 初始化全局api</span>\n<span class="token function">initAssetRegisters</span><span class="token punctuation">(</span><span class="token maybe-class-name">Vue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token constant">ASSET_TYPES</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token string">\'component\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'directive\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'filter\'</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">initAssetRegisters</span><span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">Vue</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 定义ASSET_TYPES中每个属性的方法，其中包括component</span>\n    <span class="token constant">ASSET_TYPES</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// type: component,directive,filter</span>\n      <span class="token maybe-class-name">Vue</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span>definition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 直接返回注册组件的构造函数</span>\n            <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">\'s\'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span>\n          <span class="token punctuation">}</span>\n          <span class="token spread operator">...</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">\'component\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 验证component组件名字是否合法</span>\n            <span class="token function">validateComponentName</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">\'component\'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 组件名称设置</span>\n            definition<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">||</span> id<span class="token punctuation">;</span>\n            <span class="token comment">// Vue.extend() 创建子组件，返回子类构造器</span>\n            definition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">_base</span><span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token comment">// 为Vue.options 上的component属性添加将子类构造器</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">\'s\'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> definition<span class="token punctuation">;</span>\n          <span class="token keyword control-flow">return</span> definition\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>Vue.components</code>有两个参数，一个是需要注册组件的组件名，另一个是组件选项，如果第二个参数没有传递，则会直接返回注册过的组件选项。否则意味着需要对该组件进行注册，注册过程先会对组件名的合法性进行检测，要求组件名不允许出现非法的标签，包括<code>Vue</code>内置的组件名，如<code>slot, component</code>等。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">validateComponentName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"^[a-zA-Z][\\-\\.0-9_"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>unicodeRegExp<span class="token punctuation">.</span><span class="token property-access">source</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]*$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 正则判断检测是否为非法的标签</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token string">\'Invalid component name: "\'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">\'". Component names \'</span> <span class="token operator">+</span>\n        <span class="token string">\'should conform to valid custom element name in html5 specification.\'</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 不能使用Vue自身自定义的组件名，如slot, component,不能使用html的保留标签，如 h1, svg等</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isBuiltInTag</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token method function property-access">isReservedTag</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token string">\'Do not use built-in or reserved HTML elements as component \'</span> <span class="token operator">+</span>\n        <span class="token string">\'id: \'</span> <span class="token operator">+</span> name\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>在经过组件名的合法性检测后，会调用<code>extend</code>方法为组件创建一个子类构造器，此时的<code>this.options._base</code>代表的就是<code>Vue</code>构造器。<code>extend</code>方法的定义在介绍选项合并章节有重点介绍过，它会<strong>基于父类去创建一个子类</strong>，此时的父类是<code>Vue</code>，并且创建过程子类会继承父类的方法，并会和父类的选项进行合并，最终返回一个子类构造器。</p>\n<p>代码处还有一个逻辑，<code>Vue.component()</code>默认会把第一个参数作为组件名称，但是如果组件选项有<code>name</code>属性时，<code>name</code>属性值会将组件名覆盖。</p>\n<p><strong>总结起来，全局注册组件就是<code>Vue</code>实例化前创建一个基于<code>Vue</code>的子类构造器，并将组件的信息加载到实例<code>options.components</code>对象中。</strong></p>\n<p>**接下来自然而然会想到一个问题，局部注册和全局注册在实现上的区别体现在哪里？**我们不急着分析局部组件的注册流程，先以全局注册的组件为基础，看看作为组件，它的挂载流程有什么不同。</p>\n<h2 id="52-%E7%BB%84%E4%BB%B6vnode%E5%88%9B%E5%BB%BA">5.2 组件Vnode创建<a class="anchor" href="#52-%E7%BB%84%E4%BB%B6vnode%E5%88%9B%E5%BB%BA">§</a></h2>\n<p>上一节内容我们介绍了<code>Vue</code>如何将一个模板，通过<code>render</code>函数的转换，最终生成一个<code>Vnode tree</code>的，在不包含组件的情况下，<code>_render</code>函数的最后一步是直接调用<code>new Vnode</code>去创建一个完整的<code>Vnode tree</code>。然而有一大部分的分支我们并没有分析，那就是遇到组件占位符的场景。执行阶段如果遇到组件，处理过程要比想像中复杂得多，我们通过一张流程图展开分析。</p>\n<h3 id="521-vnode%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B%E5%9B%BE">5.2.1 Vnode创建流程图<a class="anchor" href="#521-vnode%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B%E5%9B%BE">§</a></h3>\n<p><img src="./img/5.1.png" alt=""></p>\n<h3 id="522-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">5.2.2 具体流程分析<a class="anchor" href="#522-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">§</a></h3>\n<p>我们结合实际的例子对照着流程图分析一下这个过程：</p>\n<ul>\n<li>场景</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token string">\'&lt;span>&lt;/span>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">\'&lt;div>&lt;test>&lt;/test>&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li>父<code>render</code>函数</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li><code>Vue</code>根实例初始化会执行 <code>vm.$mount(vm.$options.el)</code>实例挂载的过程，按照之前的逻辑，完整流程会经历<code>render</code>函数生成<code>Vnode</code>,以及<code>Vnode</code>生成真实<code>DOM</code>的过程。</li>\n<li><code>render</code>函数生成<code>Vnode</code>过程中，子会优先父执行生成<code>Vnode</code>过程,也就是<code>_c(\'test\')</code>函数会先被执行。<code>\'test\'</code>会先判断是普通的<code>html</code>标签还是组件的占位符。</li>\n<li>如果为一般标签，会执行<code>new Vnode</code>过程，这也是上一章节我们分析的过程；如果是组件的占位符，则会在判断组件已经被注册过的前提下进入<code>createComponent</code>创建子组件<code>Vnode</code>的过程。</li>\n<li><code>createComponent</code>是创建组件<code>Vnode</code>的过程，创建过程会再次合并选项配置，并安装组件相关的内部钩子(后面文章会再次提到内部钩子的作用)，最后通过<code>new Vnode()</code>生成以<code>vue-component</code>开头的<code>Virtual DOM</code></li>\n<li><code>render</code>函数执行过程也是一个循环递归调用创建<code>Vnode</code>的过程，执行3，4步之后，完整的生成了一个包含各个子组件的<code>Vnode tree</code></li>\n</ul>\n<p><code>_createElement</code>函数的实现之前章节分析过一部分，我们重点看看组件相关的操作。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 内部执行将render函数转化为Vnode的函数</span>\n<span class="token keyword">function</span> <span class="token function">_createElement</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>tag<span class="token punctuation">,</span>data<span class="token punctuation">,</span>children<span class="token punctuation">,</span>normalizationType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 子节点的标签为普通的html标签，直接创建Vnode</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token method function property-access">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>\n        config<span class="token punctuation">.</span><span class="token method function property-access">parsePlatformTagName</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span>\n        <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> context\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 子节点标签为注册过的组件标签名，则子组件Vnode的创建过程</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">||</span> <span class="token operator">!</span>data<span class="token punctuation">.</span><span class="token property-access">pre</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> <span class="token function">resolveAsset</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">,</span> <span class="token string">\'components\'</span><span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 创建子组件Vnode</span>\n      vnode <span class="token operator">=</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>config.isReservedTag(tag)</code>用来判断标签是否为普通的<code>html</code>标签，如果是普通节点会直接创建<code>Vnode</code>节点，如果不是，则需要判断这个占位符组件是否已经注册到，我们可以通过<code>context.$options.components[组件名]</code>拿到注册后的组件选项。如何判断组件是否已经全局注册，看看<code>resolveAsset</code>的实现。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 需要明确组件是否已经被注册</span>\n  <span class="token keyword">function</span> <span class="token function">resolveAsset</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">,</span>warnMissing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 标签为字符串</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> id <span class="token operator">!==</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 这里是 options.component</span>\n    <span class="token keyword">var</span> assets <span class="token operator">=</span> options<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 这里的分支分别支持大小写，驼峰的命名规范</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> assets<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> camelizedId <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> camelizedId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> assets<span class="token punctuation">[</span>camelizedId<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> <span class="token maybe-class-name">PascalCaseId</span> <span class="token operator">=</span> <span class="token function">capitalize</span><span class="token punctuation">(</span>camelizedId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> <span class="token maybe-class-name">PascalCaseId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> assets<span class="token punctuation">[</span><span class="token maybe-class-name">PascalCaseId</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token comment">// fallback to prototype chain</span>\n    <span class="token keyword">var</span> res <span class="token operator">=</span> assets<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> assets<span class="token punctuation">[</span>camelizedId<span class="token punctuation">]</span> <span class="token operator">||</span> assets<span class="token punctuation">[</span><span class="token maybe-class-name">PascalCaseId</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>warnMissing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token string">\'Failed to resolve \'</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\': \'</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>\n        options\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最终返回子类的构造器</span>\n    <span class="token keyword control-flow">return</span> res\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>拿到注册过的子类构造器后，调用<code>createComponent</code>方法创建子组件<code>Vnode</code></p>\n<pre class="language-js"><code class="language-js"> <span class="token comment">// 创建子组件过程</span>\n  <span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span>\n    <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> <span class="token comment">// 子类构造器</span>\n    data<span class="token punctuation">,</span>\n    context<span class="token punctuation">,</span> <span class="token comment">// vm实例</span>\n    children<span class="token punctuation">,</span> <span class="token comment">// 子节点</span>\n    tag <span class="token comment">// 子组件占位符</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ···\n    <span class="token comment">// Vue.options里的_base属性存储Vue构造器</span>\n    <span class="token keyword">var</span> baseCtor <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">_base</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 针对局部组件注册场景</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> baseCtor<span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    data <span class="token operator">=</span> data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// 构造器配置合并</span>\n    <span class="token function">resolveConstructorOptions</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 挂载组件钩子</span>\n    <span class="token function">installComponentHooks</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// return a placeholder vnode</span>\n    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">||</span> tag<span class="token punctuation">;</span>\n    <span class="token comment">// 创建子组件vnode，名称以 vue-component- 开头</span>\n    <span class="token keyword">var</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"vue-component-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">cid</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Ctor</span><span class="token operator">:</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> propsData<span class="token operator">:</span> propsData<span class="token punctuation">,</span> listeners<span class="token operator">:</span> listeners<span class="token punctuation">,</span> tag<span class="token operator">:</span> tag<span class="token punctuation">,</span> children<span class="token operator">:</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>asyncFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword control-flow">return</span> vnode\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>这里将大部分的代码都拿掉了，只留下创建<code>Vnode</code>相关的代码，最终会通过<code>new Vue</code>实例化一个名称以<code>vue-component-</code>开头的<code>Vnode</code>节点。其中两个关键的步骤是配置合并和安装组件钩子函数，选项合并的内容可以查看这个系列的前两节，这里看看<code>installComponentHooks</code>安装组件钩子函数时做了哪些操作。</p>\n<pre class="language-js"><code class="language-js">  <span class="token comment">// 组件内部自带钩子</span>\n <span class="token keyword">var</span> componentVNodeHooks <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">init</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> hydrating</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">prepatch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">prepatch</span> <span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">insert</span> <span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">destroy</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">destroy</span> <span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> hooksToMerge <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>componentVNodeHooks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将componentVNodeHooks 钩子函数合并到组件data.hook中 </span>\n<span class="token keyword">function</span> <span class="token function">installComponentHooks</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> hooks <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">hook</span> <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">hook</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hooksToMerge<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> key <span class="token operator">=</span> hooksToMerge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> existing <span class="token operator">=</span> hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> toMerge <span class="token operator">=</span> componentVNodeHooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token comment">// 如果钩子函数存在，则执行mergeHook$1方法合并</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!==</span> toMerge <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>existing <span class="token operator">&amp;&amp;</span> existing<span class="token punctuation">.</span><span class="token property-access">_merged</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> existing <span class="token operator">?</span> <span class="token function">mergeHook$1</span><span class="token punctuation">(</span>toMerge<span class="token punctuation">,</span> existing<span class="token punctuation">)</span> <span class="token operator">:</span> toMerge<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">mergeHook$1</span> <span class="token punctuation">(</span><span class="token parameter">f1<span class="token punctuation">,</span> f2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 返回一个依次执行f1,f2的函数</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">merged</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">f2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    merged<span class="token punctuation">.</span><span class="token property-access">_merged</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> merged\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>组件默认自带的这几个钩子函数会在后续<code>patch</code>过程的不同阶段执行，这部分内容不在本节的讨论范围。</p>\n<h3 id="523-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C%E5%92%8C%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E7%9A%84%E5%8C%BA%E5%88%AB">5.2.3 局部注册和全局注册的区别<a class="anchor" href="#523-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C%E5%92%8C%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E7%9A%84%E5%8C%BA%E5%88%AB">§</a></h3>\n<p>在说到全局注册和局部注册的用法时留下了一个问题，局部注册和全局注册两者的区别在哪里。其实局部注册的原理同样简单，我们使用局部注册组件时会通过在父组件选项配置中的<code>components</code>添加子组件的对象配置，这和全局注册后在<code>Vue</code>的<code>options.component</code>添加子组件构造器的结果很相似。区别在于：</p>\n<p><strong>1.局部注册添加的对象配置是在某个组件下，而全局注册添加的子组件是在根实例下。</strong></p>\n<p><strong>2.局部注册添加的是一个子组件的配置对象，而全局注册添加的是一个子类构造器。</strong></p>\n<p>因此局部注册中缺少了一步构建子类构造器的过程，这个过程放在哪里进行呢？ 回到<code>createComponent</code>的源码,源码中根据选项是对象还是函数来区分局部和全局注册组件，<strong>如果选项的值是对象，则该组件是局部注册的组件，此时在创建子<code>Vnode</code>时会调用 父类的<code>extend</code>方法去创建一个子类构造器。</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token spread operator">...</span>\n  <span class="token keyword">var</span> baseCtor <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">_base</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 针对局部组件注册场景</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> baseCtor<span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<h2 id="53-%E7%BB%84%E4%BB%B6vnode%E6%B8%B2%E6%9F%93%E7%9C%9F%E5%AE%9Edom">5.3 组件Vnode渲染真实DOM<a class="anchor" href="#53-%E7%BB%84%E4%BB%B6vnode%E6%B8%B2%E6%9F%93%E7%9C%9F%E5%AE%9Edom">§</a></h2>\n<p>根据前面的分析，不管是全局注册的组件还是局部注册的组件，组件并没有进行实例化，那么组件实例化的过程发生在哪个阶段呢？我们接着看<code>Vnode tree</code>渲染真实<code>DOM</code>的过程。</p>\n<h3 id="531-%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE">5.3.1 真实节点渲染流程图<a class="anchor" href="#531-%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE">§</a></h3>\n<p><img src="./img/5.2.png" alt=""></p>\n<h3 id="532-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">5.3.2 具体流程分析<a class="anchor" href="#532-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">§</a></h3>\n<ol>\n<li>经过<code>vm._render()</code>生成完整的<code>Virtual Dom</code>树后，紧接着执行<code>Vnode</code>渲染真实<code>DOM</code>的过程,这个过程是<code>vm.update()</code>方法的执行，而其核心是<code>vm.__patch__</code>。</li>\n<li><code>vm.__patch__</code>内部会通过 <code>createElm</code>去创建真实的<code>DOM</code>元素，期间遇到子<code>Vnode</code>会递归调用<code>createElm</code>方法。</li>\n<li>递归调用过程中，判断该节点类型是否为组件类型是通过<code>createComponent</code>方法判断的，该方法和渲染<code>Vnode</code>阶段的方法<code>createComponent</code>不同，他会调用子组件的<code>init</code>初始化钩子函数，并完成组件的<code>DOM</code>插入。</li>\n<li><code>init</code>初始化钩子函数的核心是<code>new</code>实例化这个子组件并将子组件进行挂载，实例化子组件的过程又回到合并配置，初始化生命周期，初始化事件中心，初始化渲染的过程。实例挂载又会执行<code>$mount</code>过程。</li>\n<li>完成所有子组件的实例化和节点挂载后，最后才回到根节点的挂载。</li>\n</ol>\n<p><code>__patch__</code>核心代码是通过<code>createElm</code>创建真实节点，当创建过程中遇到子<code>vnode</code>时，会调用<code>createChildren</code>,<code>createChildren</code>的目的是对子<code>vnode</code>递归调用<code>createElm</code>创建子组件节点。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 创建真实dom</span>\n<span class="token keyword">function</span> <span class="token function">createElm</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span>insertedVnodeQueue<span class="token punctuation">,</span>parentElm<span class="token punctuation">,</span>refElm<span class="token punctuation">,</span>nested<span class="token punctuation">,</span>ownerArray<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 递归创建子组件真实节点,直到完成所有子组件的渲染才进行根节点的真实节点插入</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  ···\n  <span class="token keyword">var</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">;</span>\n  <span class="token comment">// </span>\n  <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ···\n  <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span><span class="token property-access">elm</span><span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createChildren</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 遍历子节点，递归调用创建真实dom节点的方法 - createElm</span>\n    <span class="token function">createElm</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span><span class="token property-access">elm</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> children<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>createComponent</code>方法会对子组件<code>Vnode</code>进行处理中，还记得在<code>Vnode</code>生成阶段为子<code>Vnode</code>安装了一系列的钩子函数吗，在这个步骤我们可以通过是否拥有这些定义好的钩子来判断是否是已经注册过的子组件，如果条件满足，则执行组件的<code>init</code>钩子。</p>\n<p><code>init</code>钩子做的事情只有两个，<strong>实例化组件构造器，执行子组件的挂载流程。</strong>(<code>keep-alive</code>分支看具体的文章分析)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> i <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">;</span>\n  <span class="token comment">// 是否有钩子函数可以作为判断是否为组件的唯一条件</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token property-access">hook</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token property-access">init</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 执行init钩子函数</span>\n    <span class="token function">i</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment">/* hydrating */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  ···\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> componentVNodeHooks <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 忽略keepAlive过程</span>\n  <span class="token comment">// 实例化</span>\n  <span class="token keyword">var</span> child <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">componentInstance</span> <span class="token operator">=</span> <span class="token function">createComponentInstanceForVnode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span>activeInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 挂载</span>\n  child<span class="token punctuation">.</span><span class="token method function property-access">$mount</span><span class="token punctuation">(</span>hydrating <span class="token operator">?</span> vnode<span class="token punctuation">.</span><span class="token property-access">elm</span> <span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createComponentInstanceForVnode</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 实例化Vue子组件实例</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>Ctor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<p>显然<code>Vnode</code>生成真实<code>DOM</code>的过程也是一个不断递归创建子节点的过程，<code>patch</code>过程如果遇到子<code>Vnode</code>,会优先实例化子组件，并且执行子组件的挂载流程，而挂载流程又会回到<code>_render,_update</code>的过程。在所有的子<code>Vnode</code>递归挂载后，最终才会真正挂载根节点。</p>\n<h2 id="54-%E5%BB%BA%E7%AB%8B%E7%BB%84%E4%BB%B6%E8%81%94%E7%B3%BB">5.4 建立组件联系<a class="anchor" href="#54-%E5%BB%BA%E7%AB%8B%E7%BB%84%E4%BB%B6%E8%81%94%E7%B3%BB">§</a></h2>\n<p>日常开发中，我们可以通过<code>vm.$parent</code>拿到父实例，也可以在父实例中通过<code>vm.$children</code>拿到实例中的子组件。显然，<code>Vue</code>在组件和组件之间建立了一层关联。接下来的内容，我们将探索如何建立组件之间的联系。</p>\n<p>不管是父实例还是子实例，在初始化实例阶段有一个<code>initLifecycle</code>的过程。这个过程会**把当前实例添加到父实例的<code>$children</code>属性中，并设置自身的<code>$parent</code>属性指向父实例。**举一个具体的应用场景：</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>component<span class="token operator">-</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">-</span>a<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'component-a\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div>a&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 将实例对象输出</span>\n</code></pre>\n<p>由于<code>vue</code>实例向上没有父实例，所以<code>vm.$parent</code>为<code>undefined</code>，<code>vm</code>的<code>$children</code>属性指向子组件<code>componentA</code> 的实例。</p>\n<p><img src="./img/5.3.png" alt=""></p>\n<p>子组件<code>componentA</code>的 <code>$parent</code>属性指向它的父级<code>vm</code>实例，它的<code>$children</code>属性指向为空</p>\n<p><img src="./img/5.4.png" alt=""></p>\n<p>源码解析如下:</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">initLifecycle</span> <span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> options <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">;</span>\n    <span class="token comment">// 子组件注册时，会把父组件的实例挂载到自身选项的parent上</span>\n    <span class="token keyword">var</span> parent <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">;</span>\n    <span class="token comment">// 如果是子组件，并且该组件不是抽象组件时，将该组件的实例添加到父组件的$parent属性上，如果父组件是抽象组件，则一直往上层寻找，直到该父级组件不是抽象组件，并将，将该组件的实例添加到父组件的$parent属性</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>options<span class="token punctuation">.</span><span class="token property-access">abstract</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">abstract</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span><span class="token property-access">$parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        parent <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$parent</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        parent<span class="token punctuation">.</span><span class="token property-access">$children</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 将自身的$parent属性指向父实例。</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">$parent</span> <span class="token operator">=</span> parent<span class="token punctuation">;</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">$root</span> <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span><span class="token property-access">$root</span> <span class="token operator">:</span> vm<span class="token punctuation">;</span>\n\n    vm<span class="token punctuation">.</span><span class="token property-access">$children</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">$refs</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    vm<span class="token punctuation">.</span><span class="token property-access">_watcher</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_inactive</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_directInactive</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// 该实例是否挂载</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_isMounted</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// 该实例是否被销毁</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_isDestroyed</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// 该实例是否正在被销毁</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_isBeingDestroyed</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<p>最后简单讲讲抽象组件，在<code>vue</code>中有很多内置的抽象组件，例如<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;,&lt;slot&gt;&lt;slot&gt;</code>等，这些抽象组件并不会出现在子父级的路径上，并且它们也不会参与<code>DOM</code>的渲染。</p>\n<h2 id="55-%E5%B0%8F%E7%BB%93">5.5 小结<a class="anchor" href="#55-%E5%B0%8F%E7%BB%93">§</a></h2>\n<p>这一小节，结合了实际的例子分析了组件注册流程到组件挂载渲染流程，<code>Vue</code>中我们可以定义全局的组件，也可以定义局部的组件，全局组件需要进行全局注册，核心方法是<code>Vue.component</code>,他需要在根组件实例化前进行声明注册，原因是我们需要在实例化前拿到组件的配置信息并合并到<code>options.components</code>选项中。注册的本质是调用<code>extend</code>创建一个子类构造器，全局和局部的不同是局部创建子类构造器是发生在创建子组件<code>Vnode</code>阶段。而创建子<code>Vnode</code>阶段最关键的一步是定义了很多内部使用的钩子。有了一个完整的<code>Vnode tree</code>接下来会进入真正<code>DOM</code>的生成，在这个阶段如果遇到子组件<code>Vnode</code>会进行子构造器的实例化，并完成子组件的挂载。递归完成子组件的挂载后，最终才又回到根组件的挂载。\n有了组件的基本知识，下一节我们重点分析一下组件的进阶用法。</p>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("link", { href: "/In-depth-analysis-of-Vue/src/assets/favicon.ico", rel: "icon" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/In-depth-analysis-of-Vue/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Powered by\u00A0",
        React.createElement("a", { href: "https://github.com/xcatliu/pagic", target: "_blank" }, "Pagic")),
    'contentTitle': undefined,
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<p>组件是<code>Vue</code>的一个重要核心，我们在进行项目工程化时，会将页面的结构组件化。组件化意味着独立和共享,而两个结论并不矛盾，独立的组件开发可以让开发者专注于某个功能项的开发和扩展，而组件的设计理念又使得功能项更加具有复用性，不同的页面可以进行组件功能的共享。对于开发者而言，编写<code>Vue</code>组件是掌握<code>Vue</code>开发的核心基础，<code>Vue</code>官网也花了大量的篇幅介绍了组件的体系和各种使用方法。这一节内容，我们会深入<code>Vue</code>组件内部的源码，了解<strong>组件注册的实现思路，并结合上一节介绍的实例挂载分析组件渲染挂载的基本流程，最后我们将分析组件和组件之间是如何建立联系的</strong>。我相信，掌握这些底层的实现思路对于我们今后在解决<code>vue</code>组件相关问题上会有明显的帮助。</p>\n</blockquote>\n<h2 id="51-%E7%BB%84%E4%BB%B6%E4%B8%A4%E7%A7%8D%E6%B3%A8%E5%86%8C%E6%96%B9%E5%BC%8F">5.1 组件两种注册方式<a class="anchor" href="#51-%E7%BB%84%E4%BB%B6%E4%B8%A4%E7%A7%8D%E6%B3%A8%E5%86%8C%E6%96%B9%E5%BC%8F">§</a></h2>\n<p>熟悉<code>Vue</code>开发流程的都知道，<code>Vue</code>组件在使用之前需要进行注册，而注册的方式有两种，全局注册和局部注册。在进入源码分析之前，我们先回忆一下两者的用法，以便后续掌握两者的差异。</p>\n<h3 id="511-%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C">5.1.1 全局注册<a class="anchor" href="#511-%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C">§</a></h3>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'my-test\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div>{{test}}&lt;/div>\'</span><span class="token punctuation">,</span>\n    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token number">1212</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div id="app">&lt;my-test>&lt;my-test/>&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>其中组件的全局注册需要在全局实例化Vue前调用</strong>,注册之后可以用在任何新创建的<code>Vue</code>实例中调用。</p>\n<h3 id="512-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C">5.1.2 局部注册<a class="anchor" href="#512-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C">§</a></h3>\n<pre class="language-js"><code class="language-js"><span class="token keyword">var</span> myTest <span class="token operator">=</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div>{{test}}&lt;/div>\'</span><span class="token punctuation">,</span>\n    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>\n            test<span class="token operator">:</span> <span class="token number">1212</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> <span class="token punctuation">{</span>\n        myTest\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>当只需要在某个局部用到某个组件时，可以使用局部注册的方式进行组件注册，此时局部注册的组件只能在注册该组件内部使用。</p>\n<h3 id="513-%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B">5.1.3 注册过程<a class="anchor" href="#513-%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B">§</a></h3>\n<p>在简单回顾组件的两种注册方式后，我们来看注册过程到底发生了什么，我们以全局组件注册为例。它通过<code>Vue.component(name, {...})</code>进行组件注册，<code>Vue.component</code>是在<code>Vue</code>源码引入阶段定义的静态方法。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 初始化全局api</span>\n<span class="token function">initAssetRegisters</span><span class="token punctuation">(</span><span class="token maybe-class-name">Vue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token constant">ASSET_TYPES</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token string">\'component\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'directive\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'filter\'</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">initAssetRegisters</span><span class="token punctuation">(</span><span class="token parameter"><span class="token maybe-class-name">Vue</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 定义ASSET_TYPES中每个属性的方法，其中包括component</span>\n    <span class="token constant">ASSET_TYPES</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// type: component,directive,filter</span>\n      <span class="token maybe-class-name">Vue</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span>definition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 直接返回注册组件的构造函数</span>\n            <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">\'s\'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span>\n          <span class="token punctuation">}</span>\n          <span class="token spread operator">...</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">\'component\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 验证component组件名字是否合法</span>\n            <span class="token function">validateComponentName</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">\'component\'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 组件名称设置</span>\n            definition<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">||</span> id<span class="token punctuation">;</span>\n            <span class="token comment">// Vue.extend() 创建子组件，返回子类构造器</span>\n            definition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">_base</span><span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n          <span class="token comment">// 为Vue.options 上的component属性添加将子类构造器</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">[</span>type <span class="token operator">+</span> <span class="token string">\'s\'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> definition<span class="token punctuation">;</span>\n          <span class="token keyword control-flow">return</span> definition\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>Vue.components</code>有两个参数，一个是需要注册组件的组件名，另一个是组件选项，如果第二个参数没有传递，则会直接返回注册过的组件选项。否则意味着需要对该组件进行注册，注册过程先会对组件名的合法性进行检测，要求组件名不允许出现非法的标签，包括<code>Vue</code>内置的组件名，如<code>slot, component</code>等。</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">validateComponentName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"^[a-zA-Z][\\-\\.0-9_"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>unicodeRegExp<span class="token punctuation">.</span><span class="token property-access">source</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]*$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 正则判断检测是否为非法的标签</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token string">\'Invalid component name: "\'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">\'". Component names \'</span> <span class="token operator">+</span>\n        <span class="token string">\'should conform to valid custom element name in html5 specification.\'</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 不能使用Vue自身自定义的组件名，如slot, component,不能使用html的保留标签，如 h1, svg等</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isBuiltInTag</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token method function property-access">isReservedTag</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token string">\'Do not use built-in or reserved HTML elements as component \'</span> <span class="token operator">+</span>\n        <span class="token string">\'id: \'</span> <span class="token operator">+</span> name\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>在经过组件名的合法性检测后，会调用<code>extend</code>方法为组件创建一个子类构造器，此时的<code>this.options._base</code>代表的就是<code>Vue</code>构造器。<code>extend</code>方法的定义在介绍选项合并章节有重点介绍过，它会<strong>基于父类去创建一个子类</strong>，此时的父类是<code>Vue</code>，并且创建过程子类会继承父类的方法，并会和父类的选项进行合并，最终返回一个子类构造器。</p>\n<p>代码处还有一个逻辑，<code>Vue.component()</code>默认会把第一个参数作为组件名称，但是如果组件选项有<code>name</code>属性时，<code>name</code>属性值会将组件名覆盖。</p>\n<p><strong>总结起来，全局注册组件就是<code>Vue</code>实例化前创建一个基于<code>Vue</code>的子类构造器，并将组件的信息加载到实例<code>options.components</code>对象中。</strong></p>\n<p>**接下来自然而然会想到一个问题，局部注册和全局注册在实现上的区别体现在哪里？**我们不急着分析局部组件的注册流程，先以全局注册的组件为基础，看看作为组件，它的挂载流程有什么不同。</p>\n<h2 id="52-%E7%BB%84%E4%BB%B6vnode%E5%88%9B%E5%BB%BA">5.2 组件Vnode创建<a class="anchor" href="#52-%E7%BB%84%E4%BB%B6vnode%E5%88%9B%E5%BB%BA">§</a></h2>\n<p>上一节内容我们介绍了<code>Vue</code>如何将一个模板，通过<code>render</code>函数的转换，最终生成一个<code>Vnode tree</code>的，在不包含组件的情况下，<code>_render</code>函数的最后一步是直接调用<code>new Vnode</code>去创建一个完整的<code>Vnode tree</code>。然而有一大部分的分支我们并没有分析，那就是遇到组件占位符的场景。执行阶段如果遇到组件，处理过程要比想像中复杂得多，我们通过一张流程图展开分析。</p>\n<h3 id="521-vnode%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B%E5%9B%BE">5.2.1 Vnode创建流程图<a class="anchor" href="#521-vnode%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B%E5%9B%BE">§</a></h3>\n<p><img src="./img/5.1.png" alt=""></p>\n<h3 id="522-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">5.2.2 具体流程分析<a class="anchor" href="#522-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">§</a></h3>\n<p>我们结合实际的例子对照着流程图分析一下这个过程：</p>\n<ul>\n<li>场景</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token string">\'&lt;span>&lt;/span>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">\'&lt;div>&lt;test>&lt;/test>&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<ul>\n<li>父<code>render</code>函数</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword control-flow">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li><code>Vue</code>根实例初始化会执行 <code>vm.$mount(vm.$options.el)</code>实例挂载的过程，按照之前的逻辑，完整流程会经历<code>render</code>函数生成<code>Vnode</code>,以及<code>Vnode</code>生成真实<code>DOM</code>的过程。</li>\n<li><code>render</code>函数生成<code>Vnode</code>过程中，子会优先父执行生成<code>Vnode</code>过程,也就是<code>_c(\'test\')</code>函数会先被执行。<code>\'test\'</code>会先判断是普通的<code>html</code>标签还是组件的占位符。</li>\n<li>如果为一般标签，会执行<code>new Vnode</code>过程，这也是上一章节我们分析的过程；如果是组件的占位符，则会在判断组件已经被注册过的前提下进入<code>createComponent</code>创建子组件<code>Vnode</code>的过程。</li>\n<li><code>createComponent</code>是创建组件<code>Vnode</code>的过程，创建过程会再次合并选项配置，并安装组件相关的内部钩子(后面文章会再次提到内部钩子的作用)，最后通过<code>new Vnode()</code>生成以<code>vue-component</code>开头的<code>Virtual DOM</code></li>\n<li><code>render</code>函数执行过程也是一个循环递归调用创建<code>Vnode</code>的过程，执行3，4步之后，完整的生成了一个包含各个子组件的<code>Vnode tree</code></li>\n</ul>\n<p><code>_createElement</code>函数的实现之前章节分析过一部分，我们重点看看组件相关的操作。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 内部执行将render函数转化为Vnode的函数</span>\n<span class="token keyword">function</span> <span class="token function">_createElement</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>tag<span class="token punctuation">,</span>data<span class="token punctuation">,</span>children<span class="token punctuation">,</span>normalizationType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 子节点的标签为普通的html标签，直接创建Vnode</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token method function property-access">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>\n        config<span class="token punctuation">.</span><span class="token method function property-access">parsePlatformTagName</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span>\n        <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> context\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 子节点标签为注册过的组件标签名，则子组件Vnode的创建过程</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>data <span class="token operator">||</span> <span class="token operator">!</span>data<span class="token punctuation">.</span><span class="token property-access">pre</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> <span class="token function">resolveAsset</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">,</span> <span class="token string">\'components\'</span><span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 创建子组件Vnode</span>\n      vnode <span class="token operator">=</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>config.isReservedTag(tag)</code>用来判断标签是否为普通的<code>html</code>标签，如果是普通节点会直接创建<code>Vnode</code>节点，如果不是，则需要判断这个占位符组件是否已经注册到，我们可以通过<code>context.$options.components[组件名]</code>拿到注册后的组件选项。如何判断组件是否已经全局注册，看看<code>resolveAsset</code>的实现。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 需要明确组件是否已经被注册</span>\n  <span class="token keyword">function</span> <span class="token function">resolveAsset</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">,</span>warnMissing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 标签为字符串</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> id <span class="token operator">!==</span> <span class="token string">\'string\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 这里是 options.component</span>\n    <span class="token keyword">var</span> assets <span class="token operator">=</span> options<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 这里的分支分别支持大小写，驼峰的命名规范</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> assets<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> camelizedId <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> camelizedId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> assets<span class="token punctuation">[</span>camelizedId<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> <span class="token maybe-class-name">PascalCaseId</span> <span class="token operator">=</span> <span class="token function">capitalize</span><span class="token punctuation">(</span>camelizedId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> <span class="token maybe-class-name">PascalCaseId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> assets<span class="token punctuation">[</span><span class="token maybe-class-name">PascalCaseId</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token comment">// fallback to prototype chain</span>\n    <span class="token keyword">var</span> res <span class="token operator">=</span> assets<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> assets<span class="token punctuation">[</span>camelizedId<span class="token punctuation">]</span> <span class="token operator">||</span> assets<span class="token punctuation">[</span><span class="token maybe-class-name">PascalCaseId</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>warnMissing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">warn</span><span class="token punctuation">(</span>\n        <span class="token string">\'Failed to resolve \'</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">\': \'</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>\n        options\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最终返回子类的构造器</span>\n    <span class="token keyword control-flow">return</span> res\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>拿到注册过的子类构造器后，调用<code>createComponent</code>方法创建子组件<code>Vnode</code></p>\n<pre class="language-js"><code class="language-js"> <span class="token comment">// 创建子组件过程</span>\n  <span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span>\n    <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> <span class="token comment">// 子类构造器</span>\n    data<span class="token punctuation">,</span>\n    context<span class="token punctuation">,</span> <span class="token comment">// vm实例</span>\n    children<span class="token punctuation">,</span> <span class="token comment">// 子节点</span>\n    tag <span class="token comment">// 子组件占位符</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ···\n    <span class="token comment">// Vue.options里的_base属性存储Vue构造器</span>\n    <span class="token keyword">var</span> baseCtor <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">_base</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 针对局部组件注册场景</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> baseCtor<span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    data <span class="token operator">=</span> data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">// 构造器配置合并</span>\n    <span class="token function">resolveConstructorOptions</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 挂载组件钩子</span>\n    <span class="token function">installComponentHooks</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// return a placeholder vnode</span>\n    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">options</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">||</span> tag<span class="token punctuation">;</span>\n    <span class="token comment">// 创建子组件vnode，名称以 vue-component- 开头</span>\n    <span class="token keyword">var</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"vue-component-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">.</span><span class="token property-access">cid</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Ctor</span><span class="token operator">:</span> <span class="token maybe-class-name">Ctor</span><span class="token punctuation">,</span> propsData<span class="token operator">:</span> propsData<span class="token punctuation">,</span> listeners<span class="token operator">:</span> listeners<span class="token punctuation">,</span> tag<span class="token operator">:</span> tag<span class="token punctuation">,</span> children<span class="token operator">:</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>asyncFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword control-flow">return</span> vnode\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>这里将大部分的代码都拿掉了，只留下创建<code>Vnode</code>相关的代码，最终会通过<code>new Vue</code>实例化一个名称以<code>vue-component-</code>开头的<code>Vnode</code>节点。其中两个关键的步骤是配置合并和安装组件钩子函数，选项合并的内容可以查看这个系列的前两节，这里看看<code>installComponentHooks</code>安装组件钩子函数时做了哪些操作。</p>\n<pre class="language-js"><code class="language-js">  <span class="token comment">// 组件内部自带钩子</span>\n <span class="token keyword">var</span> componentVNodeHooks <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">init</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> hydrating</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">prepatch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">prepatch</span> <span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">insert</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">insert</span> <span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">destroy</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">destroy</span> <span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> hooksToMerge <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>componentVNodeHooks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将componentVNodeHooks 钩子函数合并到组件data.hook中 </span>\n<span class="token keyword">function</span> <span class="token function">installComponentHooks</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> hooks <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token property-access">hook</span> <span class="token operator">||</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token property-access">hook</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hooksToMerge<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> key <span class="token operator">=</span> hooksToMerge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> existing <span class="token operator">=</span> hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> toMerge <span class="token operator">=</span> componentVNodeHooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token comment">// 如果钩子函数存在，则执行mergeHook$1方法合并</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!==</span> toMerge <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>existing <span class="token operator">&amp;&amp;</span> existing<span class="token punctuation">.</span><span class="token property-access">_merged</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        hooks<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> existing <span class="token operator">?</span> <span class="token function">mergeHook$1</span><span class="token punctuation">(</span>toMerge<span class="token punctuation">,</span> existing<span class="token punctuation">)</span> <span class="token operator">:</span> toMerge<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">mergeHook$1</span> <span class="token punctuation">(</span><span class="token parameter">f1<span class="token punctuation">,</span> f2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 返回一个依次执行f1,f2的函数</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">merged</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">f2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    merged<span class="token punctuation">.</span><span class="token property-access">_merged</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> merged\n  <span class="token punctuation">}</span>\n</code></pre>\n<p>组件默认自带的这几个钩子函数会在后续<code>patch</code>过程的不同阶段执行，这部分内容不在本节的讨论范围。</p>\n<h3 id="523-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C%E5%92%8C%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E7%9A%84%E5%8C%BA%E5%88%AB">5.2.3 局部注册和全局注册的区别<a class="anchor" href="#523-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C%E5%92%8C%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E7%9A%84%E5%8C%BA%E5%88%AB">§</a></h3>\n<p>在说到全局注册和局部注册的用法时留下了一个问题，局部注册和全局注册两者的区别在哪里。其实局部注册的原理同样简单，我们使用局部注册组件时会通过在父组件选项配置中的<code>components</code>添加子组件的对象配置，这和全局注册后在<code>Vue</code>的<code>options.component</code>添加子组件构造器的结果很相似。区别在于：</p>\n<p><strong>1.局部注册添加的对象配置是在某个组件下，而全局注册添加的子组件是在根实例下。</strong></p>\n<p><strong>2.局部注册添加的是一个子组件的配置对象，而全局注册添加的是一个子类构造器。</strong></p>\n<p>因此局部注册中缺少了一步构建子类构造器的过程，这个过程放在哪里进行呢？ 回到<code>createComponent</code>的源码,源码中根据选项是对象还是函数来区分局部和全局注册组件，<strong>如果选项的值是对象，则该组件是局部注册的组件，此时在创建子<code>Vnode</code>时会调用 父类的<code>extend</code>方法去创建一个子类构造器。</strong></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token spread operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token spread operator">...</span>\n  <span class="token keyword">var</span> baseCtor <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">_base</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 针对局部组件注册场景</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token maybe-class-name">Ctor</span> <span class="token operator">=</span> baseCtor<span class="token punctuation">.</span><span class="token method function property-access">extend</span><span class="token punctuation">(</span><span class="token maybe-class-name">Ctor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<h2 id="53-%E7%BB%84%E4%BB%B6vnode%E6%B8%B2%E6%9F%93%E7%9C%9F%E5%AE%9Edom">5.3 组件Vnode渲染真实DOM<a class="anchor" href="#53-%E7%BB%84%E4%BB%B6vnode%E6%B8%B2%E6%9F%93%E7%9C%9F%E5%AE%9Edom">§</a></h2>\n<p>根据前面的分析，不管是全局注册的组件还是局部注册的组件，组件并没有进行实例化，那么组件实例化的过程发生在哪个阶段呢？我们接着看<code>Vnode tree</code>渲染真实<code>DOM</code>的过程。</p>\n<h3 id="531-%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE">5.3.1 真实节点渲染流程图<a class="anchor" href="#531-%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE">§</a></h3>\n<p><img src="./img/5.2.png" alt=""></p>\n<h3 id="532-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">5.3.2 具体流程分析<a class="anchor" href="#532-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90">§</a></h3>\n<ol>\n<li>经过<code>vm._render()</code>生成完整的<code>Virtual Dom</code>树后，紧接着执行<code>Vnode</code>渲染真实<code>DOM</code>的过程,这个过程是<code>vm.update()</code>方法的执行，而其核心是<code>vm.__patch__</code>。</li>\n<li><code>vm.__patch__</code>内部会通过 <code>createElm</code>去创建真实的<code>DOM</code>元素，期间遇到子<code>Vnode</code>会递归调用<code>createElm</code>方法。</li>\n<li>递归调用过程中，判断该节点类型是否为组件类型是通过<code>createComponent</code>方法判断的，该方法和渲染<code>Vnode</code>阶段的方法<code>createComponent</code>不同，他会调用子组件的<code>init</code>初始化钩子函数，并完成组件的<code>DOM</code>插入。</li>\n<li><code>init</code>初始化钩子函数的核心是<code>new</code>实例化这个子组件并将子组件进行挂载，实例化子组件的过程又回到合并配置，初始化生命周期，初始化事件中心，初始化渲染的过程。实例挂载又会执行<code>$mount</code>过程。</li>\n<li>完成所有子组件的实例化和节点挂载后，最后才回到根节点的挂载。</li>\n</ol>\n<p><code>__patch__</code>核心代码是通过<code>createElm</code>创建真实节点，当创建过程中遇到子<code>vnode</code>时，会调用<code>createChildren</code>,<code>createChildren</code>的目的是对子<code>vnode</code>递归调用<code>createElm</code>创建子组件节点。</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// 创建真实dom</span>\n<span class="token keyword">function</span> <span class="token function">createElm</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span>insertedVnodeQueue<span class="token punctuation">,</span>parentElm<span class="token punctuation">,</span>refElm<span class="token punctuation">,</span>nested<span class="token punctuation">,</span>ownerArray<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 递归创建子组件真实节点,直到完成所有子组件的渲染才进行根节点的真实节点插入</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span>\n  <span class="token punctuation">}</span>\n  ···\n  <span class="token keyword">var</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">;</span>\n  <span class="token comment">// </span>\n  <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ···\n  <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span><span class="token property-access">elm</span><span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createChildren</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 遍历子节点，递归调用创建真实dom节点的方法 - createElm</span>\n    <span class="token function">createElm</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span><span class="token property-access">elm</span><span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> children<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p><code>createComponent</code>方法会对子组件<code>Vnode</code>进行处理中，还记得在<code>Vnode</code>生成阶段为子<code>Vnode</code>安装了一系列的钩子函数吗，在这个步骤我们可以通过是否拥有这些定义好的钩子来判断是否是已经注册过的子组件，如果条件满足，则执行组件的<code>init</code>钩子。</p>\n<p><code>init</code>钩子做的事情只有两个，<strong>实例化组件构造器，执行子组件的挂载流程。</strong>(<code>keep-alive</code>分支看具体的文章分析)</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> i <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">;</span>\n  <span class="token comment">// 是否有钩子函数可以作为判断是否为组件的唯一条件</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token property-access">hook</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token property-access">init</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 执行init钩子函数</span>\n    <span class="token function">i</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment">/* hydrating */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  ···\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> componentVNodeHooks <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 忽略keepAlive过程</span>\n  <span class="token comment">// 实例化</span>\n  <span class="token keyword">var</span> child <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token property-access">componentInstance</span> <span class="token operator">=</span> <span class="token function">createComponentInstanceForVnode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span>activeInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 挂载</span>\n  child<span class="token punctuation">.</span><span class="token method function property-access">$mount</span><span class="token punctuation">(</span>hydrating <span class="token operator">?</span> vnode<span class="token punctuation">.</span><span class="token property-access">elm</span> <span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createComponentInstanceForVnode</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ···\n  <span class="token comment">// 实例化Vue子组件实例</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>Ctor</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<p>显然<code>Vnode</code>生成真实<code>DOM</code>的过程也是一个不断递归创建子节点的过程，<code>patch</code>过程如果遇到子<code>Vnode</code>,会优先实例化子组件，并且执行子组件的挂载流程，而挂载流程又会回到<code>_render,_update</code>的过程。在所有的子<code>Vnode</code>递归挂载后，最终才会真正挂载根节点。</p>\n<h2 id="54-%E5%BB%BA%E7%AB%8B%E7%BB%84%E4%BB%B6%E8%81%94%E7%B3%BB">5.4 建立组件联系<a class="anchor" href="#54-%E5%BB%BA%E7%AB%8B%E7%BB%84%E4%BB%B6%E8%81%94%E7%B3%BB">§</a></h2>\n<p>日常开发中，我们可以通过<code>vm.$parent</code>拿到父实例，也可以在父实例中通过<code>vm.$children</code>拿到实例中的子组件。显然，<code>Vue</code>在组件和组件之间建立了一层关联。接下来的内容，我们将探索如何建立组件之间的联系。</p>\n<p>不管是父实例还是子实例，在初始化实例阶段有一个<code>initLifecycle</code>的过程。这个过程会**把当前实例添加到父实例的<code>$children</code>属性中，并设置自身的<code>$parent</code>属性指向父实例。**举一个具体的应用场景：</p>\n<pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>component<span class="token operator">-</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">-</span>a<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token maybe-class-name">Vue</span><span class="token punctuation">.</span><span class="token method function property-access">component</span><span class="token punctuation">(</span><span class="token string">\'component-a\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">\'&lt;div>a&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> el<span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 将实例对象输出</span>\n</code></pre>\n<p>由于<code>vue</code>实例向上没有父实例，所以<code>vm.$parent</code>为<code>undefined</code>，<code>vm</code>的<code>$children</code>属性指向子组件<code>componentA</code> 的实例。</p>\n<p><img src="./img/5.3.png" alt=""></p>\n<p>子组件<code>componentA</code>的 <code>$parent</code>属性指向它的父级<code>vm</code>实例，它的<code>$children</code>属性指向为空</p>\n<p><img src="./img/5.4.png" alt=""></p>\n<p>源码解析如下:</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">initLifecycle</span> <span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> options <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">;</span>\n    <span class="token comment">// 子组件注册时，会把父组件的实例挂载到自身选项的parent上</span>\n    <span class="token keyword">var</span> parent <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">;</span>\n    <span class="token comment">// 如果是子组件，并且该组件不是抽象组件时，将该组件的实例添加到父组件的$parent属性上，如果父组件是抽象组件，则一直往上层寻找，直到该父级组件不是抽象组件，并将，将该组件的实例添加到父组件的$parent属性</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>options<span class="token punctuation">.</span><span class="token property-access">abstract</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token property-access">$options</span><span class="token punctuation">.</span><span class="token property-access">abstract</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span><span class="token property-access">$parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        parent <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token property-access">$parent</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        parent<span class="token punctuation">.</span><span class="token property-access">$children</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 将自身的$parent属性指向父实例。</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">$parent</span> <span class="token operator">=</span> parent<span class="token punctuation">;</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">$root</span> <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span><span class="token property-access">$root</span> <span class="token operator">:</span> vm<span class="token punctuation">;</span>\n\n    vm<span class="token punctuation">.</span><span class="token property-access">$children</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">$refs</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    vm<span class="token punctuation">.</span><span class="token property-access">_watcher</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_inactive</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_directInactive</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// 该实例是否挂载</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_isMounted</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// 该实例是否被销毁</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_isDestroyed</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// 该实例是否正在被销毁</span>\n    vm<span class="token punctuation">.</span><span class="token property-access">_isBeingDestroyed</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre>\n<p>最后简单讲讲抽象组件，在<code>vue</code>中有很多内置的抽象组件，例如<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;,&lt;slot&gt;&lt;slot&gt;</code>等，这些抽象组件并不会出现在子父级的路径上，并且它们也不会参与<code>DOM</code>的渲染。</p>\n<h2 id="55-%E5%B0%8F%E7%BB%93">5.5 小结<a class="anchor" href="#55-%E5%B0%8F%E7%BB%93">§</a></h2>\n<p>这一小节，结合了实际的例子分析了组件注册流程到组件挂载渲染流程，<code>Vue</code>中我们可以定义全局的组件，也可以定义局部的组件，全局组件需要进行全局注册，核心方法是<code>Vue.component</code>,他需要在根组件实例化前进行声明注册，原因是我们需要在实例化前拿到组件的配置信息并合并到<code>options.components</code>选项中。注册的本质是调用<code>extend</code>创建一个子类构造器，全局和局部的不同是局部创建子类构造器是发生在创建子组件<code>Vnode</code>阶段。而创建子<code>Vnode</code>阶段最关键的一步是定义了很多内部使用的钩子。有了一个完整的<code>Vnode tree</code>接下来会进入真正<code>DOM</code>的生成，在这个阶段如果遇到子组件<code>Vnode</code>会进行子构造器的实例化，并完成子组件的挂载。递归完成子组件的挂载后，最终才又回到根组件的挂载。\n有了组件的基本知识，下一节我们重点分析一下组件的进阶用法。</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#51-%E7%BB%84%E4%BB%B6%E4%B8%A4%E7%A7%8D%E6%B3%A8%E5%86%8C%E6%96%B9%E5%BC%8F" }, "5.1 \u7EC4\u4EF6\u4E24\u79CD\u6CE8\u518C\u65B9\u5F0F"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#511-%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C" }, "5.1.1 \u5168\u5C40\u6CE8\u518C")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#512-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C" }, "5.1.2 \u5C40\u90E8\u6CE8\u518C")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#513-%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B" }, "5.1.3 \u6CE8\u518C\u8FC7\u7A0B")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#52-%E7%BB%84%E4%BB%B6vnode%E5%88%9B%E5%BB%BA" }, "5.2 \u7EC4\u4EF6Vnode\u521B\u5EFA"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#521-vnode%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B%E5%9B%BE" }, "5.2.1 Vnode\u521B\u5EFA\u6D41\u7A0B\u56FE")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#522-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90" }, "5.2.2 \u5177\u4F53\u6D41\u7A0B\u5206\u6790")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#523-%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C%E5%92%8C%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C%E7%9A%84%E5%8C%BA%E5%88%AB" }, "5.2.3 \u5C40\u90E8\u6CE8\u518C\u548C\u5168\u5C40\u6CE8\u518C\u7684\u533A\u522B")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#53-%E7%BB%84%E4%BB%B6vnode%E6%B8%B2%E6%9F%93%E7%9C%9F%E5%AE%9Edom" }, "5.3 \u7EC4\u4EF6Vnode\u6E32\u67D3\u771F\u5B9EDOM"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#531-%E7%9C%9F%E5%AE%9E%E8%8A%82%E7%82%B9%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE" }, "5.3.1 \u771F\u5B9E\u8282\u70B9\u6E32\u67D3\u6D41\u7A0B\u56FE")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#532-%E5%85%B7%E4%BD%93%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90" }, "5.3.2 \u5177\u4F53\u6D41\u7A0B\u5206\u6790")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#54-%E5%BB%BA%E7%AB%8B%E7%BB%84%E4%BB%B6%E8%81%94%E7%B3%BB" }, "5.4 \u5EFA\u7ACB\u7EC4\u4EF6\u8054\u7CFB")),
            React.createElement("li", null,
                React.createElement("a", { href: "#55-%E5%B0%8F%E7%BB%93" }, "5.5 \u5C0F\u7ED3")))),
    'author': "wyp",
    'contributors': [
        "wyp",
        "hyfun"
    ],
    'date': "2019-10-29T06:12:00.000Z",
    'updated': "2021-09-15T02:34:36.000Z",
    'excerpt': "5.1 组件两种注册方式 熟悉Vue开发流程的都知道，Vue组件在使用之前需要进行注册，而注册的方式有两种，全局注册和局部注册。在进入源码分析之前，我们先回忆一下两者的用法，以便后续掌握两者的差异。 5.1.1 全局注册 Vue.com...",
    'cover': "./img/5.1.png",
    'sidebar': [
        {
            "text": "1.丰富的选项合并策略",
            "link": "/In-depth-analysis-of-Vue/src/1.丰富的选项合并策略.md"
        },
        {
            "text": "2.基础的数据代理检测",
            "link": "/In-depth-analysis-of-Vue/src/2.基础的数据代理检测.md"
        },
        {
            "text": "3.实例挂载流程和模板编译",
            "link": "/In-depth-analysis-of-Vue/src/3.实例挂载流程和模板编译.md"
        },
        {
            "text": "4.完整渲染流程",
            "link": "/In-depth-analysis-of-Vue/src/4.完整渲染流程.md"
        },
        {
            "text": "5.组件基础剖析",
            "link": "/In-depth-analysis-of-Vue/src/5.组件基础剖析.md"
        },
        {
            "text": "6.组件高级用法",
            "link": "/In-depth-analysis-of-Vue/src/6.组件高级用法.md"
        },
        {
            "text": "7.深入响应式系统构建-上",
            "link": "/In-depth-analysis-of-Vue/src/7.深入响应式系统构建-上.md"
        },
        {
            "text": "7.深入响应式系统构建-中",
            "link": "/In-depth-analysis-of-Vue/src/7.深入响应式系统构建-中.md"
        },
        {
            "text": "7.深入响应式系统构建-下",
            "link": "/In-depth-analysis-of-Vue/src/7.深入响应式系统构建-下.md"
        },
        {
            "text": "8.来，跟我一起实现diff算法",
            "link": "/In-depth-analysis-of-Vue/src/8.来，跟我一起实现diff算法.md"
        },
        {
            "text": "9.揭秘Vue的事件机制",
            "link": "/In-depth-analysis-of-Vue/src/9.揭秘Vue的事件机制.md"
        },
        {
            "text": "10.vue插槽，你想了解的都在这里",
            "link": "/In-depth-analysis-of-Vue/src/10.vue插槽，你想了解的都在这里.md"
        },
        {
            "text": "11.你真的了解v-model的语法糖了吗",
            "link": "/In-depth-analysis-of-Vue/src/11.你真的了解v-model的语法糖了吗.md"
        },
        {
            "text": "12.动态组件的深入分析",
            "link": "/In-depth-analysis-of-Vue/src/12.动态组件的深入分析.md"
        },
        {
            "text": "13.彻底搞懂Vue中keep-alive的魔法-上",
            "link": "/In-depth-analysis-of-Vue/src/13.彻底搞懂Vue中keep-alive的魔法-上.md"
        },
        {
            "text": "13.彻底搞懂Vue中keep-alive的魔法-下",
            "link": "/In-depth-analysis-of-Vue/src/13.彻底搞懂Vue中keep-alive的魔法-下.md"
        }
    ]
};
